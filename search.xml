<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Godot制作第一个2D游戏 01</title>
      <link href="/2025/04/01/godot-first-game-01/"/>
      <url>/2025/04/01/godot-first-game-01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="使用Godot制作第一个2D游戏-01"><a href="#使用Godot制作第一个2D游戏-01" class="headerlink" title="使用Godot制作第一个2D游戏 01"></a>使用Godot制作第一个2D游戏 01</h1><p>本教程文档依据<a href="https://space.bilibili.com/204475293">码客二十二</a>的<a href="https://www.bilibili.com/video/BV1fuCrYFEoG?spm_id_from=333.788.videopod.sections&amp;vd_source=c5d32b76b7f25615fe49ce8530034071">Godot教程</a>视频进行整理，相关代码以及项目素材请到原视频下方寻找。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://godotengine.org/">Godot官网</a></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-01.png" alt=""></p><p>Godot支持两种编程语言</p><ul><li>GD Script（Godot脚本语言）</li><li>C#（Unity）</li></ul><p>在下载页面可以找到两个版本，.NET版本额外支持C#编程（普通版只支持GD Script）。</p><p>如有需求的话（遇到兼容问题），在<strong>previous version</strong>中可以找到Godot3以及更早的版本。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-02.png" alt=""></p><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>启动Godot，出现项目管理器页面，可以在右上角设置中切换中文语言。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-03.png" alt=""></p><p>点击左上角创建按钮创建新项目，设置项目名、项目路径。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-04.png" alt=""></p><p>完成创建后进入Godot项目菜单。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-05.png" alt=""></p><h2 id="导入素材"><a href="#导入素材" class="headerlink" title="导入素材"></a>导入素材</h2><p>左下角的窗口是项目的文件系统（资源管理器），存放游戏项目中的美术、音频、代码等文件。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-06.png" alt=""></p><p>直接将要导入的素材（AssetBundle）拖动到文件系统窗口中，即可将素材导入到Godot引擎中。</p><ul><li>AssetBundle素材包<ul><li>Audio 音频</li><li>Sprites 图片</li><li>.ttf 字体</li></ul></li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-07.png" alt=""></p><p>点击右上角的按钮可以更改文件系统中文件的显示模式，修改成自己习惯的即可。</p><p>点击文件系统里双击文件可以对其进行预览。</p><h2 id="编辑器UI"><a href="#编辑器UI" class="headerlink" title="编辑器UI"></a>编辑器UI</h2><p>制作2D游戏，首先将编辑器窗口改为2D视角。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-08.png" alt=""></p><p>界面中间的窗口是观察窗。</p><ul><li>拖动：<strong>按住空格+按住鼠标左键</strong> or <strong>按住鼠标中键（滚轮）</strong></li><li>缩放：<strong>滚动鼠标滚轮</strong> </li></ul><h2 id="场景和节点"><a href="#场景和节点" class="headerlink" title="场景和节点"></a>场景和节点</h2><p>游戏场景（所有都游戏元素如角色、道具、背景、音效，都要放在游戏场景中。场景中的这些元素被称为节点（子节点 Node），有的节点显示图像，有的节点播放音频，子节点也可以拥有自己的子节点。同时场景本身也是一个节点（根节点 Root Node）。由一个场景根节点和众多元素子节点组成场景树，如下图所示。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-09.png" alt=""></p><p>点击场景窗口中的<strong>2D场景</strong>创建2D根节点。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-10.png" alt=""></p><p>首先向根节点中添加一个背景子节点。点击场景窗口左上角的加号（或快捷键ctrl+A），添加一个<strong>Sprite2D节点</strong>，Sprite节点被叫作图像节点或精灵节点，可以用来显示图片。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-11.png" alt=""></p><p>选中创建的Sprite2D节点，在右侧的检查器中会显示该节点的各项属性，初始纹理属性（Texture）为空，在文件系统中找到森林背景图资源（ForestBackground.png），拖动到Texture属性上赋予其纹理。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-12.png" alt=""></p><p>放大背景资源图片，发现此类像素图片的显示比较模糊，将左上角<strong>项目</strong>-<strong>项目设置</strong>-<strong>渲染</strong>-<strong>纹理</strong>-<strong>画布纹理</strong>-<strong>默认纹理过滤</strong>选项修改为Nearest，这种渲染方式更适合像素图的展示。</p><p>点击观察窗左上角的移动按钮（或快捷键W）切换到移动模式，此时可以移动场景中的背景图片，使用按住Shift再进行拖动则只能在水平或垂直方向上移动图片。ctrl+Z可以撤销操作。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-13.png" alt=""></p><p>在场景窗口中，将显示背景图片的Sprite2D节点复制一份（快捷操作：选中节点然后ctrl+D），然后将两个节点分别命名为Background1和Background2，分别选中两个节点并将其分别移动到窗口y轴的两侧，组成游戏的背景。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-14.png" alt=""></p><p>将当前场景进行保存，ctrl+S唤出保存页面，将当前场景命名为Game.tscn，项目资源目录中新建一个场景文件夹Scenes用来专门保存场景文件。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-15.png" alt=""></p><p>保存完成后，在文件系统窗口中新建的Scenes文件夹下可以找到保存的游戏场景。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-16.png" alt=""></p><p>此时可以将当前游戏场景关闭，并双击Game.tscn场景文件，可以看到场景窗口和观察窗口中又重新唤出了我们刚才创建的节点和背景图展示。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-17.png" alt=""></p><p>点击编辑器右上方三角按钮试着运行游戏（快捷键F5），由于未定义主场景，选择当前场景运行。此时游戏画面中只显示了背景的一个角。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-18.png" alt=""></p><p>因为在2D游戏中，Godot默认渲染右下角蓝色框内的元素，这就是为什么只能看到背景的一个角。需要添加一个相机节点（Camera）将背景渲染在游戏窗口正中央。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-19.png" alt=""></p><p>向场景树中添加Camera2D节点，在观察窗中发现出现了紫色边框，表示新添加的Camera节点的渲染范围。在检查器窗口中调整Camera节点的Zoom属性来调整相机的渲染范围，然后再次启动游戏场景测试。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-20.png" alt=""></p><p>当场景中的节点较多时容易误操作其他节点，可以将暂时不需要修改的节点锁定（观察窗上方的锁按钮或快捷键ctrl+shift+L），进而防止在拖动其他节点时误触这些节点。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-21.png" alt=""></p><h2 id="玩家场景"><a href="#玩家场景" class="headerlink" title="玩家场景"></a>玩家场景</h2><p>完成<strong>背景场景</strong>的创建，接下来继续添加玩家。玩家也可以通过节点的方式直接添加到背景场景中（当前的Node2D根节点下），但通常是将玩家保存为一个独立的<strong>玩家场景</strong>，再在背景场景中调用玩家场景。其原因是，依据面向对象的原则，玩家这种元素会多次出现在不同的场景中，将玩家保存为一个独立场景的好处是，当我们需要修改玩家的某项属性时（如生命值上限、基础速度等），只需在玩家场景中进行修改，其他调用玩家场景的场景就会自动对修改做出反应，而不需要我们对每个场景中的玩家元素进行修改了。</p><p>点击观察窗上方的加号创建一个新场景，在新场景中创建一个<strong>CharacterBody2D</strong>节点作为玩家场景的根节点。该节点的一些属性使其可以在2D游戏场景中模拟玩家的移动和物理碰撞，适合作为玩家节点存在。为了与其他场景进行区分，可以将该节点重命名为Player。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-22.png" alt=""></p><p>向玩家场景中添加玩家图片节点，这次添加一个<strong>Animated Sprite 2D</strong>节点（2D动画节点，相较于普通的图片节点可以使图片动起来，动画的本质是将多帧连续的图像快速播放）。选中Animated Sprite 2D节点，在检查器中找到Sprite Frames属性，选择新建SpriteFrames。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-23.png" alt=""></p><p>在下方出现的动画窗口中（如果没出现，点击一下Sprite Frames属性中刚刚新建的SpriteFrames）选择网格状按钮（快捷键ctrl+shift+O）为玩家添加动画帧。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-24.png" alt=""></p><p>找到游戏资源中的玩家图片包。在游戏中角色动画一般被存放在一种叫SpriteSheet的图片表中，图片表会保存玩家每一帧下的不同动作。调整右上角的参数将该图片表水平分为6份，垂直分为12份，来让Godot自动切割这张图片表获取每一帧的独立图片。一次选中第一行的四张图片，这四帧是玩家角色的待机动画，将其添加到节点中。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-26.png" alt=""></p><p>点击动画帧窗口中的一系列按钮预览角色动画，同时也可以对动画播放的速度（帧率）进行调整，修改动画的名称为idle（待机动画）便于之后区分，最后开启自动播放，这样在游戏一开始时玩家的角色才会自动播放待机动画。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-27.png" alt=""></p><p>完成以上操作后保存玩家场景（Player.tscn），然后回到主场景（背景场景Game.tscn）中，将玩家场景添加进背景场景。点击场景窗口左上角的链接按钮，将玩家场景实例化为背景场景中的一个子节点。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-28.png" alt=""></p><p>现在玩家已经作为一个子节点添加到了游戏场景中，按下F5启动游戏查看效果，可以看到玩家的待机动画已经可以正常播放了（如果玩家没有动可能是在添加动画帧时没有开启自动播放）。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/godot-first-game-01/godot-29.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Godot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2D游戏 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宫殿记忆法</title>
      <link href="/2025/03/06/memory-palace/"/>
      <url>/2025/03/06/memory-palace/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="宫殿记忆法"><a href="#宫殿记忆法" class="headerlink" title="宫殿记忆法"></a>宫殿记忆法</h1><p><strong>”到最后你们只会记得我曾经被狗咬过。“</strong></p><p>这句话来自多年前的一场讲座，演讲者准确预言了未来：时至今日我的确回想不起演讲的细节了（可能在听完演讲的第二天就一股脑全忘掉了），但却总能记起有这么一位被狗咬了的演讲者。</p><p>演讲者是一位英语教培行业的讲师，分享了一段托福考试前被狗咬了的经历。相比于英文单词记忆法之类的枯燥内容，在座的学生们显然对这段有趣的经历更感兴趣，因此便有了以上那句玩笑话。神奇的是，作为演讲主体内容的英语学习方法没有给我留下一丝印象，反而是这句玩笑话被我记了很多年，而这场演讲，也因为这句玩笑话的关系，一直留在了我的记忆中。</p><p>作为本文的读者，你也可以尝试一下，当一个星期、一个月乃至一年之后，你能否回忆起来读过本篇文章呢？如果让你回想起本篇文章的内容，你会想起些什么呢？本文将要讨论的记忆方法与“被狗咬了”这个案例哪个给你留下的印象更多呢？</p><p>在这个关于“狗”的例子中，我认为有两个有趣的点：</p><ul><li>个性化的内容更容易被长时间记忆</li><li>记忆之间能够相互提示</li></ul><p>首先，一些个性化的、新奇的体验或者经历更容易给我们留下深刻的印象。比如一个人第一次失恋的经历可能会使他铭记终生，那当他失恋第一百次呢？如果此时叫他分别回忆第1个和第91个恋爱对象的姓名呢？在这个”狗“的例子中，不同于大多数枯燥乏味的说教（每个学生千万遍的经历），听讲台上的人讲述被狗咬的经历是新奇的，这种个性化、差异化的内容更容易给人留下深刻的印象，如同下满白棋的棋盘上突然落下一枚黑子，那么人们的注意力就会被黑旗吸引，而没有人会关注棋盘上的某颗白棋。</p><p>另外，不同的记忆之间能够相互提示，我们可以利用一个记忆对另一段记忆进行提示。比如一个人在多年之后回忆起与初恋对象在一家火锅店初识的场景，这段两人相见的回忆便提示出了关于火锅店细节的记忆：店名、食材、环境氛围等，相比对于其他火锅店的记忆，这家特殊意义的火锅店一定具有更加丰富的细节。同样是在“狗”的例子中，如果不是演讲者最后这段关于“狗”的论述，那么我也许就不会联想记忆起这位风趣的演讲者，更不会记得这是一场关于英语的演讲了。你也许会觉得这些联想驴唇不对马嘴，我通过“狗”想到了“演讲”，这又有什么意义呢？然而我们今天要讨论的记忆法正是需要读者具有天马行空的想象力。</p><h2 id="什么是宫殿记忆法"><a href="#什么是宫殿记忆法" class="headerlink" title="什么是宫殿记忆法"></a>什么是宫殿记忆法</h2><p>在《神探夏洛克》中，福尔摩斯闭上眼睛进入他的记忆宫殿中，只见他从想像的书架中抽出了一本书，翻看了几眼便得到了自已想要的内容。在《生活大爆炸》中，谢尔顿具有图形化记忆，可以过目不忘，大概也是类似记忆宫殿的方法。那么什么是图形记忆？我们真的可以想象出来一个图书馆，然后把想要记下的东西写在想像出来的书上吗？</p><p>也许有些人通过特殊的方法以及大量的记忆练习真的可以达到影视里这种艺术化的效果，但宫殿记忆法的基本原理，基于我们从“狗”的案例中总结出来的两个点：<strong>记忆点</strong>以及<strong>联系</strong>。</p><p><strong>记忆点</strong>，就是我们脑海中的长期记忆。我们需要用这些长期记忆搭建我们的记忆宫殿，但毕竟我们脑海中印象深刻的事你一时之间可能就能想到那么一两件，缺少建材怎么办？没关系，我们可以主动创造这些长期记忆。</p><p>如果说我们的记忆宫殿是一座图书馆，记忆点是构成图书馆的一本本书，那么<strong>联系</strong>就是一本书的密码表，需要通过这个密码表才能从书中解码出保存的信息。</p><p>所以简单来说，所谓宫殿记忆法，就是用我们刻意强化的一些记忆，来提示另一些我们想要记住的信息。比如非常难记的密码、某人的生日等。一旦联系建立起来，你可以长时间的且稳定地保存某些你想记住的特定信息。在《金字塔原理》中，有一段关于<a href="https://moonglowshadow.com/2024/09/18/pyramid-theory/">“联想”</a>的讨论，可能会使你对上述原理的理解更加深刻。仍然觉得有点抽象？没关系，请继续参阅以下宫殿搭建指南和使用说明书。</p><h2 id="宫殿搭建指南"><a href="#宫殿搭建指南" class="headerlink" title="宫殿搭建指南"></a>宫殿搭建指南</h2><p>记忆点就是搭建记忆宫殿的砖瓦。</p><p>首先让我们建立起一段线性记忆点，你可以选择上学、上班要走的一条路，从出门开始，不断选择参照物，建立记忆点，比如：</p><ul><li>出门首先看到邻居家贴的<strong>对联</strong></li><li>接着过马路必须经过的<strong>红绿灯</strong></li><li>路过的<strong>公交车站</strong></li><li>路过的<strong>早餐店</strong></li><li>……</li><li>最终到达<strong>学校的大门</strong></li></ul><p>由于我们对这条路非常熟悉，相信记住这些记忆点并不困难，而且这些记忆点之间的先后关系也很容易确定，比如<strong>学校大门</strong>是最后一个记忆点，<strong>文具店</strong>在校门边所以是选择的倒数第二个记忆点，<strong>理发店</strong>排在<strong>早餐店</strong>之后，因为早餐店就在家不远处。</p><p>建立完记忆点之后，不妨在脑海里回忆几遍，看是否能够完整走完这条路，回忆这条路上的参照物有没有困难。当你觉得可以轻松记起这条路上的任意一个记忆点时，你就像福尔摩斯一样也搭建好了属于自己的记忆宫殿。</p><p>为了直观演示记忆宫殿的搭建过程，我们可以借助《疯狂动物城》中朱迪警官的第一次进城的经历一起搭建一个线性记忆宫殿。首先可以通过以下片段链接或者电影原片先体验一下这段新奇的旅程，获得一个初始的印象。</p><p><a href="https://www.bilibili.com/video/BV1hz4y1D7JP/?spm_id_from=333.337.search-card.all.click&amp;vd_source=c5d32b76b7f25615fe49ce8530034071">《疯狂动物城》片段</a></p><p>尽管朱迪警官的记忆并不属于我们，但好在《疯狂动物城》的这个片段想象力足够丰富也足够有趣，我们借助朱迪警官的视角，一路下来也能找到不少的记忆点。</p><p>记忆点1：<strong>MP4</strong></p><p>第一个镜头，朱迪警官拿出了播放器播放了《Try Everything》，旅途即将展开。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point01.png" alt=""></p><p>记忆点2：<strong>奔驰的列车</strong></p><p>朱迪坐着列车，在绿色的原野上驶向未知的动物城。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point02.png" alt=""></p><p>记忆点3：<strong>动物城</strong></p><p>初见高楼林立的动物城全貌。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point03.png" alt=""></p><p>记忆点4：<strong>沙漠区的棕榈树</strong></p><p>列车首先驶向动物城外围的沙漠区，映入眼帘的是沙漠区中巨大的棕榈树标志。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point04.png" alt=""></p><p>记忆点5：<strong>边境长城</strong></p><p>即将离开沙漠区，驶向隔离沙漠区和冰原区的巨大城墙。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point05.png" alt=""></p><p>记忆点6：<strong>冰原中的湖泊</strong></p><p>冰原区我没有找到特别满意的参照物，就选湖泊这个场景好了，算是比较特色的极地场景。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point06.png" alt=""></p><p>记忆点7：<strong>冰山隧道</strong></p><p>穿过冰山，离开冰原区，即将到达下一场景。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point07.png" alt=""></p><p>记忆点8：<strong>蘑菇树屋</strong></p><p>进入雨林区，首先观察到该区域蘑菇形状树屋的建筑特色。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point08.png" alt=""></p><p>记忆点9：<strong>洒水喷头</strong></p><p>车窗外在下雨，朱迪向上看去，竟然是喷头在洒水。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point09.png" alt=""></p><p>记忆点10：<strong>飞艇</strong></p><p>明明只要从上面飞过去就好了，却要把桥立起来，飞艇也是船是吧ヽ(ー_ー)ノ。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point10.png" alt=""></p><p>记忆点11：<strong>羚羊角车站</strong></p><p>具有巨大羚羊角标志的车站，演唱《Try Everything》的歌手夏奇羊是一只瞪羚，车站上的这种角应该是旋角羚。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point11.png" alt=""></p><p>记忆点12：<strong>从下水道钻出来的河马</strong></p><p>这公文包早就被水泡透了吧。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point12.png" alt=""></p><p>记忆点13：<strong>仓鼠电梯（or滑梯？）</strong></p><p>只能下不能上的电梯吗？</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point13.png" alt=""></p><p>记忆点14：<strong>果汁吧</strong></p><p>水獭店员将果汁递给长颈鹿（能向上的电梯这不就来了）。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point14.png" alt=""></p><p>记忆点15：<strong>朱迪</strong></p><p>最后一个记忆点就给朱迪警官好了，这样我们就凑够了15个记忆点。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/point15.png" alt=""></p><p>好，这样一个简单的具有15个记忆点的记忆宫殿就算搭建完了，让我们试着回顾一下，看看能否按顺序回想起所有的记忆点。</p><p>现在让我们进入回忆：</p><p>首先朱迪打开<strong>MP4</strong>开始播放背景音乐——然后镜头拉远，<strong>列车</strong>飞驰在原野上——远远望见<strong>动物城</strong>——动物城的外围是沙漠区，高大的<strong>棕榈树</strong>建筑非常引人注目——列车通过分割区域的<strong>边境长城</strong>前往下一区域——列车驶入冰原区，有着大片深蓝色的<strong>湖泊</strong>——列车穿过<strong>雪山隧道</strong>来到雨林区——进入雨林区一眼就能看到建在树上的<strong>蘑菇树屋</strong>——雨林区常年下雨，原来是<strong>洒水喷头</strong>在人工降雨——接下来我们将见证动物城独特的立体交通，<strong>空艇</strong>也是艇——结束了雨林区的游览，列车驶向终点站，具有巨大<strong>羚羊角标志的车站</strong>——下了车，在车站中也能见到不少有趣的事物，朱迪坐扶梯上楼，从旁边的下水道里钻出来了一只<strong>河马</strong>（是因为河马太胖了坐不了电梯所以游上来的吗？）——刚看完庞然大物，下一秒我们就看到穿着西装的<strong>仓鼠坐滑梯</strong>下楼（你要怎么回去呢？）——然后视角来到了一旁的<strong>果汁吧</strong>，水獭店员将果汁通过果汁电梯送给长颈鹿顾客（这个电梯给仓鼠也能用）——最后结束了本次旅途，视角给回了主角<strong>朱迪</strong>。</p><p>并不困难对吧。凭借图形化记忆、故事剧情的推动以及场景之间的联系，记住这15个记忆点应该比单纯地记18位身份证号容易多了，而且这种图形记忆能够保存更长的时间。</p><p>无论你的记忆宫殿是通过哪种方式搭建的（现实生活中的参照物、游戏电影中的场景、天马行空的想像），我们最终的目的是搭建起一段牢固的长期记忆，通过生活中反复出现的场景、新奇的事物、相关的联想，在较长的时间内维持我们的记忆宫殿并不困难。而且随着后续对记忆宫殿的使用，我们的记忆点将不断被强化，宫殿也会越来越牢靠。</p><p>读者可以在搭建完记忆宫殿之后先将注意力放在其他地方，过一段时间后再试着回想所搭建的记忆宫殿，如果能比较轻松地回忆起所有的记忆点，那么恭喜你已经掌握了记忆宫殿的搭建方式，在下文中将介绍如何对我们辛苦搭建起来的记忆宫殿进行使用。</p><h2 id="使用说明书"><a href="#使用说明书" class="headerlink" title="使用说明书"></a>使用说明书</h2><p>在上一步中，我们使用记忆点搭建了记忆宫殿，现在我们要通过<strong>联系</strong>，将记忆宫殿利用起来。</p><p>设想这样一个场景，你马上要出门买菜，准备买些<strong>鸡蛋</strong>、<strong>土豆</strong>、<strong>胡萝卜</strong>做晚饭，这时妈妈跟你说回来给妹妹带箱<strong>酸奶</strong>，再买点<strong>苹果</strong>和<strong>橘子</strong>，爸爸跟你说家里的<strong>咸鸭蛋</strong>和<strong>牛奶</strong>也不够了，也买点吧。你刚出门了，就听见妹妹大喊“我想吃<strong>葡萄</strong>”。最终你终于到达了超市，此时你还记得几样要买的东西呢？</p><blockquote><p>鸡蛋、土豆、胡萝卜、酸奶、苹果、橘子、咸鸭蛋、牛奶、葡萄</p></blockquote><p>《金字塔原理》这本书中提到了一种归类的方法，即将以上物品归类，在记忆时先记<strong>大类</strong>再用大类提示所属该类的物品。</p><ul><li>蛋奶<ul><li>鸡蛋</li><li>酸奶</li><li>咸鸭蛋</li><li>牛奶</li></ul></li><li>水果<ul><li>苹果</li><li>橘子</li><li>葡萄</li></ul></li><li>蔬菜<ul><li>土豆</li><li>胡萝卜</li></ul></li></ul><p>在以上例子中，我们首先记忆要买<strong>蛋奶</strong>、<strong>水果</strong>、<strong>蔬菜</strong>三类物品，再用大类向下提示，比如<strong>水果</strong>可以提示出妈妈要买的苹果、橘子和妹妹要吃的葡萄。这种记忆方法固然能够降低记忆的压力，但当要记住的物体越来越多时，归类的种类也会变多，记忆也会越来越困难。而且由于我们是临时做出的分类，有时我们可能会直接忘记某一大类。</p><p>宫殿记忆法中同样用到了<strong>提示</strong>的概念，或者说是<strong>联系</strong>。通过选取某条路上参照物的形式，我们已经建立起了图形化的长期记忆，即上文例子中包含15个记忆点的记忆宫殿，读者们现在还能回忆起自己建立的记忆宫殿吗？如果可以的话，接下来，我们将在记忆点和购物清单上的物品建立<strong>联系</strong>。</p><p>这一步就要考验读者天马行空的想象力了，越是离奇的联想反而能留下深刻的印象。我们需要借助我们的想象，融合宫殿中的记忆点与购物清单上的物品。</p><ul><li><p><strong>记忆点1：MP4</strong></p><ul><li><p>如何在MP4和鸡蛋之间建立联系呢？</p></li><li><p>抽象的联系，比如MP4上在播放《鸡你太美》（只因你太美）。（开个玩笑，只要通过你的联想能把MP4这个场景和鸡蛋建立起联系就好。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/memory01.png" alt=""></p></li><li><p>或者说想象一下朱迪手里拿着一个鸡蛋，蛋壳裂开出现了朱迪的MP4。（大概是这样吧）</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/memory02.png" alt=""></p></li></ul></li><li><p><strong>记忆点2：原野上的列车</strong></p><ul><li><p>我们按照顺序来，接下来是土豆。我们给朱迪所乘坐的列车降个配置，变成装满土豆的火车。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/memory03.png" alt=""></p></li></ul></li><li><p><strong>记忆点3：从远处望见的动物城</strong></p><ul><li><p>这次轮到胡萝卜了，想象动物城是一座由胡萝卜组成的城市。（朱迪狂喜！）</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/memory04.png" alt=""></p></li></ul></li><li><p><strong>记忆点4：初到沙漠区见到的棕榈树建筑</strong></p><ul><li><p>这次是酸奶，我们可以想象一盒酸奶里长出了一颗棕榈树。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/memory05.png" alt=""></p></li></ul></li><li><p><strong>记忆点5：沙漠区与冰原区之间巨大的城墙</strong></p><ul><li><p>苹果和城墙能有什么关系呢？偷个懒，直接把他们放在一起算了，一个巨大的苹果砸在了城墙上。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/memory06.png" alt=""></p></li></ul></li><li><p><strong>记忆点6：冰原区的巨大湖泊</strong></p><ul><li><p>湖泊和橘子，我们就想象一个由果粒橙填满的湖泊吧。（这图画的怪怪的。）</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/memory07.png" alt=""></p></li></ul></li><li><p><strong>记忆点7：穿过冰山的隧道</strong></p><ul><li><p>冰山隧道和咸鸭蛋，把冰山换成大大的鸭蛋，乘坐的列车冲入蛋中。（这画面跟我想的不太一样，不过也行吧。）</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/memory08.png" alt=""></p></li></ul></li><li><p><strong>记忆点8：到雨林区了，蘑菇树屋</strong></p><ul><li><p>按顺序来说应该轮到牛奶了，但是我选择葡萄，树上挂着一串葡萄，原来每粒葡萄都是一个房屋。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/memory-palace/memory09.png" alt=""></p></li></ul></li><li><p><strong>记忆点9：洒水喷头</strong></p><ul><li>这个就简单了，喷头里喷出的不是水，而是牛奶，这个就不配图了。（据说拍摄《雨中曲》的时候，为了增强人造雨的视觉效果，就在喷洒的雨水里掺了牛奶。）</li></ul></li></ul><p>好，这样我们就建立了记忆点和购物清单上物品的联系，其实联想的时候不需要太复杂，比如巨大的苹果放在城墙上，只要有一个画面就足够了。</p><p>现在我们到了超市，想想我们要买什么来着？</p><ul><li>MP4=&gt;蛋壳里的MP4：鸡蛋</li><li>列车=&gt;装满土豆的火车：土豆</li><li>动物城=&gt;动物城的高楼大厦都变成了胡萝卜：胡萝卜</li><li>棕榈树=&gt;棕榈树长在一个酸奶盒里：酸奶</li><li>城墙=&gt;一个大大的苹果砸在城墙上：苹果</li><li>冰原里的湖泊=&gt;装满果粒橙的大湖：橘子</li><li>雪山隧道=&gt;本来要穿过的雪山隧道变成了一个大大的鸭蛋：鸭蛋</li><li>蘑菇树屋=&gt;雨林区的蘑菇树屋变成了葡萄树屋：葡萄</li><li>洒水喷头=&gt;花洒喷出来牛奶：牛奶</li></ul><p>怎么样？看似复杂繁琐，但只要我们回想起了记忆点，就会很自然的联想起与它绑定的购物清单上的商品。我们不需要靠考虑商品见的归纳分类，也不用死记硬背这9中商品，只要简单的将商品的画面与记忆点联系起来，就好比福尔摩斯在记忆宫殿的一本书上写下了一串信息，哪怕后面忘记了这条信息，也能翻书找出来，当我们到达超市早已经把购物清单忘得一干二净时，只要简单的调动一下记忆点，就能发现我们当初记录下的那串信息。湖泊里装满了果粒橙，那么这个记忆点绑定的记忆就是橘子；列车上装满了土豆，那么土豆就是要买的商品之一。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>其实到了这里你就可以凭借想象自由地尝试宫殿记忆法了。</p><ul><li>你可以将这条路上的记忆点拓展到100个。这时候你就可以跟小伙伴们打赌，背到圆周率小数点后100位，震惊所有人。将数字与记忆点建立联系也不复杂，相似的形状啊、谐音啊都可以成为你联想的法宝。</li><li>你可以为宝贵的记忆搭建专属记忆点。只有一条线性的记忆宫殿的话，联系很容易被反复覆盖，比如我今天用15个记忆点记住购物清单，明天又用这15个记忆点背电话号码。对于某些宝贵的记忆，比如父母的生日，你可以花点时间在记忆宫殿中搭建一个主题公园、纪念雕像之类的，只用来绑定相关信息。</li></ul><p>当前15个记忆点的记忆宫殿看似简陋，但随着不断使用和不断对其添砖加瓦，宫殿的规模也将不断壮大。即使不是为了强化记忆、锻炼思维，单单是搭建这么一片独属于自己的思想的天地想必也是挺有成就感的吧。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火星生存指南--火星救援</title>
      <link href="/2024/11/27/mars-survival-guide/"/>
      <url>/2024/11/27/mars-survival-guide/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="火星生存指南—火星救援"><a href="#火星生存指南—火星救援" class="headerlink" title="火星生存指南—火星救援"></a>火星生存指南—火星救援</h1><p><a href="https://www.bilibili.com/bangumi/play/ss46262?theme=movie&amp;spm_id_from=333.337.0.0">电影链接</a></p>        <div id="aplayer-oYhKtaNf" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-oYhKtaNf"),            narrow: false,            autoplay: false,            showlrc: 3,            music: {              title: "Starman",              author: "David Bowie",              url: "https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/music/DavidBowie-Starman/DavidBowie-Starman.mp3",              pic: "https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/music/DavidBowie-Starman/DavidBowie-Starman.png",              lrc: "https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/music/DavidBowie-Starman/DavidBowie-Starman.lrc"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>Welcome to the Astronaut Candidate Program.</p><p>欢迎你们加入预备航天员项目</p><p>Now pay attention, because this could save your life.</p><p>接下来注意听好 因为我说的东西能救你们的命</p><p>Trust me, I know what I’m talking about.</p><p>相信我 我可是深有体会</p><p>All right, let me get a few things out of the way, right off the bat.</p><p>好 我先把几件事说清楚</p><p>Yes, I did in fact survive on a deserted planet by farming in my own shit.</p><p>没错 我确实是靠用自己的粪便耕种 才在一个荒芜的星球上活了下来</p><p>Yes, it’s actually worse than it sounds. So let’s not talk about that ever again.</p><p>没错 实际情况比听起来更糟糕 所以以后再也别提这茬了</p><p> The other question I get most frequently is…</p><p>另一个我经常被问到的问题是</p><p>“When I was up there, stranded by myself…”</p><p>当我独自一人被滞留在那里</p><p>“did I think I was going to die?”</p><p>有没有想过自己会死？</p><p>Yes, absolutely.</p><p>是的 当然想过</p><p>And that’s what you need to know going in because it’s going to happen to you.</p><p>这也是你们成为宇航员需要明白的 因为你们也会遇到</p><p>This is space. It does not cooperate.</p><p>这是太空 它不会对你手下留情</p><p>At some point, everything is going to go south on you.</p><p>某些时刻 你甚至会处处碰壁</p><p>Everything is going to go south and you’re going to say, “This is it.”</p><p>处处碰壁时你就会想 “完了</p><p>This is how I end.</p><p>我就要这么死了“</p><p>Now, you can either accept that…</p><p>你要么听天由命</p><p>or you can get to work.</p><p>要么背水一战</p><p>That’s all it is.</p><p>就是这么回事</p><p>You just begin.</p><p>你就行动起来</p><p>You do the math. You solve one problem…</p><p>开始计算 先解决一个问题</p><p>then you solve the next one.</p><p>再解决下一个问题</p><p>And then the next.</p><p>然后继续下一个</p><p>And if you solve enough problems, you get to come home.</p><p>等你解决掉足够多的问题 就能回家了</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 演讲 </tag>
            
            <tag> 电影 </tag>
            
            <tag> 火星救援 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器上模型训练的常用命令</title>
      <link href="/2024/11/19/commands-used-4-training/"/>
      <url>/2024/11/19/commands-used-4-training/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="服务器上模型训练的常用命令"><a href="#服务器上模型训练的常用命令" class="headerlink" title="服务器上模型训练的常用命令"></a>服务器上模型训练的常用命令</h1><p>深度学习训练过程中，模型越大，参数越多，占用的显存越大（如VGG16参数量约138M，训练显存需求10-12G；Transformer在BERT-base中参数量约110M，训练显存需求12-16G；Stable Diffusion V2.0参数量约890M，训练显存需求16-24G。显存占用因具体输入大小、实现细节和优化手段而异）。</p><p>通常个人设备的显存难以满足训练模型的要求，需要将训练代码上传到配有更好显卡（常用GPU如RTX4090-24G，V100-16/32G，A100-40/80G。不同显卡除显存之外，还存在着架构、计算性能、内存带宽等方面的区别，适用于不同的任务场景）的服务器上进行模型的训练工作。</p><h2 id="远程连接服务器"><a href="#远程连接服务器" class="headerlink" title="远程连接服务器"></a><strong>远程连接服务器</strong></h2><p>无论是连接自己的服务器资源还是连接云服务平台（如<a href="https://www.aliyun.com/">阿里云</a>、<a href="https://cloud.tencent.com/">腾讯云</a>、<a href="https://gpushare.com/">恒源云</a>等）租赁的服务器，都可以使用<a href="https://mobaxterm.mobatek.net/">MobaXterm</a>、<a href="https://www.xshell.com/zh/xshell/">Xshell</a>或是Windows远程桌面连接等远程终端控制工具，通过配置以下参数进行远程连接：</p><ul><li>主机地址：IP地址如（10.16.0.41）或域名如（gpuplatform.com）</li><li>端口号：如（30841；2333等）</li><li>用户名：如（root；superman；spiderman等）</li><li>密码：如（122333；rHesBZNZz4dhd7hS8MzMUc4E3twRXTkw等）</li></ul><p>以恒源云、MobaXterm为例：</p><p>在恒源云平台注册账号，进入控制台，在实例与数据—我的实例页面点击创建实例，选择需要租用的显卡类型并创建实例。</p><p>通常云服务平台在创建实例时会提供操作系统选择以及框架的预装，如选择使用Linux系统、V100-16G显卡、Pytorch2.0.0框架、Cuda11.8.0、Python3.8。</p><p>完成创建之后即可在控制台—实例与数据—我的实例页面获取到实例信息以及远程连接参数。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-1.png" alt=""></p><p>复制登录指令和密码即可获取以下内容：</p><blockquote><p>ssh -p 37587 root@i-2.gpushare.com</p><p>rHesBZNZz4dhd7hS8MzMUc4E3twRXTkw</p></blockquote><p>从中可以提取出<strong>主机地址</strong>（i-2.gpushare.com）、<strong>端口号</strong>（37587）、<strong>用户名</strong>（root）、<strong>密码</strong>（rHesBZNZz4dhd7hS8MzMUc4E3twRXTkw），打开MobaXterm，点击左上角Session，在以下窗口输入对应的参数。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-2.png" alt=""></p><p>点击OK，连接过程提示需要输入密码，复制实例的登录密码，在命令行处右键粘贴密码并回车确定（在命令行处点击右键就是直接粘贴，粘贴完后命令行处的密码不会显示，直接回车即可）。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-3.png" alt=""></p><p>顺利连接到刚刚租赁的服务器。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-4.png" alt=""></p><h2 id="Linux常见命令"><a href="#Linux常见命令" class="headerlink" title="Linux常见命令"></a>Linux常见命令</h2><p>首先熟悉一下Linux系统下的一些基础常见命令：</p><ul><li><code>ls</code> : 显示当前目录的内容</li><li><code>pwd</code> : 显示当前目录的路径</li><li><code>cd</code> : 改变目录<ul><li><code>cd 想进入的目录</code> : 进入想进入的目录，目录有以下几种写法：<ul><li><code>/</code> : 根目录，如 <code>cd /</code> 表示返回到根目录</li><li><code>.</code> : 当前目录，如 <code>cd ./a</code> 表示进入当前目录下的 a 目录中，也可以直接简写成 <code>cd a</code></li><li><code>..</code> : 上级目录，如 <code>cd ..</code> 表示返回上一级目录，<code>cd ../b</code> 表示返回上一级目录并进入上一级目录中的 b 目录中</li><li><code>~</code> : 默认工作目录，可自定义，通常表示 /home/用户名</li></ul></li></ul></li><li><code>touch</code> :  创建新文件或修改现有文件的时间戳<ul><li><code>touch [选项] 文件名</code> : 用于创建普通文件，如果文件存在则表示修改当前文件时间（访问时间和修改时间），选项可有以下参数(部分)：<ul><li><code>-a</code> : 只更改访问时间</li><li><code>-c</code> , <code>--no-create</code> : 不创建任何文件</li><li><code>-d</code> , <code>--date=字符串</code> : 使用指定字符串表示时间而非当前时间</li><li><code>-m</code> : 只更改修改时间</li><li><code>-r</code> , <code>--reference=文件</code> : 使用指定文件的时间属性而非当前时间</li></ul></li></ul></li><li><code>mkdir</code> : 创建新目录<ul><li><code>mkdir [选项] 目录名</code> : 用于创建新的目录，如果指定的目录已存在，将会返回一个错误信息，选项可有以下参数（部分）：<ul><li><code>-m</code> , <code>--mode=MODE</code> : 设置新建目录的权限，类似于 <code>chmod</code>，如 <code>mkdir -m 700 testfold</code></li><li><code>-p</code> , <code>--parents</code> ：递归创建目录，必要时自动创建父目录。如果指定的目录已存在，不会报错，如<code>mkdir -p /root/test1/test2/test3</code> ，如果 test1 和 test2 不存在，该命令会自动创建这些目录</li><li><code>-v</code> , <code>--verbose</code>：显示命令执行过程中的详细信息，即显示每个创建的目录</li></ul></li></ul></li><li><code>cat</code> : 查看文件内容<ul><li><code>cat [选项] 文件</code> : 用于查看文件的内容或将多个文件合并输出，选项可有以下参数（部分）：<ul><li><code>-b</code> , <code>--number-nonblank</code> : 显示非空行的行号</li><li><code>-n</code> , <code>--number</code> : 显示每一行的行号</li><li><code>-s</code> , <code>--squeeze-blank</code> : 多个空行连续出现时，压缩成一行空行</li><li><code>-v</code> , <code>--show-nonprinting</code> : 显示非打印字符</li><li><code>-E</code> : 在每一行的末尾添加 $ 符号</li></ul></li></ul></li><li><code>cp</code> : 复制文件或目录<ul><li><code>cp [选项] 源文件或目录 目标文件或目录</code> : 基本使用方法，选项可有以下参数（部分）：<ul><li><code>-b</code> , <code>--backup=CONTROL</code> : 创建备份文件，若目标文件已经存在，添加一个备份拓展名；备份文件的类型由选项 CONTROL 指定，默认为none</li><li><code>-i</code> , <code>--interactive</code> : 交互模式，复制文件或目录前先询问是否覆盖</li><li><code>-n</code> , <code>--no-clobber</code> : 不覆盖已经存在的文件，不进行复制操作</li><li><code>-p</code> , <code>--preserve</code> : 保留文件属性，包括所有权、访问时间、修改时间和权限</li><li><code>-r</code> , <code>--recursive</code> : 递归复制整个目录及子目录；若要拷贝目录下所有内容，必须使用此选项</li><li><code>-u</code> , <code>--update</code> : 如果目标文件比源文件旧，或者目标文件不存在，就会被覆盖掉</li></ul></li><li><code>cp 源文件 目标目录</code> : 复制单个文件</li><li><code>cp 源文件 目标目录/新文件名</code> : 复制单个文件的同时重命名它</li><li><code>cp 文件1 文件2 文件3 目标目录</code> : 复制多个文件</li><li><code>cp -r 源目录 目标目录</code> : 复制单个目录</li><li><code>cp -r 目录1 目录2 目录3 目标目录</code> : 复制多个目录</li></ul></li><li><code>mv</code> : 移动或重命名文件或目录<ul><li><code>mv [选项] 源文件或目录 目标文件或目录</code> : 使用方法和参数与 <code>cp</code> 命令非常类似，可类比 <code>cp</code> 使用。<code>mv</code> 命令可以改变文件在文件系统中的位置或名称。区别于 <code>cp</code> 指令，<code>cp</code> 后的文件个数是增加的，所以会额外占用与原文件相同大小的磁盘空间，<code>mv</code> 则不会。在同一个目录内对文件进行移动的操作，实际上可以理解为重命名操作。</li></ul></li><li><code>rm</code> : 删除文件或目录<ul><li><code>rm [选项] 文件或目录</code> : 删除文件或目录，选项可有以下参数（部分）：<ul><li><code>-f</code> : 直接删除，不需要确认</li><li><code>-r</code> : 递归删除（用来删除目录）</li><li><code>-i</code> : 交互模式，删除前逐一询问</li><li><code>-v</code> : 显示步骤</li><li><code>-d</code> : 只删除空目录</li></ul></li></ul></li><li><code>clear</code> : 清空当前终端屏幕上的内容</li></ul><h2 id="上传文件并配置环境"><a href="#上传文件并配置环境" class="headerlink" title="上传文件并配置环境"></a>上传文件并配置环境</h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>可以使用专用的文件传输软件如<a href="https://www.xshell.com/zh/xftp/">Xftp</a>连接服务器并上传文件（与上述远程连接服务器过程类似），或者直接在MobaXterm中打开对应文件夹右键选择 <code>upload to current folder</code> 进行文件上传。</p><p>如果文件较大（如数据集等），为了提高传输效率可以在上传文件之前先将其压缩成zip文件，上传成功后，使用 <code>cd</code> 命令切换到上传目录，在该目录下使用 <code>unzip</code> 命令进行文件解压缩。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip 数据集.zip</span><br></pre></td></tr></table></figure><p>注意：unzip解压zip文件最大不能超过4GB，这是因为unzip的缓存位数最大为2的是32次，刚好就是4GB。</p><p>当压缩文件超过4GB时，建议使用tar压缩文件再用<code>tar -xvf 数据集.tar</code> 解压；或者安装7zip，使用 <code>7z x 数据集.zip</code> 进行解压。</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>成功上传代码以及数据集之后，在开始模型的训练之前需要配置好代码运行所需要的环境。</p><p>在创建服务器实例时，已经预装好了python环境以及Pytorch框架，现在使用环境管理器Conda查看一下现有的环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list  <span class="comment"># 列出所有环境</span></span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-5.png" alt=""></p><p>可以看到目前只有base一个环境，而我们正处在base环境下。如果你的命令行左侧没有显示（base）的话，使用 <code>conda activate base</code> 来激活base环境，之后再查看左侧是否出现 （base）。</p><p>然后查看当前环境下都装了哪些python包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list  <span class="comment"># 列出已安装的 Python 包以及它们的版本号</span></span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-6.png" alt=""></p><p>除了常用的包外，可以看到base环境中也已经预装好了我们在创建服务器实例时选择预装的Pytorch2.0.0。</p><p>然而除了预装的包外，我们在编写代码的过程中引入的许多外部包并不在当前环境内。我们可以选择一个一个定位缺少了哪个包，并使用 <code>pip install 包名</code> 的方式在当前环境中下载这个包，当然还有一种更高效的方式，即通过配置文件快速配置环境。</p><p>我们在本地（非服务器端）激活代码可以运行的环境 <code>conda activate base</code> ，通过以下命令生成该环境的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; ./requirements.txt  <span class="comment"># 在当前目录下生成 requirements.txt 配置文件</span></span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-7.png" alt=""></p><p>该命令会在当前目录下生成base环境的配置文件requirements.txt，其中包含了这个环境下的所有包以及其对应版本信息。将配置文件requirements.txt上传到服务器端，在服务器命令行中切换到配置文件所在的目录，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r ./requirements.txt  <span class="comment"># 根据配置文件配置环境</span></span><br></pre></td></tr></table></figure><p>该命令会下载服务器环境中相较于配置文件中缺失的包，当安装完成后服务器端就有了跟本地环境中相同的包。</p><p>通过生成环境配置文件的方式，不仅能快速配置环境，在单人应用场景下也可以用来保存实验所处的包环境，有利于他人对实验结果的复现。</p><h4 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h4><p>我们使用的很多包都是第三方的，需要访问国外的资源，国内访问国外资源时速度很慢且可能访问不到，所以需要换源，从国外的资源换为国内的镜像资源从而获取更快的下载速度。</p><p>pip换源有以下几种方法：</p><ul><li><p>修改配置文件（长期有效）：</p><ul><li><p>配置文件的位置</p><ul><li>Windows：<code>%APPDATA%\pip\pip.ini</code></li><li>Linux：<code>~/.pip/pip.conf</code></li></ul></li><li><p>在配置文件中添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用命令行参数（临时有效）：</p><ul><li><p>在 <code>pip</code> 命令中使用 <code>-i</code> 指定源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ 包名</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改环境变量（临时有效）：</p><ul><li><p>设置环境变量 <code>PIP_INDEX_URL</code> 来指定源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">pip install some-package</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>国内常用的源包括：</p><ul><li>阿里云：<a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></li><li>中国科技大学：<a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></li><li>清华大学：<a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li></ul><h3 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h3><p>当多人共用一台服务器时，为了避免不同人共用同一个环境时安装的包彼此冲突、或是配置好的环境被其他人破坏，建议每个人都创建一个虚拟环境，将彼此的环境隔离开。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list  <span class="comment"># 查看当前所有的环境</span></span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-8.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n <span class="built_in">test</span> python=3.8  <span class="comment"># 创建一个名为test的虚拟环境，其中python的版本是3.8</span></span><br></pre></td></tr></table></figure><p>通过以上代码，我们在conda中新建了一个名为test的虚拟环境，使用 <code>conda env list</code> 查看发现test环境创建成功，使用 <code>conda activate test</code> 将环境从base切换到test。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-9.png" alt=""></p><p>使用 <code>pip list</code> 查看当前环境下的包，发现base环境下的很多预装包在test环境下都不见了，说明了base和test两个环境之间相互独立。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-10.png" alt=""></p><p>当多人共用一台服务器时就可以通过以上方式将不同人的环境隔离开，从而避免产生冲突。</p><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><p>完成代码和数据集的上传以及环境的配置之后，开始模型的训练流程。</p><p>假设我们通过 <code>python main.py</code> 运行程序，程序正常启动，并将输出信息打印在终端。然而这种方法的问题是在训练过程中要保持终端始终开启，如果关闭终端那么程序也会中止。</p><p><code>nohup</code> 的作用是让程序在后台运行，并将日志输出到指定的文件中，从而解决以上问题，使程序在终端关闭后仍会在服务器后台继续运行，并将程序运行过程中的输出信息保存在一个指定文件中。</p><p><code>nohup</code> 的语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> 命令 [可选参数]</span><br></pre></td></tr></table></figure><p>示例：</p><ul><li><p>后台运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> python main.py &amp;</span><br></pre></td></tr></table></figure><ul><li><code>&amp;</code> 表示后台运行该命令</li><li>默认将输出重定向到当前目录下的 <code>nohup.out</code> 文件</li></ul></li><li><p>后台运行并指定输出文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> python main.py &gt; log.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ul><li><code>&gt; log.txt</code>：将输出重定向到 <code>log.txt</code> 文件。</li><li><code>2&gt;&amp;1</code>：将错误输出重定向到 <code>log.txt</code> 文件。</li></ul></li></ul><p>假设现在使用 <code>nohup python main.py &gt; log.txt &amp;</code> 运行模型的训练程序</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-11.png" alt=""></p><p>程序后台运行，此时我们ctrl+c退出进行其他操作或者关闭终端都不影响训练的进行。注意10044是程序的进程号PID，如果我们想要中值程序在后台的运行，只需要用 <code>kill</code>指令强行终止该进程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -s 9 10044  <span class="comment"># 终止进程，其中 -s 9 指定了传递给进程的信号是９，即强制、尽快终止进程。</span></span><br></pre></td></tr></table></figure><p>如果忘记了 <code>nohup</code> 后台运行时的进程号，又想终止程序运行，可以通过以下方式找回PID：</p><ul><li><p>使用 <code>nvidia-smi</code> 查看GPU监控</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-12.png" alt=""></p><p>如图为GPU监控信息，可以看到我们的程序目前占用了约4G的显存（共16G），GPU利用率47%。通常最下面的Processes栏位中会显示目前GPU上在运行哪些进程，以及这些进行对应的程序文件，我们可以通过这种方式定位到程序的进程号PID。然而恒源云平台可能限制了权限，导致即使显卡明显被占用但Processes一栏却没有进程信息。</p></li><li><p>使用 <code>ps -ef | grep python</code> 查看带有python关键字的进程</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-13.png" alt=""></p><p>这其实是两条指令 <code>ps -ef</code> 和 <code>grep python</code> 。</p><p>前者先统计所有进行的信息，<code>-e</code> 参数代表显示所有进程，<code>-f</code> 参数代表全格式；</p><p>后者根据条件过滤进程，输出带有python关键字的进程。</p><p>如图，最终我们找到了 python main.py 这条命令对应的10044进程，与前文保持一致，这个进程由7498进程（运行该程序时终端中的python解释器）创建，同时10044进程又开启了10个子进程（与代码中由数据加载器开启的10个进程保持一致）。</p></li></ul><p>通过上述方式找到PID后，通过 <code>kill</code> 命令即可提前终止程序运行。</p><p>程序运行过程中会将输出信息重定向到指定文件中，上文中我们通过 <code>nohup python main.py &gt; log.txt &amp;</code> 运行程序，则程序的终端输出都被保存在当前目录下的log.txt文件中，可以通过读取log.txt文件查看输出信息。如果我们想查看模型的实时输出，可以通过以下命令实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f log.txt</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/commands-used-4-training/com-14.png" alt=""></p><p><code>tail</code> 命令用于查看文件的末尾内容。它可以显示文件的最后几行内容，默认显示文件的末尾10行。</p><ul><li><code>-n [行数]</code> : 显示文件末尾的指定行数，而非默认的10行。例如，<code>tail -n 20 log.txt</code> 将显示文件最后的20行。</li><li><code>-f</code> : 持续监测文件是否发生变化，并立即在终端中显示这些新追加的内容。</li></ul><p><code>-f</code> 和 <code>-n</code> 可以一起使用，如 <code>tail -f -n 20 log.txt</code> 用来显示log.txt文件的最后的20行，并持续追踪新增内容。或者单纯的使用 <code>tail -f log.txt</code> 追踪log.txt文件中新增的内容以达到实时输出的效果。</p>]]></content>
      
      
      <categories>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OZYMANDIAS 奥西曼迭斯</title>
      <link href="/2024/11/12/ozymandias/"/>
      <url>/2024/11/12/ozymandias/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="OZYMANDIAS-奥西曼迭斯"><a href="#OZYMANDIAS-奥西曼迭斯" class="headerlink" title="OZYMANDIAS 奥西曼迭斯"></a>OZYMANDIAS 奥西曼迭斯</h1><p><strong>Percy Bysshe Shelley 珀西·比希·雪莱</strong></p><p>漫画作者：<a href="https://www.zenpencils.com/comic/ozymandias/">zen pencils</a></p><blockquote><p>古今将相在何方？荒冢一堆草没了。</p></blockquote><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-1.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-2.png" alt=""></p><p>I met a traveller from an antique land who said …</p><p>我遇见一位来自古老国度的旅人，他说…</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-3.png" alt=""></p><p>Two vast and trunkless legs of stone stand in the desert.</p><p>有两条巨大的石腿矗立在茫茫荒漠中。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-4.png" alt=""></p><p>Near them, on the sand…</p><p>石腿周围的沙地上…</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-5.png" alt=""></p><p>…half sunk, a shattered visage lies. </p><p>…半掩着一个破碎的石雕脸庞。</p><p>Whose frown and wrinkled lip…</p><p>它眉宇冷酷，皱起嘴角…</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-6.png" alt=""></p><p>…and sneer of cold command…</p><p>…面孔依旧威严…</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-7.png" alt=""></p><p>…tell that its sculptor well those passions read.</p><p>…想那雕刻者，必定深谙其人情感。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-8.png" alt=""></p><p>Which yet survive stamped on these lifeless things.</p><p>那傲慢的神态鲜活地刻在这些毫无生气的石头上。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-9.png" alt=""></p><p>The hand that mocked them..</p><p>他曾经只手遮天…</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-10.png" alt=""></p><p>…and the heart that fed.</p><p>…万民景仰。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-11.png" alt=""></p><p>And on the pedestal these words appear…</p><p>在石腿的基座上刻着…</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-12.png" alt=""></p><p>MY NAME IS OZYMANDIAS.</p><p>我的名字是奥西曼迭斯。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-13.png" alt=""></p><p>KING OF KINGS.</p><p>万王之王。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-14.png" alt=""></p><p>LOOK ON MY WORKS, YE MIGHTY AND DEAPAIR!</p><p>在我的丰功伟绩前，俯首称臣吧！</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-15.png" alt=""></p><p>Nothing beside remains.</p><p>除此而外，别无他物。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-16.png" alt=""></p><p>Round the decay of that colossal wreck boudless and bare…</p><p>废墟四周，唯余黄沙莽莽…</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-17.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ozymandias/ozy-18.png" alt=""></p><p>…the lone and level sands stretch far away.</p><p>…空旷的沙漠延展到很远的地方。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
            <tag> 绝命毒师 </tag>
            
            <tag> 异形-契约 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像去雾数据集透射率图生成</title>
      <link href="/2024/10/17/trans-estimate/"/>
      <url>/2024/10/17/trans-estimate/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="图像去雾数据集透射率图生成"><a href="#图像去雾数据集透射率图生成" class="headerlink" title="图像去雾数据集透射率图生成"></a>图像去雾数据集透射率图生成</h1><h2 id="生成透射率图的目的"><a href="#生成透射率图的目的" class="headerlink" title="生成透射率图的目的"></a>生成透射率图的目的</h2><p>图像去雾任务中透射率图的应用主要在以下方面：</p><ul><li>传统方法利用先验和假设计算雾图像的透射率图，并带入到物理模型中进行去雾。</li><li>深度学习方法利用网络模型预测物理模型中的各项参数，并带入物理模型中进行去雾。</li><li>部分深度学习方法利用传统先验方法计算出透射率图并与雾图像一起送入网络模型中作为对雾图像中雾颗粒分布的指导。</li></ul><p>然而：</p><ul><li><p>使用先验知识估计的透射率图存在局限性（精确度较低、容易将天空区域误识别成雾等）。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/trans-estimate/trans-01.png" alt="暗通道先验透射率估计将天空区域误识别成浓雾区域"></p><p>图中天空区域具有跟浓雾区域非常相似的特征，先验知识估计透射率的过程中将该区域识别为了浓雾，预测了非常低的透射率值，在物理模型还原的过程中对应天空区域的亮度值被大幅降低了。</p></li><li><p>利用深度学习方法预测透射率缺少直接的训练数据，透射率往往是作为网络的中间结果，难以进行更直接的约束。</p></li></ul><p>本文通过对现有数据集中样本进行预处理获取成对的 雾图像—透射率图 样本，进而实现透射率估计模型的直接训练，解决先验知识透射率估计方法精确度、误识别等方面的问题。</p><h2 id="准备-雾图像—透射率图-样本对"><a href="#准备-雾图像—透射率图-样本对" class="headerlink" title="准备 雾图像—透射率图 样本对"></a>准备 雾图像—透射率图 样本对</h2><ul><li><p>需要精确的雾图像 $I(x)$—透射率图像 $t(x)$ 样本对来训练模型。需要利用现有可用数据预处理获取。</p><ul><li><p>合成数据集中，利用清晰图像 $J(x)$ 的深度信息 $d(x)$，以及人工选取的全局大气光 $A$、大气散射系数 $\beta$，来合成雾图像 $I(x)$。</p><ul><li><p>一种方法是直接利用 $d(x)$ 计算 $t(x)$，这样可以直接利用与 $d(x)$ 对应的 $I(x)$ 来和 $t(x)$ 组成成对数据。</p><ul><li><p>$t(x)=e^{-\beta d(x)}$</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/trans-estimate/trans-02.png" alt="RESIDE-beta合成数据集，根据深度图获取透射率图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据深度图生成透射率图</span></span><br><span class="line"><span class="comment"># d_path: 深度图所在目录</span></span><br><span class="line"><span class="comment"># name: 深度图文件名</span></span><br><span class="line"><span class="comment"># beta: 大气散射系数，与生成雾浓度相关</span></span><br><span class="line"><span class="comment"># t_path: 透射率图保存目录</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_t_form_depth</span>(<span class="params">d_path, name, beta, t_path</span>):</span><br><span class="line">    data = h5py.File(os.path.join(d_path, name), <span class="string">&#x27;r&#x27;</span>)  <span class="comment"># 读取深度图.mat文件</span></span><br><span class="line">    <span class="comment"># print(list(data.keys()))</span></span><br><span class="line">    depth = data[<span class="string">&#x27;depth&#x27;</span>][:]  <span class="comment"># 图片对应的深度图信息以二维矩阵的形式保存在depth变量中</span></span><br><span class="line">    data.close()</span><br><span class="line">    depth_matrix = np.array(depth)</span><br><span class="line">    depth_matrix = np.transpose(depth_matrix, (<span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="comment"># print(depth_matrix.shape)</span></span><br><span class="line"></span><br><span class="line">    t = np.exp(-<span class="number">1</span> * <span class="built_in">float</span>(beta) * depth_matrix)  <span class="comment"># t(x) = e^(-beta * d(x))</span></span><br><span class="line">    t = (t * <span class="number">255</span>).astype(<span class="string">&#x27;uint8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cv2.imwrite(os.path.join(t_path, name.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;_&quot;</span> + beta + <span class="string">&quot;.jpg&quot;</span>), t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该代码用于实现根据RESIDE-beta(OTS)数据集中的hazy(主要是取出对应的beta)与depth生成与hazy对应的透射率图</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hazy_path = <span class="string">&quot;./data/RESIDE-beta/OTS/hazy/&quot;</span>  <span class="comment"># 雾图像所在目录</span></span><br><span class="line">    depth_path = <span class="string">&quot;./data/RESIDE-beta/OTS/depth/&quot;</span>  <span class="comment"># 深度信息（.mat）所在目录</span></span><br><span class="line">    trans_path = <span class="string">&quot;./data/RESIDE-beta/OTS/trans/&quot;</span>  <span class="comment"># 透射率图保存目录</span></span><br><span class="line">    hazy_list = os.listdir(hazy_path)</span><br><span class="line">    <span class="keyword">for</span> hazy <span class="keyword">in</span> tqdm(hazy_list):</span><br><span class="line">        <span class="keyword">if</span> hazy.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>] == <span class="string">&quot;1&quot;</span>:  <span class="comment"># RESIDE-beta(OTS)数据集中hazy的命名格式为(图片编号_A_beta),这里是取出大气光值A为1的图片获取对应的beta值</span></span><br><span class="line">            gen_t_form_depth(d_path=depth_path, name=hazy.split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;.mat&quot;</span>, beta=hazy.split(<span class="string">&quot;_&quot;</span>)[-<span class="number">1</span>][<span class="number">0</span>:-<span class="number">4</span>], t_path=trans_path)</span><br></pre></td></tr></table></figure></li><li><p>目前只有 RESIDE-$\beta$ （是原数据集RESIDE的扩展版本，OST中全部是室外场景，深度图以及雾的合成相较于原版RESIDE更合理一些）中的OST子集可以同时获取 $d(x)$ 和 $\beta$，但OST中的数据量足够大。</p></li></ul></li><li><p>在缺少 $A$ 或 $\beta$ 但有 $d(x)$ 时，可以考虑自己选取 $A$ 和 $\beta$ 同时合成 $I(x)$ 和 $t(x)$ 。</p></li><li><p>注：尽管 $d(x)$ 深度信息可能存在不准确的情况，但是本任务关注的是透射率 $t(x)$ 与图中雾的分布对应是否一致，而雾是通过 $d(x)$ 进行添加的，所以即使 $d(x)$ 表示深度信息可能不准确，但表示雾的信息一定是准确的。</p></li></ul></li><li><p>真实成对数据集中，利用成对的雾图像 $I(x)$ 和清晰图像 $J(x)$ 计算 $t(x)$。</p><ul><li><p>$t(x)=\frac{A-I(x)}{A-J(x)}$    ，根据大气散射模型$I(x)=J(x)t(x)+A(1-t(x))$。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/trans-estimate/trans-03.png" alt="真实数据集根据I(x)和J(x)计算透射率图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据雾图像hazy和清晰图像GT生成透射率图</span></span><br><span class="line"><span class="comment"># h_path: 雾图像目录</span></span><br><span class="line"><span class="comment"># c_path: 清晰图像目录</span></span><br><span class="line"><span class="comment"># name: 图像名</span></span><br><span class="line"><span class="comment"># t_path: 透射率图保存路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_t_from_hng</span>(<span class="params">h_path, c_path, name, t_path</span>):</span><br><span class="line">    inp = cv2.imread(os.path.join(h_path, name))</span><br><span class="line">    gt = cv2.imread(os.path.join(c_path, name))</span><br><span class="line"></span><br><span class="line">    inp = inp.astype(<span class="string">&#x27;float64&#x27;</span>) / <span class="number">255</span></span><br><span class="line">    gt = gt.astype(<span class="string">&#x27;float64&#x27;</span>) / <span class="number">255</span></span><br><span class="line"></span><br><span class="line">    t = (<span class="number">1</span> - inp) / (<span class="number">1</span> - gt + <span class="number">0.0000001</span>)  <span class="comment"># t(x) = (A - I(x)) / (A - J(x) + 防除0系数)</span></span><br><span class="line">    t = np.clip(t, <span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># 由于真实中存在噪声等影响，截取0-1范围以排除个别异常点</span></span><br><span class="line">    t = (t * <span class="number">255</span>).astype(<span class="string">&#x27;uint8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    gray_t = cv2.cvtColor(t, cv2.COLOR_RGB2GRAY)</span><br><span class="line">    cv2.imwrite(os.path.join(t_path, name), gray_t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该代码用于实现根据清晰图像(GT)与雾图像(hazy)生成与hazy对应的透射率图</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hazy_path = <span class="string">&quot;./data/RESIDE-beta/OTS/hazy/&quot;</span>  <span class="comment"># 雾图像目录</span></span><br><span class="line">    clear_path = <span class="string">&quot;./data/RESIDE-beta/OTS/clear/&quot;</span>  <span class="comment"># 清晰图像目录</span></span><br><span class="line">    trans_path = <span class="string">&quot;./data/RESIDE-beta/OTS/trans/&quot;</span>  <span class="comment"># 透射率图保存目录</span></span><br><span class="line"></span><br><span class="line">    hazy_list = os.listdir(hazy_path)</span><br><span class="line">    <span class="keyword">for</span> hazy <span class="keyword">in</span> tqdm(hazy_list):</span><br><span class="line">        gen_t_from_hng(h_path=hazy_path, c_path=clear_path, name=hazy, t_path=trans_path)</span><br></pre></td></tr></table></figure></li><li><p>其中 $A$ 按照传统方式选择图中亮度最大的点的值。</p></li><li><p>注：真实数据集中仍然存在像素点不对齐的情况，可能给计算带来误差，必要时使用暗通道透射率来替代估计 $t(x)$，这种情况下需要手动剔除天空区域（类雾区域等暗通道误识别区域）。</p></li></ul></li></ul></li><li><p>最终经过预处理后的训练数据包含两部分，一部分具有精确标定的特性（合成数据集预处理），一部分对数据集中缺少的浓雾特征进行补充（真实数据集预处理）。</p></li></ul><h2 id="雾图像—透射率图样本对以及训练模型估计透射率图的效果"><a href="#雾图像—透射率图样本对以及训练模型估计透射率图的效果" class="headerlink" title="雾图像—透射率图样本对以及训练模型估计透射率图的效果"></a>雾图像—透射率图样本对以及训练模型估计透射率图的效果</h2><p>经过上述对现有数据集的处理后，可以获取以下雾图像—透射率图样本对：</p><ul><li><p>在RESIDE-$\beta$合成数据集上处理后的雾图像—透射率图样本对。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/trans-estimate/trans-04.png" alt="合成数据集上的样本对"></p></li><li><p>在NH-HAZE等真实数据集上处理后的雾图像—透射率图样本对。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/trans-estimate/trans-05.png" alt="真实数据集上的样本对"></p></li></ul><p>可以看到，相较于暗通道先验估计的透射率图，无论是合成数据集还是真实数据集上的样本，将天空区域误识别成雾的情况大幅减少了，且由于透射率图是通过物理模型计算而来的，像素点也是精确对应的。</p><p>在获取以上样本对之后，就可以进行透射率估计模型的训练，以雾图像作为模型输入 $I(x)$，以透射率图作为 $GT$ 约束模型输出的结果，在合成数据集上训练的模型效果如下图所示：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/trans-estimate/trans-06.png" alt="透射率估计模型预测结果1"></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/trans-estimate/trans-07.png" alt="透射率估计模型预测结果2">合成数据集中的雾浓度比较淡、且不均匀分布的情况不明显，但是在训练集上，模型的透射率预测结果与GT透射率图十分接近，能精准地估计出雾图像中透射率较低的区域，且未产生天空区域误识别的错误，初步说明透射率估计模型的有效性。</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像去雾 </tag>
            
            <tag> 数据集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ntire2024非均匀浓雾去除挑战赛报告</title>
      <link href="/2024/09/25/ntire-2024-report/"/>
      <url>/2024/09/25/ntire-2024-report/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Ntire2024非均匀浓雾去除挑战赛报告"><a href="#Ntire2024非均匀浓雾去除挑战赛报告" class="headerlink" title="Ntire2024非均匀浓雾去除挑战赛报告"></a>Ntire2024非均匀浓雾去除挑战赛报告</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>图像去雾任务缺乏标准化的测试基准。</li><li>保持<code>一致的光照条件</code>和<code>参考图像与模糊图像之间的逐像素对应</code>是数据收集的关键挑战。</li><li>历届比赛数据集：<ul><li><a href="https://data.vision.ee.ethz.ch/cvl/ntire18//o-haze/">O-HAZE</a>和<a href="https://data.vision.ee.ethz.ch/cvl/ntire18//i-haze/">I-HAZE</a>（Ntire2018，轻度均匀雾）。</li><li><a href="https://data.vision.ee.ethz.ch/cvl/ntire19/dense-haze/">DENSE-HAZE</a>（Ntire2019，均匀浓雾）。</li><li><a href="https://data.vision.ee.ethz.ch/cvl/ntire20/nh-haze/">NH-HAZE</a>（Ntire2020、2021，非均匀雾）。</li><li><a href="https://competitions.codalab.org/competitions/28032#participate">NH-HAZE2</a> （Nitre2021，非均匀雾）</li><li><a href="https://codalab.lisn.upsaclay.fr/competitions/10216#participate">HD-NH-HAZE</a>（Ntire2023，高清非均匀雾）</li></ul></li><li>本届比赛数据集：<ul><li><a href="https://codalab.lisn.upsaclay.fr/competitions/17529#participate">DNH-HAZE</a>（高清非均匀浓雾，4000×6000或6000×4000） 。<ul><li>训练数据 40对 </li><li>验证数据 5对</li><li>测试数据 5对</li></ul></li></ul></li><li>比赛目的：<ul><li>探索最新的去雾研究趋势。</li><li>强调高质量数据集的可用性。（DNH-HAZE）</li></ul></li><li>评价指标<ul><li>PSNR (Peak Signal to Noise Ratio)。峰值信噪比。</li><li>SSIM (Structural Similarity)。结构相似性。</li><li>LPIPS (Learned Perceptual Image Patch Similarity)。模型评估图像的感知质量。</li><li>MOS (Mean Opinion Score)。人工评估图像的感知质量。</li></ul></li></ul><h2 id="方案排名"><a href="#方案排名" class="headerlink" title="方案排名"></a>方案排名</h2><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ntire-2024-report/ntire-1.png" alt="测试集指标排名"></p><h3 id="USTC-Dehazers"><a href="#USTC-Dehazers" class="headerlink" title="USTC-Dehazers"></a>USTC-Dehazers</h3><p><strong>Coarse-to-Fine Hybrid Network for Dense and Nonhomogeneous Dehaze</strong></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ntire-2024-report/ntire-2.png" alt="USTC-Dehazers团队提出的解决方案的网络架构"></p><ul><li>基于双分支模型作为整体框架。</li><li>迁移学习分支中（上半），Flash intern-image融合了可变形卷积Deformable Convolution v4 (DCNv4)，具有更强的远距离建模能力和自适应空间聚合能力。[增加网络的去雾能力]</li><li>细节提取分支中（下半），使用轻量级空间自适应特征调制（Spatially-Adaptive Feature Modulation，SAFMN)，通过引入选择性注意机制，将不同层次的特征动态融合，增强模型对关键信息的感知能力。[应对高分辨率的挑战]</li><li>引入合成数据。[缓解训练样本稀少的困境]</li><li>引入EfficientVit-SAM作为特征提取器，构建了一种新的增强感知损失。[降低雾霾的残留]</li></ul><h3 id="Dehazing-R"><a href="#Dehazing-R" class="headerlink" title="Dehazing_R"></a>Dehazing_R</h3><p><strong>DehazeDCT: Towards Effective Non-Homogeneous Dehazing via Deformable Convolutional Transformer</strong></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ntire-2024-report/ntire-3.png" alt="Dehazing_R团队提出的解决方案的网络架构"></p><ul><li>Dehazing Module第一阶段去雾模块。<ul><li>学习雾图像到清晰图像的颜色和纹理映射。</li><li>双分支。<ul><li>Main Branch：基于Deformable Convolution v4的类Transformer架构。</li><li>Frequency-Aware Branch：集成了一个频率感知分支，方便频率特征的获取。</li></ul></li><li>使用L1损失、SSIM损失、感知损失以及GAN对抗损失。</li></ul></li><li>Refinement Module第二阶段细化模块。<ul><li>为了进一步还原细节和纹理，输出逼真的效果。</li><li>采用了一种基于Retinex的轻量级Transformer网络。</li><li>使用L1损失、SSIM损失和感知损失。</li></ul></li></ul><h3 id="Team-Woof"><a href="#Team-Woof" class="headerlink" title="Team Woof"></a>Team Woof</h3><p><strong>Two Stage Training and Multi-Scale Attention Head For Dehazing</strong></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ntire-2024-report/ntire-4.png" alt="由Team Woof团队提出的解决方案的网络架构"></p><ul><li>基于ITB-Dehaze和DWT-FFCGAN。</li><li>引入多尺度注意头。并行多尺度卷积核（类似MixDehazeNet）。</li><li>通道注意力和像素注意力块（CA+PA，类似FFANet）。</li></ul><h3 id="ITB-Dehaze"><a href="#ITB-Dehaze" class="headerlink" title="ITB Dehaze"></a>ITB Dehaze</h3><p><strong>A Fine-Tuned Self-supervised End-to-end Solution to NonHomogeneous Dense Dehazing via Transformer</strong></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ntire-2024-report/ntire-5.png" alt="Ntire2023Best的网络架构，ITB Dehaze与TTWT团队均基于该网络"></p><ul><li>基于<a href="https://github.com/yangyiliu21/ntire2023_ITBdehaze">Ntire2023Best</a>网络架构。</li><li>对往年的数据（<a href="https://data.vision.ee.ethz.ch/cvl/ntire20/nh-haze/">NH-HAZE1</a>、<a href="https://competitions.codalab.org/competitions/28032#participate">NH-HAZE2</a>）进行了三通道伽马矫正，使往年(2020、2021)的数据在色彩与亮度方面与今年(2023)的数据更匹配。</li><li>双分支网络。<ul><li>Transfer Learning Branch：<ul><li>采用在<a href="https://image-net.org/download">ImageNet</a>上预训练的<a href="https://arxiv.org/pdf/2111.09883v2">Swin-Transformer V2</a>模型提取雾图像的有意义的多尺度特征。</li><li>采用迁移学习的思想，使用ImageNet预训练模型初始化Swin-Transformer，使系统能够基于之前低级任务中学习到的知识。</li><li>通道注意力和像素注意力块（CA+PA，<a href="https://cdn.aaai.org/ojs/6865/6865-13-10094-1-10-20200525.pdf">FFANet</a>）。</li></ul></li><li>Data Fitting Branch：<ul><li>仅从NH-Haze数据集学习，来补充从预训练模型中学到的知识。</li><li>级联残差通道注意网络(Residual Channel Attention Network，RCAN)和从头开始训练可以很容易地在参数数量和映射能力之间找到一个很好的平衡。</li><li>传统卷积层中没有出现下采样操作，因此不会丢失精细特征。</li><li>为了保证泛化性能，该分支被设计为轻量级。</li></ul></li><li>通过注意力模块和跳跃连接，加上一个简单的融合模块，将两个分支的结果集成在一起，输出去雾后的图像。</li></ul></li><li>采用了半监督自监督方法，克服了数据样本的不足。为未标记的数据生成合成标签，并使用低学习率和模型的正则化设置在其上再次训练模型。利用这种方法引入了利用更多未标记数据进行培训和改进的可用性。</li></ul><h3 id="TTWT"><a href="#TTWT" class="headerlink" title="TTWT"></a>TTWT</h3><p><strong>Improved NonLocal Channel Attention for NonHomogeneous Image Dehazing</strong></p><ul><li>基于<a href="https://github.com/yangyiliu21/ntire2023_ITBdehaze">Ntire2023Best</a>网络架构。</li><li>进行以下改进<ul><li>自定义损失函数。<ul><li>平滑L1损失（smooth L1 loss）。</li><li>Multi-Scale Structure Similarity（MS-SSIM）损失。</li><li>VGG损失。</li><li>相似性损失。</li><li>鉴别器损失。</li></ul></li><li>多通道特征提取。</li><li><a href="https://pytorch.org/docs/stable/generated/torch.optim.AdamW.html#adamw">AdamW</a>优化器，<a href="https://pytorch.org/docs/stable/generated/torch.optim.lr_scheduler.CosineAnnealingLR.html">余弦退火</a>学习率下降策略。</li></ul></li></ul><h3 id="DH-AISP"><a href="#DH-AISP" class="headerlink" title="DH-AISP"></a>DH-AISP</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ntire-2024-report/ntire-6.png" alt="DH-AISP团队提出的解决方案的网络架构"></p><ul><li>基于精细双分支模型。<ul><li>全局分支 (global branch)：在低分辨率下学习原始图像与雾图像之间的映射关系，相对于原始分辨率具有更大的感受野，可以通过周围区域恢复被雾破坏的信息。</li><li>细节分支 (detail branch)：学习输入图像与低分辨率恢复图像之间的细节差异。</li></ul></li></ul><h3 id="BU-Dehaze"><a href="#BU-Dehaze" class="headerlink" title="BU-Dehaze"></a>BU-Dehaze</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/ntire-2024-report/ntire-7.png" alt="由BU-Dehaze团队提出的解决方案的网络架构"></p><ul><li><p>受<a href="https://openaccess.thecvf.com/content/CVPR2021W/NTIRE/papers/Fu_DW-GAN_A_Discrete_Wavelet_Transform_GAN_for_NonHomogeneous_Dehazing_CVPRW_2021_paper.pdf">DW-GAN</a>启发，开发了一种数据预处理技术，旨在使增强数据的分布与目标数据的分布更紧密地保持一致。</p></li><li><p>双分支结构。</p><ul><li>第一个分支中，利用在<a href="https://image-net.org/download">ImageNet</a>数据集上预训练的<a href="https://arxiv.org/pdf/2111.09883v2">Swin-Transformer V2</a>模型和自注意力机制，从雾图像中提取相关的多尺度特征。采用迁移学习的概念，使用ImageNet预训练模型初始化Swin-Transformer，从而使系统能够利用到从先前的低级任务中获得的知识。</li><li>第二个分支中，采用<a href="https://ai.vetmed.ucdavis.edu/sites/g/files/dgvnsk8041/files/inline-files/JC-2023-06-07_U-Net.pdf">U-Net</a>架构，通过专门关注目标数据领域来补充第一个分支。</li></ul></li></ul><h2 id="方案中的关键设计"><a href="#方案中的关键设计" class="headerlink" title="方案中的关键设计"></a>方案中的关键设计</h2><ul><li>迁移学习。</li><li>引入合成数据。</li><li>可变形卷积。 (Deformable Convolution v4)</li><li>感知损失函数。</li><li>双分支结构。</li><li>DWT-Encoder。</li><li>并行多尺度卷积核。</li><li>通道注意力和像素注意力。 (CA+PA)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像去雾 </tag>
            
            <tag> Ntire </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像去雾领域数据集</title>
      <link href="/2024/09/24/dehaze-dateset/"/>
      <url>/2024/09/24/dehaze-dateset/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="图像去雾领域数据集"><a href="#图像去雾领域数据集" class="headerlink" title="图像去雾领域数据集"></a>图像去雾领域数据集</h1><p>图像去雾领域中真实配对数据集的拍摄具有严格的时间和天气要求，需要在同一机位下分别拍摄雾霾天气下以及无雾天气下的图片组成成对的真实样本，其获取具有以下问题：</p><ul><li>样本的采集受到限制，只能在有雾的天气条件下拍摄数据样本。</li><li>成对样本获取的时间间隔较长，与雾图像对应的清晰图像（GT）需要天气由雾转晴后才能继续拍摄。<ul><li>由于间隔的时间较长，场景中的物体大概率会发生变化，去雾真实数据集相较其他真实增强数据集（如阴影去除、低光照增强等）有更严重的样本不对齐问题。</li><li>由于间隔的时间较长，场景中的光照条件会发生变化，难以保证拍摄清晰图像时的光照条件与雾图像原始光照条件相同，导致训练深度学习模型恢复的并不是雾图像的原始的光照。</li></ul></li></ul><p>因此图像去雾领域的数据集的获取主要有以下两种主流方式：</p><ul><li>合成数据集：通过在清晰图像上人工加雾的方式取得雾图像-清晰图像数据对。加雾的方式通常是利用<code>大气散射模型</code>(去雾领域经典物理建模)，使用清晰图像的<code>深度图</code>作为场景的透射率，代入大气散射模型中并调整参数，以获取不同浓度的加雾图像。<ul><li>优点：<ul><li>可以以较低的成本获取大规模的训练样本。</li><li>合成样本非常精确，不存在不对齐问题。</li></ul></li><li>缺点：<ul><li>通过物理模型加雾，深度学习很容易学习的物理模型加雾的逆向过程而不是学习真正的去雾，且物理模型自身也存在缺陷。</li><li>透射率（即雾的浓度分布信息）由场景深度信息决定，这表明合成雾图像中的雾是在场景中均匀分布的，图片上的浓度只与图片深度有关，不能模拟真实更加复杂的随机分布的特征。</li></ul></li></ul></li><li>真实数据集：使用雾生成设备<code>人工造雾</code>，从而摆脱天气条件的限制、减少成对样本拍摄的时间间隔。<ul><li>优点：<ul><li>相比合成数据集，真实数据集中雾的特征更加多样且复杂，更具有挑战性。</li></ul></li><li>缺点：<ul><li>仍然有不对齐的问题。</li><li>人工生成的雾更像”烟“而不是”雾“。</li><li>现有真实数据集数据规模要远小于合成数据集</li></ul></li></ul></li></ul><h2 id="NYUv2-NYU-Depth-V2"><a href="#NYUv2-NYU-Depth-V2" class="headerlink" title="NYUv2 (NYU-Depth V2)"></a><a href="https://cs.nyu.edu/~fergus/datasets/nyu_depth_v2.html">NYUv2 (NYU-Depth V2)</a></h2><ul><li><p>纽约大学创建，由 Kinect（3D体感摄像机）的 RGB 和 Depth 摄像头记录的各种室内场景的视频序列组成。</p><ul><li>包含1449对RGB图像及其对应的深度图。</li><li>摄于3个城市的464个场景。</li><li>407,024个未标记的帧。</li><li>数据集中包含以下部分：<ul><li>标记数据：经过预处理的带标签的数据（原始数据的子集）。</li><li>原始数据：Kinect提供的原始RGB、深度和加速数据。</li><li>工具箱：用于操作数据和标签的工具。</li></ul></li></ul></li><li><p>由于数据集中包含深度信息，常被应用于雾图像的合成。研究者通过设置不同的大气光参数和透射率参数，由大气散射模型合成雾图像数据集。</p></li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dehaze-dateset/data-1.png" alt="图1 RGB相机的输出(左)、预处理的深度信息(中)、分类标签(右)"></p><h2 id="D-HAZY"><a href="#D-HAZY" class="headerlink" title="D-HAZY"></a><a href="https://ieeexplore.ieee.org/document/7532754">D-HAZY</a></h2><ul><li>是最早提出的一个专门用于定量评估图像去雾的数据集。</li><li>包含1400多对清晰图像和对应的深度图。这些数据来自于 <a href="https://vision.middlebury.edu/stereo/data/scenes2014/">Middelbury</a> 数据集和 <a href="https://cs.nyu.edu/~fergus/datasets/nyu_depth_v2.html">NYU-Depth V2</a> 数据集。</li><li>D-hazy 雾霾数据集采用大气散射模型合成，其中深度信息已知，透射率中参数 $\beta$ 设置为1，大气光值也被设置为1。</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dehaze-dateset/data-2.png" alt="图2 清晰图像(左)、深度图(中)、合成雾图像(右)"></p><h2 id="HazeRD"><a href="#HazeRD" class="headerlink" title="HazeRD"></a><a href="https://labsites.rochester.edu/gsharma/research/computer-vision/hazerd/">HazeRD</a></h2><ul><li>是在 14 个室外环境拍摄的清晰图像上合成数据集。</li><li>标注样本包括一幅无雾 RGB 图像和一个对应深度图。</li><li>每个场景通过设置不同透射率参数 $\beta$ 合成 5 种从轻雾到浓雾图像，模拟不同天气条件的雾霾。其中，大气光值设置为 0.76，以确保在阴天物体清晰度。</li><li>提供了一个MATLAB函数，可以根据大气散射模型生成不同雾霾参数的雾霾图像。</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dehaze-dateset/data-3.png" alt="图3 清晰图像(左1)、深度图(左2)、可视范围500m的合成雾图像(左3)、可视范围50m的合成雾图像(右1)"></p><h2 id="RESIDE"><a href="#RESIDE" class="headerlink" title="RESIDE"></a><a href="https://sites.google.com/view/reside-dehaze-datasets/reside-standard">RESIDE</a></h2><ul><li>是一个大规模人工合成数据集。也是目前最有影响力的合成雾数据集。</li><li>既使用了 <a href="https://vision.middlebury.edu/stereo/data/scenes2014/">Middelbury</a> 数据集和 <a href="https://cs.nyu.edu/~fergus/datasets/nyu_depth_v2.html">NYU-Depth V2</a> 数据集中的清晰图像和深度图生成配对的雾图像，也包含一些由真实图像组成的不配对图像。</li><li>由每个清晰图像生成 10 幅模糊图像。大气光值取值范围为[0.7, 1.0]之间，透射率中$t(x)=e^{-\beta d(x)}$参数 $\beta$ 取值为[0.6, 1.8]。</li><li>数据集标准版（RESIDE-Standard）分为以下子集：<ul><li>ITS(Indoor Training Set)：用于训练的13990对室内合成图像。</li><li>SOTS (Synthetic Objective Testing Set)：用于测试的500对室内合成图像。</li><li>HSTS (Hybrid Subjective Testing Set)：用于测试的不配对的10张合成图像和10张真实雾图像。</li></ul></li><li>数据集$\beta$版（RESIDE- $\beta$ ）是对原数据集的扩充，分为以下子集：<ul><li>OTS (Outdoor Training Set)：用于训练的72135对室外合成图像。</li><li>RTTS (Real-world Task-Driven Testing Set)：用于测试的4322 张真实世界任务驱动测试图像。</li><li>以及部分未标注的真实世界雾图像。</li></ul></li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dehaze-dateset/data-4.png" alt="图4 RESIDE-Standard子集示例"></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dehaze-dateset/data-5.png" alt="图5 RESIDE-$\beta$子集示例"></p><h2 id="I-HAZE-和-O-HAZE"><a href="#I-HAZE-和-O-HAZE" class="headerlink" title="I-HAZE 和 O-HAZE"></a><a href="https://data.vision.ee.ethz.ch/cvl/ntire18//i-haze/">I-HAZE</a> 和 <a href="https://data.vision.ee.ethz.ch/cvl/ntire18//o-haze/">O-HAZE</a></h2><ul><li>O-HAZE 数据集是第一个创建的包含雾/清晰图像对的真实雾数据集。它由 45 对不同的户外场景拍摄的图像组成，使用机器人工造雾的方式生成雾并拍摄雾图像。</li><li>I-HAZE 与 O-HAZE 相似，但采集的是室内环境下的 35 对雾/清晰样本。</li><li>2018 年 IEEE  CVPR NTIRE（New Trends in Image Restoration and  Enhancement）研讨会举办针对<code>真实雾</code>场景的目标检测挑战赛。I-HAZE 和 O-HAZE 被选为挑战赛数据集。</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dehaze-dateset/data-6.png" alt="图6 I-Haze数据集样本示例"></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dehaze-dateset/data-7.png" alt="图7 O-Haze数据集样本示例"></p><h2 id="DENSE-HAZE"><a href="#DENSE-HAZE" class="headerlink" title="DENSE-HAZE"></a><a href="https://data.vision.ee.ethz.ch/cvl/ntire19/dense-haze/">DENSE-HAZE</a></h2><ul><li>真实图像数据集，用来验证去雾方法在浓雾环境下的表现，数据集中包含 55 对雾/清晰样本。</li><li>在 2019 年 IEEE CVPR NTIRE 研讨会上， DENSE-HAZE 被选为<code>浓雾</code>去除挑战赛标准数据集。</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dehaze-dateset/data-8.png" alt="图8 Dense-HAZE数据集样本示例"></p><h2 id="NH-HAZE"><a href="#NH-HAZE" class="headerlink" title="NH-HAZE"></a><a href="https://data.vision.ee.ethz.ch/cvl/ntire20/nh-haze/">NH-HAZE</a></h2><ul><li>真实图像数据集，用来验证去雾方法在非均匀雾环境下的表现，数据集中包含 55 对雾/清晰样本。</li><li>在 2020 年 IEEE CVPR NTIRE 研讨会上， NH-HAZE 被选为<code>非均匀</code>雾图像去雾挑战赛标准数据集。</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dehaze-dateset/data-9.png" alt="图9 NH-HAZE数据集样本示例"></p><h2 id="NH-HAZE2"><a href="#NH-HAZE2" class="headerlink" title="NH-HAZE2"></a><a href="https://competitions.codalab.org/competitions/28032#participate">NH-HAZE2</a></h2><ul><li>真实图像数据集，用来验证去雾方法在非均匀雾环境下的表现，是NH-HAZE的扩充，数据集中包含 35 对雾/清晰样本。</li><li>在 2021 年 IEEE CVPR NTIRE 研讨会上， NH-HAZE2 被选为<code>非均匀</code>去雾挑战赛标准数据集。<ul><li>训练图像（01 至 25）</li><li>验证图像（26 至 30）(GT尚未公开)</li><li>测试图像（31 至 35）(GT尚未公开)</li></ul></li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dehaze-dateset/data-10.png" alt="图10 NH-HAZE2数据集样本示例"></p><h2 id="HD-NH-HAZE"><a href="#HD-NH-HAZE" class="headerlink" title="HD-NH-HAZE"></a><a href="https://codalab.lisn.upsaclay.fr/competitions/10216#participate">HD-NH-HAZE</a></h2><ul><li>真实图像数据集，用来验证去雾方法在高清+非均匀雾环境下的表现，数据集中包含 50 对雾/清晰样本(4000×6000)。</li><li>在 2023 年 IEEE CVPR NTIRE 研讨会上， HD-NH-HAZE 被选为<code>高清非均匀</code>去雾挑战赛标准数据集。<ul><li>训练图像（01 至 40）</li><li>验证图像（41 至 45）(GT尚未公开)</li><li>测试图像（46 至 50）(GT尚未公开)</li></ul></li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dehaze-dateset/data-11.png" alt="图11 HD-NH-HAZE数据集样本示例"></p><h2 id="DNH-HAZE"><a href="#DNH-HAZE" class="headerlink" title="DNH-HAZE"></a><a href="https://codalab.lisn.upsaclay.fr/competitions/17529#participate">DNH-HAZE</a></h2><ul><li>真实图像数据集，用来验证去雾方法在高清+非均匀+浓雾环境下的表现，数据集中包含 50 对雾/清晰样本(4000×6000)。</li><li>在 2024 年 IEEE CVPR NTIRE 研讨会上， DNH-HAZE 被选为<code>高清非均匀浓雾</code>去雾挑战赛标准数据集。<ul><li>训练图像（01 至 40）</li><li>验证图像（41 至 45）(GT尚未公开)</li><li>测试图像（46 至 50）(GT尚未公开)</li></ul></li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dehaze-dateset/data-12.png" alt="图12 DNH-HAZE数据集样本示例"></p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像去雾 </tag>
            
            <tag> 数据集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暗通道先验去雾</title>
      <link href="/2024/09/23/dark-channel-prior/"/>
      <url>/2024/09/23/dark-channel-prior/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="暗通道先验去雾"><a href="#暗通道先验去雾" class="headerlink" title="暗通道先验去雾"></a>暗通道先验去雾</h1><ul><li><a href="https://ieeexplore.ieee.org/abstract/document/5567108/citations?tabFilter=papers#citations">He Kaiming, Sun Jian and Tang Xiaoou. Single Image Haze Removal Using Dark Channel Prior. IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 33, no. 12, pp. 2341-2353, Dec. 2011, doi: 10.1109/TPAMI.2010.168.</a>  [暗通道先验 Dark Channel Prior]</li><li><a href="https://ieeexplore.ieee.org/abstract/document/6319316">He Kaiming, Sun Jian and Tang Xiaoou. Guided Image Filtering. IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 35, no. 6, pp. 1397-1409, June 2013, doi: 10.1109/TPAMI.2012.213.</a> [引导滤波 Guided Filtering]</li></ul><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><h3 id="大气散射模型"><a href="#大气散射模型" class="headerlink" title="大气散射模型"></a>大气散射模型</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dark-channel-prior/dc-1.png" alt="图1 大气散射模型雾天成像过程建模"></p><p>传统去雾方法对雾天成像过程进行物理建模，通过求解模型的未知量进而恢复清晰图像。经典的<code>大气散射模型</code>如图1所示，它假设成像时接收到的光源主要来自两个部分：一是场景中的物体反射场景光源$A$形成的反射光$J(x)$经过雾颗粒的衰减影响$t(x)$到达相机的部分$J(x)t(x)$，这部分是对成像质量的直接影响；二是雾颗粒对场景光源$A$散射影响$1-t(x)$后的散射光到达相机的部分$A(1-t(x))$。设备接收到这两部分的光，形成最后的降质雾图像$I(x)$，根据以上结果即可得到雾形成过程的物理建模，如式(1)所示：</p><script type="math/tex; mode=display">I(x)=J(x)t(x)+A(1-t(x)) \tag 1</script><p>根据以上建模，在去雾的过程中，只要能从雾图像$I(x)$中估计出场景光源强度$𝐴$和透射率$𝑡(𝑥)$，即可代入式(1)求解无雾图像$J(x)$。然而建模中存在多个未知量，属于不适定问题，需要借助<code>先验知识</code>加以约束，缩小解空间。</p><h3 id="暗通道先验"><a href="#暗通道先验" class="headerlink" title="暗通道先验"></a>暗通道先验</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dark-channel-prior/dc-2.png" alt="图2 (a)无雾的图像 (b)与无雾图像相对应的暗通道图 (c)雾图像及其暗通道图"></p><p>暗通道先验是去雾领域的重要先验知识，是基于统计学观测结果而做出的先验性假设，通过领域内通用知识的引入协助物理模型未知量的求解。</p><p>如图2所示，<a href="https://baike.baidu.com/item/%E4%BD%95%E6%81%BA%E6%98%8E/22863446?fr=ge_ala">何恺明</a>等人观测到，在大部分<code>无雾图像</code>任一像素点对应的三个通道中，总有一个通道的像素值很小且接近于0（如图2(a)(b)所示，将无雾图像(a)中每个像素点在三个通道中的最小值提取出来得到暗通道图(b)，暗通道图的绝大部分像素点具有接近于0的像素值）；而在<code>雾图像</code>中，由于雾颗粒的散射光附加到对应像素点上使得像素点的三通道像素值增大，进而提取到的像素最小值一般远大于0（如图2(c)所示，雾图像中存在雾的区域像素的三通道值较大，因此提取出的暗通道图相比于无雾图像具有更大和更加明显的白色区域）。</p><p>根据观测结果提出了以下先验假设：在大部分无雾图像的非天空区域，某一区域的像素中至少存在一个像素的某一颜色通道存在非常低的亮度值，这个亮度值几乎等同于0。因此，对于一个清晰的观测图像$𝐽(x)$，其暗通道$J_{dark}(x)$可以有如下式(2)表示：</p><script type="math/tex; mode=display">J_{dark}(x)=\min\limits_{y∈Ω(x)}[\min\limits_{c∈\{r,g,b\}}J^{c}(y)] \tag 2</script><p>其中，$𝛺(𝑥)$表示以$𝑥$为中心的一个窗口,$J^{c}$表示彩色图像对应 RGB 通道。如果$𝐽$是室外无雾图像，除了天空区域之外，$𝐽$的暗通道$J_{dark}$的强度较低并且趋于零($J_{dark}(x)=0$)。这样的观测结果称之为暗通道先验。</p><h2 id="去雾方法"><a href="#去雾方法" class="headerlink" title="去雾方法"></a>去雾方法</h2><h3 id="全局大气光的估算（-A-）"><a href="#全局大气光的估算（-A-）" class="headerlink" title="全局大气光的估算（$A$）"></a>全局大气光的估算（$A$）</h3><ul><li>传统方法直接选取雾图像中的亮度值最高的点作为全局大气光值（场景光源的强度），这样原始雾图像中的白色物体会对此有影响，使选取的大气光值偏高。</li><li>暗通道的运算可以抹去原始图像中小块的白色物体（提取窗口内的最小值，可以忽略一些比窗口小的白色物体较大的像素值），所以这样估计的全局大气光值会更准确。</li></ul><p>借助于暗通道图来从雾图像中获取$A$值：</p><ol><li><p>从暗通道图中按照亮度的大小选取前0.1%的像素，并记录其在图像中的位置。</p></li><li><p>在原始雾图像$I(x)$中寻找这些位置上具有最高亮度的点的值，作为<strong>$A$</strong>值的估计。</p></li></ol><h3 id="透射率的估算（-t-x-）"><a href="#透射率的估算（-t-x-）" class="headerlink" title="透射率的估算（$t(x)$）"></a>透射率的估算（$t(x)$）</h3><p>对式(1)大气散射模型经过变换可以得到式(3)</p><script type="math/tex; mode=display">\frac{I(x)}{A}=t(x)\frac{J(x)}{A}+1-t(x) \tag 3</script><p>其中大气光强度$A$和雾图像$I(x)$的值已知，清晰图像$J(x)$和透射率$t(x)$未知， 假设每个窗口的透射率$𝑡(𝑥)$是相同的，为常数$\tilde{t}(x)$，且$𝐴$的值已知，对式(3)两边同时计算暗通道（式(2)），即可得到式(4)：</p><script type="math/tex; mode=display">\frac{1}{A}\min\limits_{y∈Ω(x)}[\min\limits_{c∈\{r,g,b\}}I^{c}(y)]=\frac{\widetilde{t}(x)}{A}\min\limits_{y∈Ω(x)}[\min\limits_{c∈\{r,g,b\}}J^{c}(y)]+1-\widetilde{t}(x) \tag 4</script><p>式(4)中，$Ω(x)$代表以$x$点为中心的一个窗口，$y$是该窗口中的任一值，$c$表示图像的 RGB 通道。上式表示在图像中一个窗口区域覆盖的三个通道区域中，取像素值最小的一个点，由暗通道先验可知：</p><script type="math/tex; mode=display">J_{dark}(x)\approx0,I_{dark}(x)\neq0 \tag 5</script><p>即在清晰图像上取暗通道图$J_{dark}(x)$得到的是一张值全部近似为0的全黑的图，而在雾图像上取暗通道图$I_{dark}(x)$通常得到的不是一张全黑的图，即其值不全部近似为0。将该先验知识加入到式(4)中，即可排除未知量$J$相关项，此时式中只有透射率$t(x)$一个未知量，即可对透射率$t(x)$进行求解。</p><script type="math/tex; mode=display">\widetilde{t}(x)=1-\frac{1}{A}\min\limits_{y∈Ω(x)}[\min\limits_{c∈\{r,g,b\}}I^{c}(y)]=1-\frac{I_{dark}}{A} \tag 6</script><p>利用式(6)，即可通过在雾图像上取暗通道图从而求出某一窗口下的透过率值大小$\widetilde{t}(x)$，最终就可获取整张雾图像的透过率图$t(x)$。</p><p>在现实中即使是晴天，看远处的物体还是能感觉到雾的影响；另外，雾的存在让人类感到景深的存在。可以通过引入因子$ω$来控制去雾程度，1为完全去雾，0为不去雾。</p><script type="math/tex; mode=display">\widetilde{t}(x)=1-\omega\frac{I_{dark}}{A} \tag 6</script><p>获取大气光$A$和透射率$t(x)$后，经过模型（式(1)）计算即可获取去雾图像$J(x)$:</p><script type="math/tex; mode=display">J(x)=\frac{I(x)-A}{t(x)}+A \tag 7</script><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取暗通道图</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dark_channel</span>(<span class="params">img, kernel_size</span>):</span><br><span class="line">    b, g, r = cv2.split(img)  <span class="comment"># 计算三通道中的最小值</span></span><br><span class="line">    dc = cv2.<span class="built_in">min</span>(cv2.<span class="built_in">min</span>(r, g), b)</span><br><span class="line">    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (kernel_size, kernel_size))</span><br><span class="line">    dc_erode = cv2.erode(dc, kernel)  <span class="comment"># 将像素值替换为其窗口邻域中的最小值</span></span><br><span class="line">    <span class="keyword">return</span> dc_erode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 估计大气光A</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">atm_light</span>(<span class="params">img, dc</span>):</span><br><span class="line">    [h, w] = img.shape[:<span class="number">2</span>]</span><br><span class="line">    img_size = h * w</span><br><span class="line">    num_pix = <span class="built_in">int</span>(<span class="built_in">max</span>(math.floor(img_size / <span class="number">1000</span>), <span class="number">1</span>))  <span class="comment"># 需要提取的像素数量(0.1%)</span></span><br><span class="line"></span><br><span class="line">    dc_vec = dc.reshape(img_size)</span><br><span class="line">    im_vec = img.reshape(img_size, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    indices = dc_vec.argsort()  <span class="comment"># 升序排序并返回索引</span></span><br><span class="line">    indices = indices[img_size - num_pix::]  <span class="comment"># 提取出最亮的num_pix个像素的位置</span></span><br><span class="line"></span><br><span class="line">    atm_sum = np.zeros([<span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num_pix):</span><br><span class="line">        atm_sum = atm_sum + im_vec[indices[ind]]  <span class="comment"># 从对应位置取出原图像中的像素值</span></span><br><span class="line"></span><br><span class="line">    a = atm_sum / num_pix</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 估计透射率图t(x)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transmission_estimate</span>(<span class="params">img, a, kernel_size</span>):</span><br><span class="line">    omega = <span class="number">0.95</span>  <span class="comment"># 去雾因子，控制去雾程度</span></span><br><span class="line">    img_div_a = np.empty(img.shape, img.dtype)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># t(x) = 1 - ω * I_dark / a</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">        img_div_a[:, :, ind] = img[:, :, ind] / a[<span class="number">0</span>, ind]</span><br><span class="line">    transmission = <span class="number">1</span> - omega * dark_channel(img=img_div_a, kernel_size=kernel_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> transmission</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引导滤波</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guided_filter</span>(<span class="params">img, p, kernel_size, eps</span>):</span><br><span class="line">    <span class="comment"># i和p的均值平滑</span></span><br><span class="line">    mean_i = cv2.boxFilter(img, cv2.CV_64F, (kernel_size, kernel_size))</span><br><span class="line">    mean_p = cv2.boxFilter(p, cv2.CV_64F, (kernel_size, kernel_size))</span><br><span class="line">    <span class="comment"># i*p的均值平滑</span></span><br><span class="line">    mean_ip = cv2.boxFilter(img * p, cv2.CV_64F, (kernel_size, kernel_size))</span><br><span class="line">    <span class="comment"># 协方差</span></span><br><span class="line">    cov_ip = mean_ip - mean_i * mean_p</span><br><span class="line">    <span class="comment"># i*i的均值平滑</span></span><br><span class="line">    mean_ii = cv2.boxFilter(img * img, cv2.CV_64F, (kernel_size, kernel_size))</span><br><span class="line">    <span class="comment"># 方差</span></span><br><span class="line">    var_i = mean_ii - mean_i * mean_i</span><br><span class="line"></span><br><span class="line">    a = cov_ip / (var_i + eps)</span><br><span class="line">    b = mean_p - a * mean_i</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对a和b进行均值平滑</span></span><br><span class="line">    mean_a = cv2.boxFilter(a, cv2.CV_64F, (kernel_size, kernel_size))</span><br><span class="line">    mean_b = cv2.boxFilter(b, cv2.CV_64F, (kernel_size, kernel_size))</span><br><span class="line"></span><br><span class="line">    filtered = mean_a * img + mean_b</span><br><span class="line">    <span class="keyword">return</span> filtered</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改善透射率图t(x)</span></span><br><span class="line"><span class="comment"># 窗口提取暗通道时，窗口尺寸过大会在透射率图中出现明显的矩形区域</span></span><br><span class="line"><span class="comment"># 通过引导滤波平滑t(x),使其区域的过渡更加平滑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transmission_refine</span>(<span class="params">img, t, kernel_size=<span class="number">60</span>, eps=<span class="number">0.0001</span></span>):</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    gray = np.float64(gray) / <span class="number">255</span></span><br><span class="line">    refined = guided_filter(img=gray, p=t, kernel_size=kernel_size, eps=eps)</span><br><span class="line">    <span class="keyword">return</span> refined</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代入模型求解清晰图像</span></span><br><span class="line"><span class="comment"># J(x) = (I(x) - A) / t(x) + A</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover</span>(<span class="params">img, t, a, tx=<span class="number">0.1</span></span>):</span><br><span class="line">    res = np.empty(img.shape, img.dtype)</span><br><span class="line">    t = cv2.<span class="built_in">max</span>(t, tx)</span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">        res[:, :, ind] = (img[:, :, ind] - a[<span class="number">0</span>, ind]) / t + a[<span class="number">0</span>, ind]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    src = cv2.imread(<span class="string">&#x27;./img/in.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    img = src.astype(<span class="string">&#x27;float64&#x27;</span>) / <span class="number">255</span></span><br><span class="line">    dark = dark_channel(img=img, kernel_size=<span class="number">15</span>)</span><br><span class="line">    a = atm_light(img=img, dc=dark)</span><br><span class="line">    t = transmission_estimate(img=img, a=a, kernel_size=<span class="number">15</span>)</span><br><span class="line">    t_refine = transmission_refine(img=src, t=t, kernel_size=<span class="number">120</span>, eps=<span class="number">0.0001</span>)</span><br><span class="line">    j = recover(img, t_refine, a, <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    cv2.imwrite(<span class="string">&quot;./img/dark.png&quot;</span>, dark * <span class="number">255</span>)</span><br><span class="line">    cv2.imwrite(<span class="string">&quot;./img/t.png&quot;</span>, t * <span class="number">255</span>)</span><br><span class="line">    cv2.imwrite(<span class="string">&quot;./img/t_refine.png&quot;</span>, t_refine * <span class="number">255</span>)</span><br><span class="line">    cv2.imwrite(<span class="string">&quot;./img/J.png&quot;</span>, j * <span class="number">255</span>)</span><br><span class="line">    cv2.waitKey()</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dark-channel-prior/dc-3.png" alt="图3 RESIDE-indoor合成数据集上的测试结果"></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dark-channel-prior/dc-4.png" alt="图4 RESIDE-outdoor合成数据集上的测试结果"></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dark-channel-prior/dc-5.png" alt="图5 NH-Haze真实非均匀雾数据集上的测试结果"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>部分优点</p><ul><li>方法简单、体量较轻。</li><li>处理薄雾图像时效果比较理想。</li><li>受到物理模型和规律性先验知识的约束，某种程度上具有较强的鲁棒性，出现意料之外错误的可能性较低。</li></ul><p>部分缺点</p><ul><li>主要适用于雾图像中的颜色恢复，对于造成遮挡的浓雾难以增强浓雾区域模糊的细节。</li><li>先验知识无法覆盖所有场景，易将天空区域、场景中的白色物体等识别成雾。</li><li>需要一定程度的调参，参数的调整对于结果的好坏有重要影响。</li><li>基于大气散射模型，模型本身就强制假设雾霾分布均匀，透射率的散射系数被认为在不同空间位置上是一致的，然而空气中的雾颗粒分布是不均匀的，真实场景雾霾分布的随机性较强。</li></ul><p>暗通道先验在传统去雾算法中非常具有代表性。传统方法的优势在于可靠性高，因为得到的解是基于物理模型的，即使出现噪声放大和颜色畸变也是在解空间内的。劣势也在于此，物理模型是基于很多理想假设的，所以当假设失效时方法也就失效了（此时解空间内不存在理想解）。暗通道先验去雾（DCP）的优越性并不仅仅在于它的简洁有效性，更在于它揭示的是对于自然图像（无雾）的统计规律，如何找到更鲁棒更有效的图像先验和更精确的雾天成像建模是这个领域中的一个重要研究方向。</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像去雾 </tag>
            
            <tag> 暗通道先验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彼得·维兰德TED演讲(I will change the world)--异形：普罗米修斯</title>
      <link href="/2024/09/22/prometheus-peter-weyland-ted-talk/"/>
      <url>/2024/09/22/prometheus-peter-weyland-ted-talk/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="彼得·维兰德TED演讲-I-will-change-the-world-—异形：普罗米修斯"><a href="#彼得·维兰德TED演讲-I-will-change-the-world-—异形：普罗米修斯" class="headerlink" title="彼得·维兰德TED演讲(I will change the world)—异形：普罗米修斯"></a><a href="https://www.youtube.com/watch?v=a1E_mxgqngI">彼得·维兰德TED演讲(I will change the world)—异形：普罗米修斯</a></h1><p> <strong>I am a law only for my kind, I am no law for all.</strong></p><p><strong>我只为自己制定法则，我不遵循众生的法则。</strong>——出自尼采《查拉图斯特拉如是说》，反映了尼采的个体主义思想以及对普遍道德和普遍规则的质疑。尼采认为每个人都是独特的，遵循属于自己的价值观和生活方式，不应该被一套普遍的、适用于所有人的道德体系所束缚。他在哲学中反对所谓的“普遍真理”或“道德绝对性”，认为真正强大、自由的人是超越这些外部规则的，他们不接受社会对他们强加的道德准则，而是根据自己的内在力量和意志，制定属于自己的规则和生活方式。体现了尼采对“超人”概念的推崇，超人是能够超越传统道德束缚、为自己制定法则的人。</p><p>T.E. Lawrence, eponymously of Arabia, but very much an English man favored pinching a burning match between his fingers to put it out.</p><p>T·E· 劳伦斯，人称“阿拉伯的劳伦斯”，其实是个地道的英国人，他很喜欢用手指掐灭燃烧的火柴。</p><p>When asked by his colleague, William Potter, to reveal his trick how is it he so effectively extinguished the flame without hurting himself whatsoever, Lawrence just smiled and said, “The trick, Potter, is not minding it hurts.”</p><p>他的同事威廉·波特问他有什么诀窍能如此高效地熄灭火焰还能免受灼伤，劳伦斯笑着说“诀窍在于不要在乎疼痛。”</p><p>The fire that danced at the end of that match was a gift from the Titan, Prometheus, a gift that he stole from the gods, who were terrified of what we might do with it were it to fall into our hairy little paws.</p><p>火柴上跳动的火焰是天神普罗米修斯送给人类的礼物，一件他从众神那里偷来的礼物，众神感到害怕，他们不知道当我们这些弱小的人类得到火种之后会做出些什么。</p><p>When Prometheus was caught and brought to justice for his theft, the gods, well, you might say they overreacted a little.</p><p>当普罗米修斯被抓到并为自己的偷盗行为付出了代价，众神的反应在我们看来可能有点过度了。</p><p>The poor man was tied to a rock as an eagle ripped through his belly and ate his liver over and over, day after day, ad infinitum.</p><p>可怜的普罗米修斯被绑在石头上，老鹰划破他的肚皮，啄食他的肝脏，反反复复，日复一日，永无止境。</p><p>All because he gave us fire, our first piece of technology: Fire.</p><p>只因他给予我们火种，我们人类第一项真正意义上的科技：火。</p><p>Such a very long time ago, which begs the question, what have we done with it?</p><p>这就引出了以下问题：自从人类取得火种以来，都做到了什么？</p><p>100,000 BC: Stone tools.</p><p>公元前10万年：石器。</p><p>4,000 BC: The wheel.</p><p>公元前4千年：轮子。</p><p>800 BC: Sundial.</p><p>公元前8百年：日晷。</p><p>9th century AD: Gunpowder. Bit of a game-changer, that one.</p><p>公元9世纪：火药。一项改变历史的技术。</p><p>1441: The printing press. Only slightly less impactful.</p><p>1441年：印刷术。有着近乎冲击性的影响。</p><p>19th century: Steam engine. Railway. Eureka! The light bulb!!</p><p>19世纪：蒸汽机、铁路。尤里卡！电灯泡出现了！！</p><p>20th century: The automobile, television, nuclear weapons, space craft, internet.</p><p>20世纪：汽车、电视机、核武器、航天飞机、互联网。</p><p>21th century: Biotech, nanotech, fusion and fission and M-theory and that was just the first decade.</p><p>21世纪：生物技术、纳米技术、聚变、裂变还有M理论，而这还仅仅是前十年的成果。</p><p>We are now 3 months into the year of our Lord, 2023.</p><p>我们现在已经进入2023年3个月了。</p><p>At this moment in our civilization, we’re on the verge of terraforming planets undiscovered just a decade ago.</p><p>在我们文明的这一刻，我们正处于对十年前尚未发现的行星进行地球化改造的边缘。</p><p>We have identified the genetic chain of events behind 98% of cancers.</p><p>98%的癌症基因链已被确认。</p><p>A chain we have broken effectively curing them.</p><p>现在我们可以治愈癌症。</p><p>We can create cybernetic individuals who, in just a few short years, will be completely indistinguishable from us.</p><p>我们可以创造出仿生人，假以时日，他们将和人类别无二致。</p><p>Which leads to an obvious conclusion: We are the gods now.</p><p>因此我们可以得出一个结论：现在我们就是上帝。</p><p>I haven’t been struck down, I’ll take that to mean I’m right.</p><p>既然来自奥林匹斯山的雷霆还未将我击倒，那我就将其视为结论正确的证明。</p><p>We wield incredible power.</p><p>我们拥有不可思议的力量。</p><p>The power to transform, to destroy and to create again.</p><p>足以改变、毁灭以及创造一切的力量。</p><p>The question of course before us is, “What the hell are we supposed to do with this power?” or more importantly one should ask, “What are we allowed to do with this power?”</p><p>而问题是，“我们究竟该如何运用这种力量？” 或者更该思考 “我们被允许使用这种力量做什么？”</p><p>The answer to that my friends… is nothing.</p><p>对此的答案，我的朋友们，是无所禁忌。</p><p>Rules, restrictions, laws, ethical guideline, all but forbidding us from moving forward.</p><p>规则、限制、法律、道德准则，这些都阻碍着我们前进。</p><p>Well, where were the ethics during the Arabian conflicts?</p><p>中东冲突期间道德伦理在哪里？</p><p>Why are rules preventing us from feeding impoverished cultures?</p><p>为什么规则阻止我们帮助落后的文明？</p><p>How is there a law that states if we build a man from wires and metal, a man who will never grow old, who will never feel the heat of a star or the cold of the moon, how is the creation of such an incredible individual considered unnatural?</p><p>凭什么法律禁止我们用电线和金属来创造一个人，一个永生的人，一个永远不会感受到星光的温暖和月光清冷的人，凭什么创造出如此非凡的个体要被视为是反自然的？</p><p>The answer to all these questions is simple.</p><p>这一切的答案很简单。</p><p>These rules exist because the people who created them were afraid of what would happen if they didn’t.</p><p>规则之所以存在，是因为创造他们的人害怕没有规则的世界。</p><p>Well, I am not afraid.</p><p>而我不害怕。</p><p>For those of you who know me, you will be aware by now that my ambition is unlimited.</p><p>对于那些了解我的人，你们可能已经知道，我的雄心是无边的。</p><p>You know that I will settle for nothing short of greatness, or I will die trying.</p><p>我只会追求极致，或是死在这条路上。</p><p>For those of you who do not yet know me, allow me to introduce myself: My name is Peter Weyland.</p><p>对于那些还不认识我的人，请允许我自我介绍：我的名字叫彼得·维兰德。</p><p>And if you’ll indulge me, I’d like to change the world.</p><p>如果任我而为，我将改变世界。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 演讲 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>追逐梦想，并不是人生的全部--哈维穆德学院2024年毕业致辞</title>
      <link href="/2024/09/20/harvey-mudd-2024-commencement-address/"/>
      <url>/2024/09/20/harvey-mudd-2024-commencement-address/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="追逐梦想，并不是人生的全部-哈维穆德学院2024年毕业致辞"><a href="#追逐梦想，并不是人生的全部-哈维穆德学院2024年毕业致辞" class="headerlink" title="追逐梦想，并不是人生的全部 | 哈维穆德学院2024年毕业致辞"></a><a href="https://www.bilibili.com/video/BV1nZ421W7HS/?spm_id_from=333.999.0.0&amp;vd_source=c5d32b76b7f25615fe49ce8530034071">追逐梦想，并不是人生的全部 | 哈维穆德学院2024年毕业致辞</a></h1><p><strong>Grant Sanderson (<a href="https://www.youtube.com/@3blue1brown">3Blue1Brown</a>)</strong></p><p>Thank you, President Nembhard, for that very warm introduction and for inviting me.</p><p>感谢 Nembhard 校长如此热情的介绍和邀请。</p><p>And thank you to the class of 2024 for including me in such a special day.</p><p>感谢 2024 届的同学们邀请我参加如此特殊的日子。</p><p>I had the joy of getting to know many of you last year on this visit, and I distinctly remember coming away with the feeling that a future in your hands is a bright future indeed.</p><p>去年来访时我有幸结实了你们中的许多人，我清楚地记得当时的感觉是，未来握在你们手中着实是光明的。</p><p>For those in the audience who don’t know who I am, I focus on making videos about mathematics with an emphasis on visualizations.</p><p>如果有同学不认识我的话，我专注于制作侧重可视化的数学视频。</p><p>It’s a weird job.</p><p>这工作还挺怪的。</p><p>I do love it though, and it’s no exaggeration to describe it as a dream job.</p><p>但我确实很喜欢这份工作，而且毫不夸张地说这是一份梦想中的工作。</p><p>A common cliche is for someone who was lucky enough to land in a dream job to stand confidently in front of a group of fledgling  graduates and to compel them to follow their dreams.</p><p>那些有幸找到了一份梦寐以求的工作的人，自信地站在一群初出茅庐的毕业生面前，劝说他们追随自己的梦想，已经是老生常谈了。</p><p>Frankly, on its own, I don’t think this is very good advice.</p><p>坦率的讲，就其本身而言，我认为这个建议并不是很好。</p><p>To be clear, there is truth behind the cliche.</p><p>当然，老生常谈的背后自有其道理。</p><p>It is true that those who make the biggest ripples are the ones who are fueled by passion.</p><p>诚然，被激情驱使的人会激起最大的浪花。</p><p>It is true that the life you live is much more enjoyable if you can find something doing what you love.</p><p>诚然，如果你能找到自己喜爱的事情，生活会更加愉快。</p><p>And it’s also true that you shouldn’t feel shackled by societal constraints.</p><p>诚然，你也不会觉得被社会的条条框框所束缚。</p><p>But for one thing, not everyone has a pre-baked dream sitting there waiting to be followed.</p><p>但是首先，并不是每个人都有一个现成的要追寻的梦想。</p><p>That’s completely okay.</p><p>这完全没有问题。</p><p>And even if you are one of the lucky ones who has a passion that you want to roll into a career, I think there are a few pragmatic concerns that don’t always fit very neatly into an inspirational speech that are required to make this actually work.</p><p>即使你很幸运，想要将热爱作为事业，我认为为了真正实现这一目标，也需要一些务实的考虑，这可能和励志的演讲氛围不太搭。</p><p>Now, I know I’m  talking to a very nerdy audience, so I’m tempted to describe my aims here a little bit more mathematically precisely, where in the vector space of all possible advice. If you consider the follow your dreams vector, I want to explore its orthogonal subspace.</p><p>我知道在座的各位都是知识精英，所以我打算将要表达的思想用数学语言描述得更精确一些，在由所有可能建议组成的向量空间中，我想讨论的是追梦向量的正交子空间。</p><p>Maybe though it’s better if i just start with a story.</p><p>也许还是从故事讲起好了。</p><p>Before i entered college, i was one of those who knew what I wanted to major in.</p><p>进入大学之前，我就知道自己想学什么专业。</p><p>There’s no surprise here: it was math.</p><p>毫无疑问那就是数学。</p><p>This is a topic that I had loved for as long as I can remember.</p><p>这是我从小到大都喜欢的科目。</p><p>When I was in college, I was plenty seduced by the adjacent field of computer science and programming, and I would spend my summers interning at software startups, but I distinctly remember coming back at the end of each of those summers and thinking,  man, you know what, I really want is to spend more time doing math.</p><p>大学时，我也曾被计算机科学和编程这些相近的领域所吸引，我暑假时会到软件初创公司实习，但我清楚地记得，每到暑假结束回来的时候，我都在想，哎，其实我更想做的就是多花些时间搞数学。</p><p>So I had a passion; I had something I would want to follow, but in hindsight, that passion was a lot more arbitrary and maybe a little more self-centered than I would have liked to admit at the time.</p><p>我意识到我有一份热爱，我有我想要追随的东西，然而回想起来，那种热情其实并没有太多的逻辑支持，或许我比我当时原意承认的要更自我中心。</p><p>Why did I love math?</p><p>为什么我喜欢数学？</p><p>If I’m honest, I think it had its roots in the fact that when I was young, the adults emphasized this as an important topic to learn, and they told me I was good at it. This makes me spend more time on it, spending time with something is how you get better at something, and that kicks off a positive feedback loop, in both senses of the word positive feedback.</p><p>老实说，我觉得这源自于我小时候，大人总强调学好这门学科很重要，他们还跟我说我擅长数学，于是我花了更多时间在数学上，时间花在哪儿，成果就出在哪儿，这就触发了正反馈循环，正面的反馈促成了良性的循环。</p><p>Now, as time went on, I do believe it became less about perceptions.</p><p>到了后来，我相信这和别人的评价越来越无关了。</p><p>When I was in college, I remember genuinely enjoying the aesthetic delights that beautiful math problem-solving has to have.</p><p>我记得在大学时自己开始真正享受解决数学问题所带来的美学乐趣。</p><p>But thinking of it as a career ambition, not just a bobby, this had the fatal flaw that I was viewing the world through a lens of what I personally enjoyed, not giving enough weight to a plan for how exactly it would add value to others. </p><p>但是要视其为职业抱负而非仅仅是爱好，却存在一个致命的缺陷：我只是从个人喜好的角度来看待世界，而未足够重视该如何确实地为他人提供价值。</p><p>I don’t know if you’ve felt it yet, but today marks a day in your life when a fundamental goal changes.</p><p>我不确定你们是否已经意识到了，今天标志着你们人生中基本目标的改变。</p><p> When you are a student, the fundamental goal is to grow, to learn, to become better.</p><p>当你还是学生时，基本目标就是成长、学习、进步。</p><p>So many institutions and structures around you are there to support you in growing, learning, and getting better, and to reward you for doing so.</p><p>你身处的学校、院系、组织都在支持你成长、学习、进步，并对此加以奖励。</p><p>In life after college, the goal changes a little, and success hinges on how effectively you’re able to add value to others.</p><p>而大学毕业后，目标就有些变化了，成功与否取决于你能否有效为他人创造价值。</p><p>These aren’t at odds with each other; in fact, they go hand in hand.</p><p>这两者并不矛盾，实际上是相辅相成的。</p><p>You’re much better positioned to make a difference if you’re armed with expertise and if you spend your life honing that expertise. </p><p>如果你有一技之长，并在一生中不断精进它，那你就能更好地发挥影响力。</p><p>But there is a big difference between personal growth being the end in and of itself versus being a means to an end.</p><p>不过，将个人的发展本身作为终极目标，还是达到目标的手段， 两者是有很大的区别的。</p><p>By way of comparison, I also loved the violin when I was growing up.</p><p>打个比方，我也从小就拉小提琴。</p><p>And let’s take a moment to imagine two distinct music students.</p><p>我们花点时间想像两位截然不同的音乐生。</p><p>I’m going to name them Paganini and Taylor.</p><p>要不管他们叫帕格尼尼和泰勒吧。</p><p>Both of them are talented, very talented, but Paganini pushes for technical excellence.</p><p>两个人都很有天赋，都是天才，帕格尼尼追求技术的卓越。</p><p>He tries to perfect virtuosically challenging pieces.</p><p>他在演奏技巧上精益求精，喜欢挑战性极高的乐曲。</p><p>Taylor strives to write music that speaks to people, that resonates with them emotionally.</p><p>而泰勒努力创作能打动人们，在情感上产生共鸣的音乐。</p><p>Now in a music school, Paganini is going to get the better grades every time.</p><p>在音乐学校里，帕格尼尼每次都会拿到更好的分数。</p><p>He’s always going to get the better position.</p><p>总是会得到更好的排名。</p><p>But pursuing music careers, Taylor’s at the clear advantage.</p><p>但在追求音乐事业方面，泰勒则明显处于优势地位。</p><p>My first piece of advice, something I would have told myself if I could go back in time and be in the seat where you are now, is that if you have a passion that you want to incorporate into a career, take a step back and recognize the fact that this is a passion that grew in a time of your life when the goal was to learn and to grow.</p><p>如果可以回到过去，坐在你们现在的位置上的话，我给自己的第一个建议是，如果你想要将热爱作为志业的话，请稍等一下，要认识到，你形成这份热爱时的人生阶段主要目标是学习和成长。</p><p>But you are transitioning to a period when the primary aim shifts to adding value to others.</p><p>而你正要过渡到一个新的阶段，主要目标是为他人创造价值。</p><p>The cliche to follow your dreams overlooks how critical it is that the dreams you have are about something more than yourself.</p><p>追梦的老生常谈所忽略的关键点在于，你的梦想不仅仅关乎你自己。</p><p>Those who excel in their first jobs are the ones who make life easier for everyone around them, even when it involves doing things they don’t love.</p><p> 在第一份工作中表现出色的人，会让周围的人生活得更轻松，尽管他们做的实际工作不一定是他们的热爱。</p><p>Those who excel in PhD programs are the ones who recognize how their work fits into a broader research community, not just the ones who view it as the next chapter in school.</p><p>那些在博士项目中表现突出的人，往往能意识到自己的工作，能在更广泛的研究领域中扮演什么角色，而不仅仅是把读博视为上学的一种延续。</p><p>The successful entrepreneurs are the ones who have a relentless focus on making sure that what they have to sell is what people want to buy, not just those who are looking to make something impressive.</p><p>成功的企业家，往往不懈地专注于确保自己所售的产品正好是人们想要购买的，而不仅仅希望创造厉害的产品。</p><p>Now, for some people, when you hear the words “follow your dreams,” it falls flat because you don’t have a defining passion.</p><p>“追逐梦想”这句话，对有些人来讲，显得平淡无奇，因为他们没有明确的梦想。</p><p>Like I said earlier, that’s completely OK.</p><p>就想我之前说的，这完全没问题。</p><p>If anything, it might put you in an advantage.</p><p>说不定，这反而会给你带来优势。</p><p>I think you’ll do just as well if you start by seeking out opportunities where the skills that you’ve developed here intersect with adding value to others, and from there, I promise the passion will follow.</p><p>我认为，如果你开始利用自己积累的技能，为他人创造价值，那你同样会收获成功，从那时起，我向你保证，激情会随之而来。</p><p>One of the best piece of advice I remember receiving from a friend many years ago is that action precedes motivation. </p><p>多年前一位朋友给我的最好建议是行动本身先于动机。</p><p>Now, in my own story, what happened after college involves a fair bit of luck, but luck can come in a lot of different forms, and I think with a little bit of foresight, you can actually avoid having to rely on chance in quite the same way.</p><p>在我自己的故事里，大学毕业后的事情，可以说十分地幸运，当然，幸运也有许多不同的表现形式，或许，稍微把眼光放长远一点，你其实就可以避免像我那样，完全依赖随机的运气。</p><p>There’s a post I like on the webcomic XKCD that shows a man standing on a stage, and he has bags of cash surrounding him.</p><p>我喜欢网络漫画《XKCD》上这样的一篇，有一个人站在舞台上，他周围堆着大包小包的现金。</p><p>“Never stop buying lottery tickets,” he says.</p><p>他说“永远不要放弃买彩票。”</p><p>“No matter what people tell you, I failed again and again, but I never gave up, and here I am as proof that if you put in the time, it pays off.”</p><p>“无论别人怎么说，我一次又一次失败，但我从未放弃，此刻的我就是证明，只要付出时间，就会有回报。”</p><p>The caption notes that every inspirational speech should come with a disclaimer about survivorship bias.</p><p>旁注是，每个励志演讲都应附带关于幸存者偏差的免责声明。</p><p>The obvious way that “Follow Your Dreams” is susceptible to survivorship bias is that for all of the high-risk, high-reward paths, things like professional athletics, starting a social media company, making a career in the arts, it’s only the few who rise to the top who are in a position to give that advice at all.</p><p>“追随梦想”容易受到幸存者偏差影响的显见之处在于，对于所有高风险，高回报的职业道路来说，例如职业运动员、创建社交媒体公司、在艺术领域发展事业，只有少数成功登顶的人才有资格给予建议。</p><p>But there’s also a more subtle way that survivorship bias applies here.</p><p>但这里，幸存者偏差还有一种更微妙的体现。</p><p>It’s not just about the odds of winning a particular game.</p><p>这并不仅仅关乎某种游戏的胜率。</p><p>It has to do with whether the game you choose to play, meshes well with the way that the future unfolds.</p><p>而更重要的是，你所选择的游戏，是否与世界未来的发展相契合。</p><p>If you were a software enthusiast in the late 1980s, you would be well-poised to ride the dot-com boom in the decade that followed.</p><p>如果你是一个1980年代末的软件爱好者，那么在接下来的十年，你将很可能乘上互联网的热潮。</p><p>If you were someone with a niche interest in and knack for film production, you would find yourself with an unexpected opportunity when YouTube and other film sharing  platforms started to rise in prominence.</p><p>如果你对视频制作有特别的兴趣和技巧，那么当YouTube等视频分享平台开始崛起时，你会发现自己赶上了意想不到的机遇。</p><p>When I was finishing my undergrad, one of these ways that I scratched that itch to do more math was to hack together a very rudimentary Python library for making math visualizations, and I used it to make a couple videos about neat proofs and problems that I enjoyed and posting them online.</p><p>当我快要完成本科学业时，我满足自己的数学瘾的一种方式是动手码出了一个非常粗糙的Python库，用于数学的可视化，然后用它制作了几个视频，讲述我喜欢的有趣证明和问题还发到了网上。</p><p>I was not planning for this to be a career.</p><p>我当时并没有计划把这当作职业。</p><p>I had an appreciation for how valuable personal projects are, but it didn’t go much beyond that.</p><p>虽然我深知个人项目的价值所在，但这仅是一个小项目。</p><p>This led to conversations with Khan Academy, a group I had great respect for, and it turned into a job there, making more lessons online.</p><p>这促成了我与可汗学院的对话，我非常尊敬这个组织，我因此得到了一份工作，为他们制作更多在线课程。</p><p>In the meantime, I continued my own channel as a side hobby, and it didn’t blow up, but there was very modest growth of others who enjoyed the same kind of visualizations that I did, and I saw it in just a steady tick up in the audience size.</p><p>与此同时，我继续将自己的频道当作一个业余爱好， 虽然没有大火，但是和我同样喜欢可视化的人慢慢变多，我看到观众的规模在稳步增长。</p><p>Now my original plan, I think, was to spend a year or two doing this online education stuff, working at Khan Academy, and maybe returning to do a PhD.</p><p>我原本的计划，是在可汗学院工作一两年，做这件在线教育的事儿，然后没准回去读个博士。</p><p>But as time went on, something between the gratitude that I saw from many students around the planet for the lessons I put out and the slow and steady growth on my own channel let me to doubling down and forming a somewhat unorthodox career in online lessons and math visualization.</p><p>但随着时间的推移，来自世界各地的学生对我发布的课程所表达的感激之情，以及我自己的频道缓慢而稳定的增长，促使我一不做二不休，形成了我现在做的，在线课程加数学可视化，这个非传统的职业。</p><p>Now looking back, it would feel very incomplete if I were to somehow ascribe the success that I found, to the extent there was any, to the fact that I was following a dream, pursuing a passion.</p><p>回顾过去，非常不完整的一个说法是，我自己所获得的成功（如果这算得上成功）仅仅是因为我追求了梦想，投身于热爱。</p><p>Passion plays into it. You can’t have good lessons without a teacher who cares, but we can’t ignore the other factors at play.</p><p>热爱确实是一个因素。没有用心的老师就不可能有好的课程，但是我们也不能忽视其他的影响因素。</p><p>I already brought up the biggest one: success is a function of the value you bring to others, so a pursuit equally fueled by love, but which did noting to help or to entertain people, just wouldn’t had a chance to work.</p><p>我已经提到了最重要的一点：成功是你为他人带来价值的函数，一份同样源于热爱的事业，如果无法帮助或娱乐他人，那也注定没有可能成功。</p><p>But another factor I want to focus on is how I was very lucky with the timing.</p><p>另一个我想强调的因素是，我在时机上非常幸运。</p><p>If I had been born ten years earlier, I don’t think I could have reached the same number of people posting lessons on a much more infant version of the internet, where there was less infrastructure that could have existed to help form a career doing so.</p><p>如果我早生十年，我自认为在早起的互联网上发布课程并不可能触及到同样数量的观众，那时的基础配套条件更少，难以维系这样一份职业。</p><p>If I had started ten years later, the space would have been a lot more saturated.</p><p>而如果我再晚十年开始，这个领域将会更加饱和。</p><p>So another piece of advice that I’d like to offer, another little ingredient that makes following your dreams a little more likely to work out, is to ask yourself waht’s possible now that wasn’t possible ten years ago and which might get harder ten years from now?</p><p>因此，我想提供的另一个建议，另一个让追随梦想更可能成真的小配方，就是想一想，有什么现在可以实现的事情，十年前并不可能而十年后又将会变得更难呢？</p><p>There are more opportunities in a less crowded landscape; there are more chances to grow if you’re part of a rising tide,  but this requires pushing past the inevitable discomfort that comes from following a path that has little to no precedent.</p><p>在人少的领域里总有更多机会，处在不断增长的潮流中，也就有更多成长的机会，但这需要你克服随之而来的不可避免的不适感，因为你所走的道路几乎没有前例可循。</p><p>Now, next, I want to take a moment to talk about whose dreams you should be thinking about because it’s not just your own.</p><p>现在，接下来，我想花一点时间谈谈你应该考虑的是谁的梦想，不仅仅是你自己的。</p><p>When I was visiting Harvey Mudd last year, I had the pleasure of talking to one of the gems in your math department, Talithia Williams, and I asked her, “Hey, what made you pursue math in the first place?”</p><p>去年我去 Harvey Mudd 时，我有幸和你们数学系的明星人物 Talithia Williams 聊了聊，我问到“话说你当初为什么选择了数学？”</p><p>She had a very clear story.</p><p>她的故事非常清晰。</p><p>She told me she hadn’t thought about it very much until one distinct day in her high school calculus class, her teacher Mr. Dorman pulled her aside and said, “Talithia, you’re really good at this. You should consider majoring in math.”</p><p>她说，她开始并没有这种想法，直到有一天，在她高中的微积分课上，她的老师 Dorman 先生，把她拉到一边说“Talithia，你真的很擅长数学，你应该考虑主修数学。”</p><p>Evidently, she had never thought about it before, but that one comment was enough to knock over the first in a series of dominoes that led to a very flourishing career in the topic.</p><p>她以前从未考虑过这种可能性，但这一句话足以触发一连串多米诺骨牌，让她开启在数学领域蒸蒸日上的事业。</p><p>Over the years, I’ve asked a lot of mathematicians the same question, and you would be shocked how often I hear a very similar answer: there was this one particular teacher, and one seemingly simple thing that they did that was the beginning in a long series of encouragements.</p><p>多年来，我问过很多数学家相同的问题，令人惊讶的是，我经常听到非常类似的回答：有这么一位老师，做了一件看似简单的事情，却是一连串激励的开始。</p><p>Never underestimate just how much influence you can have on others, especially the one who are younger that you are.</p><p>请不要低估自己对他人的影响力，尤其是比你年轻的人。</p><p>Growing older is a process of slowly seeing the proportion of people around you who are younger that you are rise inexorably closer to 100%.</p><p>随着年龄的增长，你会慢慢看到，周围比你年轻的人的比例，不可避免地逐渐接近 100%。</p><p>As this happens, you stand to have as much influence by shaping the dreams of those behind you as you do by following those of your own.</p><p>在这个过程中，你通过塑造身后那些人的梦想所发挥的影响力，将与追随自己的梦想时一样大。</p><p>And as a very last point, the biggest risk in the “following your dreams” cliche is the implication that there’s one static target point at all.</p><p>最后我想说的一点是，“追逐梦想”这一陈词滥调中最大的风险，是它暗示存在一个固定的目标点。</p><p>In the next 10, 20, 30 years, the world around you is going to change a lot, and those changes are going to be unpredictable.</p><p>在接下来的10,20,30年中，你周围的世界将发生很多变化，那些变化将会是无法预测的。</p><p>I hardly need to emphasize this point: you are the class who spent your formative tansition from high school to college - under a pandemic.</p><p>我几乎不需要强调这一点：这届同学从高中到大学的重要阶段是在疫情期间度过的。</p><p>But it’s not just the world around you.</p><p>不仅仅是你周围的世界。</p><p>Tonight when you’re celebrating your graduation and hopefully remembering to celebrate Mother’s Day as well, take a few moments to ask the people who are older than you how they’ve changed, how their personalities, how their value systems have changed since they were a student.</p><p>今晚当你们庆祝毕业时，希望你们也别忘了庆祝母亲节，花点时间问问比你年长的人，他们发生过什么变化，从学生时代到现在，他们的个性、价值观有怎样的变化。</p><p>You’ll notice that essentially all of them have an answer, which suggests you have every reason to expect there’s going to be something fundamental about you that changes as well in the coming decades, probably unpredictably.</p><p>你会发现，他们每个人都有自己的答案，这说明你有充分的理由相信在未来的几十年里，你也会发生一些根本上的改变，谁也不知道会变成什么样。</p><p>Almost everyone I know has undergone some kind of shift since college.</p><p>我认识的几乎每个人在大学毕业后都经历过某种转变。</p><p>Some came to place more value on having a family than they used to.</p><p>有些人开始更重视家庭。</p><p>Some shifted from a trajectory that was oriented towards an academic career to going into industry.</p><p>有些人的职业轨迹，从学术界转向业界。</p><p>Some went the other way around and after spending some time in industry returned to grad school.</p><p>有些人则反过来，先在业界工作了一段时间，再回到研究生院深造。</p><p>And so, so many of them have jobs that simply didn’t exist at the time of their graduation.</p><p>而且，他们中很多人的工作，在他们毕业时还根本就不存在。</p><p>So rather than having any one paticular goal that defines who you are, you’ll take better advantage of whatever the future has to offer you if you remain nimble and if you’re responsive to the changes in the world and if you anticipate change within yourself.</p><p>所以与其让某个特定的目标决定你是谁，要想利用好未来所能提供的各种机会，你应该保持灵活，积极响应世界的变化，并预计自己会发生的变化。</p><p>My final piece of advice is to not treat passion as something to follow.</p><p>我的最后一条建议是，不要将热爱视为追随的目标。</p><p>Think of it as an initial velocity vector.</p><p>而要把它看作一个初始速度向量。</p><p>It gives a clear direction to point yourself, and loving what you do can have you move quickly.</p><p>它为你指明了一个方向，对工作的热爱又可以让你迅速行动。</p><p>But you should expect, and you should even hope, that the specific direction that you’re moving in changes based on the force vectors around you.</p><p>但你应该准备好，甚至应该期待，自己前进的具体方向，会因周围的力量而改变。</p><p>Now, in these unpredictable decades that come, your generation is the one that holds more sway than any other over how it unfolds, and you, the graduating class of Harvey Mudd, represent some of the most talented and thoughtful minds in that generation.</p><p>在未来不可预知的几十年里，你们这一代人比任何人都更能左右未来的发展，你们 Harvey Mudd 的毕业生，代表了这一代人中最有才华、最有思想的人。</p><p>Influence is not distributed uniformly in the population, and I, for one, would feel a lot more comfortable if it was you who were at the helm, guiding this crazy ship that we’re all riding.</p><p>影响力在人群中并非是均匀分布的，就我个人而言，如果我们所在的这艘疯狂的巨轮是你们在掌舵的话，我会感到更加放心。</p><p>If you step into the next chapter of life with an implacable focus on adding value to others, you’re more likely to be the ones at the helm.</p><p>如果你在踏入人生的下一个篇章时，能够坚定不移地为他人创造价值，那么你就更有可能成为掌舵者。</p><p>If you recognize that action precedes motivation, you’re more likely to be at the helm.</p><p>如果你意识到动起来比找动力重要，那么你就更有可能成为掌舵者。</p><p>And if you ask what’s possible now that wasn’t ten years age, you’re more likely to be at the helm.</p><p>如果你关注现在有哪些十年前还做不到的事，那么你就更有可能成为掌舵者。</p><p>If you appreciate just how much power you have to shape the lives of the generation that follows you, you’re more likely to be at the helm.</p><p>如果你意识到你有多大的能力，可以塑造你之后一代人的人生，那么你就更有可能成为掌舵者。</p><p>And if you remain adaptable to a changing world, treating passion not as a destination but as a fuel, following not dreams but opportunities, you’re more likely to be at the helm.</p><p>如果你能适应不断变化的世界，不把热爱视为终点，而是一种动力，追随机会而非梦想，那么你就更有可能成为掌舵者。</p><p>One final time, would everyone please join me in congradulating the class of 2024 on what they’ve done to get here, and make some noise to let them know how excited we are to see where they go from here.</p><p>最后，请大家和我一起祝贺2024届的同学们为走到现在所做出的努力，让我们热烈鼓掌，让他们知道我们多么期待看到他们未来的发展。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 演讲 </tag>
            
            <tag> 3Blue1Brown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金字塔原理--读书笔记</title>
      <link href="/2024/09/18/pyramid-theory/"/>
      <url>/2024/09/18/pyramid-theory/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="金字塔原理"><a href="#金字塔原理" class="headerlink" title="金字塔原理"></a>金字塔原理</h1><p>基本概念</p><ul><li>是一种重点突出、逻辑清晰、层次分明、简单易懂的思考方式、沟通方式、规范动作。</li><li><p>基本结构：<code>结论先行</code>，<code>以上统下</code>，<code>归类分组</code>，<code>逻辑递进</code>。</p><ul><li>先重要后次要</li><li>先总结后具体</li><li>先框架后细节</li><li>先结论后原因</li><li>先结果后过程</li><li>先论点后论据</li></ul></li><li><p>训练表达者：</p><ul><li>关注、挖掘受众意图、需求点、利益点、关注点和兴趣点。</li><li>想清说什么（内容），怎么说（思路、结构）。</li></ul></li><li><p>达到的沟通效果：观点鲜明、重点突出、思路清晰、层次分明、简单易懂，让受众有兴趣，能理解，记得住。</p></li><li>具体做法：<code>自上而下表达</code>，<code>自下而上思考</code>，<code>纵向总结概括</code>，<code>横向归类分组</code>，<code>序言讲故事</code>，<code>标题提炼思想精华</code>。</li></ul><h2 id="第1篇-表达的逻辑"><a href="#第1篇-表达的逻辑" class="headerlink" title="第1篇 表达的逻辑"></a>第1篇 表达的逻辑</h2><h3 id="第1章-为什么要使用金字塔结构"><a href="#第1章-为什么要使用金字塔结构" class="headerlink" title="第1章 为什么要使用金字塔结构"></a>第1章 为什么要使用金字塔结构</h3><h4 id="归类分组"><a href="#归类分组" class="headerlink" title="归类分组"></a>归类分组</h4><p>大脑会将其认为具有<code>“共性”</code>的任何事物组织在一起。“共性”指的是具有某种相似的共同点或所处的位置相近等。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/pyramid-theory/pyramid-1.png" alt="图1-1“共性”的一个例子"></p><p>看到图1-1中的6个黑点，多数人都会下意识将其分成2组，每组3个。造成这种印象的原因主要是，有些黑点间的距离比另一些黑点间的距离大。</p><blockquote><p>湖泊    │    糖</p><p>靴子    │    盘子</p><p>女孩    │    袋鼠</p><p>铅笔    │    汽油</p><p>宫殿    │    自行车</p><p>铁路    │    大象</p><p>书本    │    牙膏</p></blockquote><p>几组彼此互不关联的词，通过联想将每组中的两个词建立<code>联系</code>，如：糖在湖水中溶解，或靴子立在盘子上等，然后将右侧的词盖住，就可以根据左侧词轻松<code>联想</code>到右侧的词。</p><p>人一次能够理解的思想或者概念的数量是有限的。乔治·A·米勒（《奇妙的数字7±2》）认为大脑的短期记忆无法一次容纳约7个以上的记忆项目。这就意味着，当大脑发现需要处理的项目超过4个或5个时，就会开始将其归类到不同的逻辑范畴中，以便于记忆。</p><blockquote><p>葡萄  橘子  牛奶  咸鸭蛋  土豆 </p><p>苹果  鸡蛋  酸奶  胡萝卜</p></blockquote><p>假设购物清单中有以上食物，同时记住以上9种食物比较困难，但如果能对其进行<code>归类</code>，如图1-2，就很有可能记住所有9种食物。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/pyramid-theory/pyramid-2.png" alt="图1-2 对各项目进行归类"></p><p>分类的作用不只是将一组9个概念分成如4、3、2个一组的3组概念，因为这样合起来还是9个概念，而是需要<code>提高抽象层次</code>，将大脑需要处理的9个项目抽象成3个项目。由于思维的抽象程度提高，每一个抽象层的记忆项目被减少，而较高层次的思想（水果）总是能够对下面层次的思想进行<code>提示</code>（葡萄、橘子、苹果）。</p><h4 id="自上而下表达，结论先行"><a href="#自上而下表达，结论先行" class="headerlink" title="自上而下表达，结论先行"></a>自上而下表达，结论先行</h4><p>总是先提出总结性思想，再提出被总结的具体思想。</p><p>受众的大脑只能逐句理解作者表达的思想。他们会假定一同出现的思想在逻辑上存在某种关系。如果不预先告诉他们这种逻辑关系，而只是一句一句地表达你的思想，读者就会自动从中寻找共同点，将你所表达的思想归类组合，以便了解各个组合的意义。</p><blockquote><p>“上个星期我去了趟苏黎世。你知道，苏黎世是一个比较保守的城市。我们到一家露天餐馆吃饭，你知道吗？在15分钟里我至少见到了15个留长胡子的人。”</p></blockquote><p>受众会主动根据接收到的信息推测对方传递这条信息的原因，即将以上的话看作一组还未表达出的思想的一部分，这种预期性的准备能够减轻大脑分析信息的负担。受众可能从以上的话中猜测到：他可能想表达苏黎世人比较喜欢留长胡子。</p><blockquote><p>“而且，如果你在纽约的任何一座写字楼周围转一转，你会发现几乎没有不留长胡子或长头发的人。”</p></blockquote><p>接收到“纽约”、“写字楼”、“长胡子”、“长头发”信息，受众又会很疑惑：难道他是想表达纽约白领受到苏黎世的影响也开始留长胡子了？</p><blockquote><p>“当然，留长胡子在多年以前就已经是伦敦街头的一景了。”</p></blockquote><p>“噢，”受众想到，“我好像终于明白他想说什么了。他想说伦敦留长胡子的时尚潮流又在苏黎世和纽约复兴了。”</p><p>以上理解在逻辑上完全合理，但这可能并不是发言者想表达的意思，他可能想表达：</p><blockquote><p>难以相信，在商业界，男人留长胡子或长头发的形象已经这样普遍：</p><p>在苏黎世……</p><p>在纽约……</p><p>还有，在伦敦……</p></blockquote><p>读者在接受信息时，总是在寻找一种能够将所接收的信息联系起来的结构。为了保证读者找到的结构就是你希望他采纳的结构，你必须提前把这种结构告诉他，否则，读者很可能会发现某些并非你所希望的逻辑关系，从而产生错误的理解。</p><p>读者可利用的思维能力都是很有限的：</p><ul><li>一部分思维能力用于识别和解读读到的词语；</li><li>一部分思维能力用于找出各种思想之间的关系；</li><li>剩下的思维能力用于理解所表述思想的含义。</li></ul><p>你需要通过有效的方法表达你的思想，减少读者用在前两项活动上的时间，从而使读者能够用最少的脑力理解你表达的思想。</p><h4 id="自下而上思考，总结概括"><a href="#自下而上思考，总结概括" class="headerlink" title="自下而上思考，总结概括"></a>自下而上思考，总结概括</h4><p>如果将所有的信息进行归类分组、抽象概括，并以自上而下的方式表达出来，那么文章结构会如图1 -3所示。每个方框代表希望表达的一个思想。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/pyramid-theory/pyramid-3.png" alt="图1-3 文章中的思想应组成单一思想统领下的金字塔结构"></p><p>你的思维从最底部的层次开始：</p><ul><li>将句子按照某种逻辑顺序组成段落；</li><li>然后将段落组成章节；</li><li>最后将章节组成完整的文章；</li><li>而代表整篇文章的则是金字塔最顶端的一个思想（中心思想、核心观点）。</li></ul><p>因为你总是要不断地对思想进行归类和概括，直到没有可与之关联的思想可以继续概括，因此，你写的<code>每一篇文章的结构必定只支持一个思想</code>，即概括了所有各组思想的单一思想。这一思想应当就是你希望表达的思想，而所有在其之下的思想则越往下越具体、越详细，并且都对你希望表达的主题思想起着解释和支撑的作用。</p><p>文章中的思想必须符合以下规则：</p><ul><li><p>纵向：任一层次上的思想必须是其下一层次上的思想的概括。</p></li><li><p>横向：</p><ul><li><p>每组中的思想必须属于同一逻辑范畴</p><ul><li>如果希望将某一组思想的抽象程度提高一个层次，那么这一组中的思想必须在逻辑上具有共同点。</li><li>检查思想分组的一个简便方法，就是是否能够用单一名词表示该组的所有思想，如该组中的所有思想都可以被冠以“建议”、“原因”、“问题”、“需作出的改变”等名词。</li></ul></li><li><p>每组中的思想必须按照逻辑顺序组织。组织思想基本上只有以下4种逻辑顺序：</p><ul><li><p>演绎顺序：大前提、小前提、结论</p></li><li><p>时间（步骤）顺序：第一、第二、第三</p></li><li><p>结构（空间）顺序：黑龙江、山东、广东</p></li><li><p>程度（重要性）顺序：最重要、次重要、其他</p></li></ul></li></ul></li></ul><h3 id="第2章-金字塔内部的结构"><a href="#第2章-金字塔内部的结构" class="headerlink" title="第2章 金字塔内部的结构"></a>第2章 金字塔内部的结构</h3><p>如果在开始写作之前，你就已经完全清楚你想表达的思想，你就可以容易地将要表达的思想组织成规范的金字塔结构。但是，大多数人在刚坐下来开始写作时，可能对自己想表达的思想还只有模糊的想法，在你不得不用词汇或句子将思想呈现出来之前，你很可能难以准确地把握自己的思想。</p><p>因此，不要幻想一坐下来就开始将思想组织成金字塔。首先你必须梳理你想要表达的思想。</p><p>利用金字塔的子结构加快梳理思想的过程：</p><ul><li>主题与子主题之间的纵向关系</li><li>各子主题之间的横向关系</li><li>序言的叙述方式</li></ul><p>这3种子结构（即纵向的疑问／回答式对话、横向的演绎或归纳推理、讲故事式的序言）能够帮助你找到构建金字塔所需的思想。</p><ul><li>了解了纵向关系，你就可以确定某一层次上的思想组必须表达哪种信息（即：必须回答针对上一层次的思想读者所提出的新疑问）。</li><li>了解了横向关系，你就可以判断，你组织在一起的思想是否用符合逻辑的方式表达了信息（即：是否是正确的归纳或演绎论述）。</li><li>更重要的是，了解读者最早提出的疑问，将确保你组织和呈现的思想与读者有关联（即：文章中的思想有助于回答读者的初始问题）。</li></ul><h4 id="纵向关系"><a href="#纵向关系" class="headerlink" title="纵向关系"></a>纵向关系</h4><p>纵向关系能够很好地吸引读者的注意力。通过纵向关系，你可以引导一种<code>疑问／回答式的对话</code>，从而使读者带着极大的兴趣了解你的思路进展。</p><p>疑问 / 回答式对话：</p><ul><li><p>在金字塔结构每一个方框中的就是一个“思想”。将“思想”定义为“向受众发出新信息并引发受众疑问的语句”。（人一般不会阅读自己已经了解的内容，因此，表达思想的主要目的就是向受众传递新的信息。）</p></li><li><p>为了向受众传递新的信息而作的表述，必然会使对方就其逻辑性产生疑问，例如，“为什么会这样”、“怎样才能这样”。作者必须在该表述的下一个层次上横向地回答读者的疑问，但是作者的回答仍然是向读者传递他不知道的新信息，这又使读者产生新的疑问，于是作者又在再下一个层次回答读者新的疑问。</p></li><li>你将不断地按照“引起读者疑问并回答疑问”的方式继续写作，直到你认为读者不会再对你的新表述提出任何疑问为止。至此，作者就可以离开金字塔结构的第一个分支，返回关键句（keyline）层次，继续回答由金字塔最顶端方框中思想引发的初始疑问。</li></ul><p>因此作者就必须在<code>做好回答问题的准备之前，避免引起读者的疑问</code>；也必须在<code>引起读者疑问之前，避免先给出对该问题的答案</code>。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/pyramid-theory/pyramid-4.png" alt="图2-2 金字塔结构引导疑问／回答式对话"></p><p>图2-2是从G.K.切斯特顿所写的文章中摘出的一个幽默故事。切斯特顿说，猪应当被当做宠物养，读者当然会问“为什么这么说？”。切斯特顿说：“有两个原因：首先，猪很漂亮；其次，猪可以培育出很多品种。 ”</p><blockquote><p>读者：“为什么说猪很漂亮？”</p><p>切斯特顿：“猪很漂亮，因为猪很肥，而且具有典型的英国特征。”</p><p>读者：“肥胖有什么漂亮的？”</p><p>切斯特顿：“肥胖能够使其他人显得苗条，也能够使肥胖者更谦虚（因为有人比他还胖）。”</p></blockquote><p>虽然你显然不会同意切斯特顿的论述，但至少你可以了解他的论述过程。你能够清楚地了解切斯特顿为什么作出如上表述，也显然不需要再提出疑问以进一步了解其推理过程。</p><blockquote><p>读者：“为什么具有典型的英国特征就漂亮呢？”</p><p>切斯特顿：“猪与大地是互相连接的；这种连接说明权力与仁慈并非不能共存；这种态度是很符合英国特点的，也非常美好，足以成为英国的国家象征。”</p></blockquote><p>同样，你可能会对这种观点持不同意见，但是你能够很清楚地了解切斯特顿这样表述的原因。这种表述之所以清晰，是因为其思想的组织一直紧紧围绕着回答由主题引发的读者的疑问。金字塔结构的巨大价值就在于它迫使你在理清思路时，从视觉上使纵向的疑问／回答式对话关系清晰化。你的每一个表述都应当引发读者的疑问，而你也必须在这一表述下的横向结构层次上逐个回答读者的疑问。</p><h4 id="横向关系"><a href="#横向关系" class="headerlink" title="横向关系"></a>横向关系</h4><p>当考虑在下一结构层次上如何表述时，必须保证你的表述能回答在其上一个层次上的表述引起的疑问，同时还必须保证表述符合逻辑。也就是说， 表述必须具有明确的<code>归纳</code>或<code>演绎</code>关系，但不可同时既具有归纳关系，又具有演绎关系。在组织思想时，归纳和演绎是仅有的两种可能的逻辑关系。</p><ul><li>演绎性思想组合<ul><li>由几个承前启后的论述组成的：<ul><li>第一个思想是对当今世界上的某种现象的表述；</li><li>第二个思想是对该句子的主语或谓语所作的表述； </li><li>第三个思想则说明了以上两种表述同时在世界上存在时所具有的隐含意义。 </li></ul></li><li>演绎性思想组合具有以下形式：<ul><li>所有的人都会死。</li><li>苏格拉底是一个人。</li><li>因此苏格拉底会死。</li></ul></li></ul></li><li>归纳性思想组合<ul><li>组合中的思想互相关联，你可以用同一个名词表示组中所有思想，如原因、步骤、问题等。</li><li>以下句子的共同点（即：都是针对波兰的战争行为）。你的推论可能是“波兰将受到坦克入侵”或类似的思想。<ul><li>法国坦克已抵达波兰边境。 </li><li>德国坦克已抵达波兰边境。 </li><li>俄国坦克已抵达波兰边境。</li></ul></li></ul></li></ul><h4 id="序言的结构"><a href="#序言的结构" class="headerlink" title="序言的结构"></a>序言的结构</h4><p>在着手构建自己的金字塔结构之前，还需要了解一件事，即文章需要回答的初始问题（即读者将提出的第一个疑问）。你可以通过讲故事式的序言（前言、引言）确定初始问题。</p><p>为了保证你的文章能够吸引读者的注意，你必须使文章回答读者头脑中已有的问题，或者能回答读者对周围发生的事情短暂思考后可能会提出的问题。文章的序言可以通过追溯问题的起源和发展来确定这一问题。</p><p>序言的开头应向读者说明</p><ul><li><code>“背景”（situation）</code>的时间和地点。 </li><li>在这一背景中应当发生了某件事情，可称为<code>“冲突”（complication）</code>。</li><li>使读者提出（或将使读者提出）你的文章将要<code>“回答”（answer）</code>的<code>“疑问”（question）</code>。</li></ul><h3 id="第3章-如何构建金字塔"><a href="#第3章-如何构建金字塔" class="headerlink" title="第3章 如何构建金字塔"></a>第3章 如何构建金字塔</h3><h4 id="自上而下法"><a href="#自上而下法" class="headerlink" title="自上而下法"></a>自上而下法</h4><p>自上而下构建金字塔结构相对容易，因为在写作的开始确定文章的<code>主题</code>和引导读者了解其情况的<code>序言</code>相对容易。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/pyramid-theory/pyramid-5.png" alt="图3-1  金字塔结构中互相关联的各要素 "></p><p>自上而下法构建金字塔步骤如下：</p><ol><li><p><code>画出主题方框</code>：这个方框就是文章的金字塔结构最顶部的方框。在方框中填入你要讨论的主题，当然前提是你知道要讨论什么主题，否则请跳到步骤2。</p></li><li><p><code>设想主要疑问</code>：确定文章的读者。你的文章将面对哪些对象？你希望文章能回答读者头脑中关于该主题的哪些疑问？如果你能确定读者的主要疑问，请写出来，否则跳到步骤4。</p></li><li><p><code>写出对该疑问的回答</code>：如果你还不清楚答案，请注明你有能力回答该疑问。</p></li><li><p><code>说明背景</code>：你需要证明，现阶段你能够清晰论述该主要的疑问和答案。具体做法是：把要讨论的“主题”与“背景”相结合，作出关于该主题的第一个不会引起争议的表述。关于该主题的哪些表述肯定不会引起读者的疑问呢？（因为读者知道这一表述，或者根据以往经验很容易判断该表述的正确性。）</p></li><li><p><code>指出冲突</code>：现在你已经开始与读者进行疑问／回答式对话了。想象一下，读者表示同意，点着头说：“对，我知道这个情况，有什么问题吗？”此时，你就应当考虑“背景”中发生了哪些“冲突”，以致引发了读者的“疑问”呢？</p></li><li><p><code>检查“主要疑问”和“答案”</code>：对“背景”中“冲突”的介绍，应当直接导致读者提出主要疑问（已在步骤2中列出）。否则，应重新介绍“背景”中的“冲突”，使之可以直接导致读者提出主要疑问。可能有时“背景”中的“冲突”与主要疑问对不上号，这就需要你重新构思。</p></li></ol><p>进行以上步骤的目的，是确保你了解自己将要回答哪些疑问。一旦确定了主要“疑问”，其他要素都很容易在金字塔结构中各就各位。 </p><p>自上而下法构建金字塔的简要步骤：</p><ol><li>提出主题思想。</li><li>设想受众的主要疑问。</li><li>写序言：背景—冲突—疑问—回答。</li><li>与受众进行疑问 / 回答式对话。</li><li>对受众的新疑问，重复进行疑问 / 回答式对话。</li></ol><p>例如：</p><p>美国某大型饮料公司，饮料公司的送货员将产品交付给客户后，客户应向饮料公司的财务部发回一张交货单，列明产品代码、交货日期和交货数量。饮料公司的记账系统要处理这些交货单，处理流程如下：</p><blockquote><p>处理交货单=&gt;发送账单=&gt;接收支票=&gt;处理收款</p></blockquote><p>一家汉堡公司是该饮料公司的大客户，长期从该公司采购大量饮料，称其为“大客户”。大客户出于自身数据统计的需要，希望跟踪每天的账单情况。大客户想知道自己是否可以留存每次的交货单，将有关信息及计算出的总数输入计算机，然后每月将数据盘和支票送至饮料公司总部。也就是说，大客户建议饮料公司财务系统采用以下运作方式：</p><blockquote><p>接收数据盘和支票=&gt;处理收款</p></blockquote><p>饮料公司的财务部主管需要审核和答复该方案的可行性。于是，财务部主管提交了一份备忘录。如果你是这位财务部主管，并用图3-1中的方法组织你的思路，你的思维过程将大致如下：</p><ol><li><p>问自己：“我将讨论什么主题？”（大客户提出的改变记账方式的建议。）</p></li><li><p>回答读者头脑中业已存在的关于该主题的哪些疑问？（这个建议可行吗？）</p></li><li><p>我的答案是什么？（可行。）</p></li><li><p>与序言相对照，检查该疑问和该答案是否仍然相对应。将要讨论的主题与背景相结合，作出第一个不会引起争议的表述。首先作出的关于该主题的哪些表述肯定不会引起读者的疑问呢？即读者肯定会当做事实接受，且不会提出任何疑问的表述。（大客户建议改变记账方式。）</p></li><li><p>现在假定读者说：“是的，我知道这回事，有什么问题吗？”你就可以直接指出冲突。（公司询问我该建议是否可行？）</p><p>你之前作出的关于疑问的表述现在将跃入读者的大脑。（该建议是否可行？）读者想到的疑问与你之前提出的疑问基本一致，因此你可以说，<code>读者的疑问和你的回答相匹配</code>，你讨论的主题对读者是有意义的。</p></li><li><p>作出该建议确实可行这样的表述后，你将沿金字塔结构继续向下思考，以确定读者在看到这样的表述后会产生哪些新的疑问。（为什么这么说？）</p></li><li><p>针对“为什么”之类问句的回答必须是“原因”，因此，你在关键句要点这一层次上提供的所有要点必须都是“原因”（可以用单一名词概括）。你的原因有哪些呢？ </p><ul><li>该建议将提供给我们所需的信息。 </li><li>该建议将增加我们的现金流。 </li><li>该建议将减少我们的工作量。</li></ul></li><li><p>在确定了以上要点都是正确且符合逻辑之后，下一步就是继续沿金字塔结构向下思考，提供能够支持以上观点的思想。</p></li></ol><p>这种方法迫使作者在写作构思时仅从头脑中获取与读者的疑问有关的信息。但是在具体操作中，这种方法能够迫使作者全面地考虑该疑问。而且，如果作者在写作时能够遵循这种自上而下的思想组织方式，读者就能非常容易地理解作者的全部思想，如图3-2所示。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/pyramid-theory/pyramid-6.png" alt="图3-2 紧扣读者疑问的回答"></p><h4 id="自下而上法"><a href="#自下而上法" class="headerlink" title="自下而上法"></a>自下而上法</h4><p>很多时候你还没想清楚，无法构建金字塔结构的顶部。譬如，有时你无法准确确定要讨论的主题，有时尚不清楚读者头脑中的疑问，有时则无法确定读者了解什么、不了解什么。遇到这些情况时，可向下移动一个层次，从关键句层次上着手。可以按照以下步骤自下而上地组织你的思想。</p><p>自下而上思考：</p><ol><li>列出你想表达的所有思想要点。</li><li>找出各要点之间的逻辑关系。</li><li>得出结论。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美丽下标对的数目 (leetcode 2748)</title>
      <link href="/2024/09/12/leetcode-2748/"/>
      <url>/2024/09/12/leetcode-2748/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="LeetCode每日一题"><a href="#LeetCode每日一题" class="headerlink" title="LeetCode每日一题"></a>LeetCode每日一题</h1><p>题目来源：<a href="https://leetcode.cn/">力扣（LeetCode）</a> </p><h2 id="2748-美丽下标对的数目（简单）"><a href="#2748-美丽下标对的数目（简单）" class="headerlink" title="2748. 美丽下标对的数目（简单）"></a><a href="https://leetcode.cn/problems/number-of-beautiful-pairs/">2748. 美丽下标对的数目（简单）</a></h2><p><code>暴力枚举</code> <code>哈希表</code></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。如果下标对 <code>i</code>、<code>j</code> 满足 <code>0 ≤ i &lt; j &lt; nums.length</code> ，如果 <code>nums[i]</code> 的 <strong>第一个数字</strong> 和 <code>nums[j]</code> 的 <strong>最后一个数字</strong> <strong>互质</strong> ，则认为 <code>nums[i]</code> 和 <code>nums[j]</code> 是一组 <strong>美丽下标对</strong> 。</p><p>返回 <code>nums</code> 中 <strong>美丽下标对</strong> 的总数目。</p><p>对于两个整数 <code>x</code> 和 <code>y</code> ，如果不存在大于 1 的整数可以整除它们，则认为 <code>x</code> 和 <code>y</code> <strong>互质</strong> 。换而言之，如果 <code>gcd(x, y) == 1</code> ，则认为 <code>x</code> 和 <code>y</code> 互质，其中 <code>gcd(x, y)</code> 是 <code>x</code> 和 <code>y</code> 的 <strong>最大公因数</strong> 。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：nums = [2,5,1,4]<br>输出：5<br>解释：nums 中共有 5 组美丽下标对：<br>i = 0 和 j = 1 ：nums[0] 的第一个数字是 2 ，nums[1] 的最后一个数字是 5 。2 和 5 互质，因此 gcd(2,5) == 1 。<br>i = 0 和 j = 2 ：nums[0] 的第一个数字是 2 ，nums[2] 的最后一个数字是 1 。2 和 1 互质，因此 gcd(2,1) == 1 。<br>i = 1 和 j = 2 ：nums[1] 的第一个数字是 5 ，nums[2] 的最后一个数字是 1 。5 和 1 互质，因此 gcd(5,1) == 1 。<br>i = 1 和 j = 3 ：nums[1] 的第一个数字是 5 ，nums[3] 的最后一个数字是 4 。5 和 4 互质，因此 gcd(5,4) == 1 。<br>i = 2 和 j = 3 ：nums[2] 的第一个数字是 1 ，nums[3] 的最后一个数字是 4 。1 和 4 互质，因此 gcd(1,4) == 1 。<br>因此，返回 5 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：nums = [11,21,12]<br>输出：2<br>解释：共有 2 组美丽下标对：<br>i = 0 和 j = 1 ：nums[0] 的第一个数字是 1 ，nums[1] 的最后一个数字是 1 。gcd(1,1) == 1 。<br>i = 0 和 j = 2 ：nums[0] 的第一个数字是 1 ，nums[2] 的最后一个数字是 2 。gcd(1,2) == 1 。<br>因此，返回 2 。</p></blockquote><p><strong>提示：</strong></p><ul><li>$2 &lt;= nums.length &lt;= 100$</li><li>$1 &lt;= nums[i] &lt;= 9999$</li><li>$nums[i] \% 10 != 0$</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p><strong>方法一：暴力枚举</strong><br>暴力枚举 $nums[i]$ 和 $nums[j]$，判断是否是美丽下标对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countBeautifulPairs</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">while</span> nums[i] &gt;= <span class="number">10</span>:</span><br><span class="line">                nums[i] //= <span class="number">10</span>  <span class="comment"># 取nums[i]的第一个数字</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> gcd(nums[i] , nums[j] % <span class="number">10</span>) == <span class="number">1</span>:  <span class="comment"># 取nums[j]的最后一个数字，并获取其与nums[i]的最大公约数</span></span><br><span class="line">                    res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：$O(n^{2}logC))$，其中 $n$ 是数组 $nums$ 的长度，$C$ 是 $nums$ 中的最大元素。</p><ul><li><p>外层循环 $i$：遍历数组中的每一个元素，有 $n$ 次迭代。</p></li><li><p>外+内层循环 $j$：对于每个 $i$，内层循环遍历从 $i+1$ 到 $n-1$ 的所有元素，平均执行次数为 $\frac{n(n-1)}{2}$，约等于 $O(n^{2})$。</p></li><li><p>计算 gcd：最大公约数算法的时间复杂度是 $O(logC)$，因为两个数的最大公约数的计算复杂度与数的大小成对数关系。</p></li><li><p>综上代码中最耗时的操作是内层的  gcd 计算，需要在 $O(n^{2})$ 次迭代中每次执行 $O(logC)$ 次除法。因此，总的时间复杂度是 $O(n^{2}logC)$。</p></li></ul></li><li><p>空间复杂度：$O(1)$。</p></li></ul><p><strong>方法二：哈希表</strong></p><p>用一个数组 $cnt[y]$ 来表示当前 <strong>第一个数字</strong> 为 $y$ 的元素个数。</p><p>遍历数组。</p><ul><li>求出当前元素的 <strong>最后一个数字</strong>；</li><li>枚举 1 到 9，判断当前元素的 <strong>最后一个数字</strong> 可以与 1 到 9 哪个数字互质；<ul><li>根据当前 $cnt$ 中记录的可互质的 <strong>第一个数字</strong> 的元素个数，更新 <strong>美丽下标对</strong> 个数 $res$ 。  </li></ul></li><li>在移动到下一位置前，根据该位置的 <strong>第一个数字</strong> 的元素值更新 $cnt$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countBeautifulPairs</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        cnt = [<span class="number">0</span>] * <span class="number">10</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                <span class="keyword">if</span> gcd(x % <span class="number">10</span>, y) == <span class="number">1</span>:  <span class="comment"># 当前最后一个数字可以与哪个数字互质</span></span><br><span class="line">                    res += cnt[y]  <span class="comment"># 利用cnt中当前可互质的元素个数，更新美丽下标对个数res </span></span><br><span class="line">            <span class="keyword">while</span> x &gt;= <span class="number">10</span>:</span><br><span class="line">                x //= <span class="number">10</span></span><br><span class="line">            cnt[x] += <span class="number">1</span>  <span class="comment"># 更新当前第一个数字为x的元素个数</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：$O(10nlogC))$，其中 $n$ 是数组的长度，$C$ 是 $nums[i]$ 的最大值。</p></li><li><p>空间复杂度：$O(10)$。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 力扣简单 </tag>
            
            <tag> 暴力枚举 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵中严格递增的单元格数 (leetcode 2713)</title>
      <link href="/2024/09/11/leetcode-2713/"/>
      <url>/2024/09/11/leetcode-2713/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="LeetCode每日一题"><a href="#LeetCode每日一题" class="headerlink" title="LeetCode每日一题"></a>LeetCode每日一题</h1><p>题目来源：<a href="https://leetcode.cn/">力扣（LeetCode）</a> </p><h2 id="2713-矩阵中严格递增的单元格数（困难）"><a href="#2713-矩阵中严格递增的单元格数（困难）" class="headerlink" title="2713. 矩阵中严格递增的单元格数（困难）"></a><a href="https://leetcode.cn/problems/maximum-strictly-increasing-cells-in-a-matrix/">2713. 矩阵中严格递增的单元格数（困难）</a></h2><p><code>动态规划</code> <code>矩阵</code></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个下标从 <strong>1</strong> 开始、大小为 <code>m x n</code> 的整数矩阵 <code>mat</code>，你可以选择任一单元格作为 <strong>起始单元格</strong> 。</p><p>从起始单元格出发，你可以移动到 <strong>同一行或同一列</strong> 中的任何其他单元格，但前提是目标单元格的值 <strong>严格大于</strong> 当前单元格的值。</p><p>你可以多次重复这一过程，从一个单元格移动到另一个单元格，直到无法再进行任何移动。</p><p>请你找出从某个单元开始访问矩阵所能访问的 <strong>单元格的最大数量</strong> 。</p><p>返回一个表示可访问单元格最大数量的整数。</p><p><strong>示例 1：</strong></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/leetcode-2713/2713-1.png" alt="示例1"></p><blockquote><p>输入：mat = [[3,1],[3,4]]<br>输出：2<br>解释：上图展示了从第 1 行、第 2 列的单元格开始，可以访问 2 个单元格。可以证明，无论从哪个单元格开始，最多只能访问 2 个单元格，因此答案是 2 。</p></blockquote><p><strong>示例 2：</strong></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/leetcode-2713/2713-2.png" alt="示例2"></p><blockquote><p>输入：mat = [[1,1],[1,1]]<br>输出：1<br>解释：由于目标单元格必须严格大于当前单元格，在本示例中只能访问 1 个单元格。</p></blockquote><p><strong>示例 3：</strong></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/leetcode-2713/2713-3.png" alt="示例3"></p><blockquote><p>输入：mat = [[3,1,6],[-9,5,7]]<br>输出：4<br>解释：上图展示了从第 2 行、第 1 列的单元格开始，可以访问 4 个单元格。可以证明，无论从哪个单元格开始，最多只能访问 4 个单元格，因此答案是 4 。  </p></blockquote><p><strong>提示：</strong></p><ul><li>$m == mat.length$ </li><li>$n == mat[i].length $</li><li>$1 &lt;= m, n &lt;= 10^5$</li><li>$1 &lt;= m * n &lt;= 10^5$</li><li>$-10^5 &lt;= mat[i][j] &lt;= 10^5$</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p><strong>动态规划</strong></p><p>设 $d[i][j]$ 为移动到单元格 $(i,j)$ 的最大步数，其中 $(i,j)$ 可以作为起始单元格，也可以是从其他单元格移动而来。考虑从第 $i$ 行以及第 $j$ 列上矩阵单元格数值小于 $mat[i][j]$ 的位置进行转移，即 $d[i][j]$ 取以下数值中的最大值：</p><ul><li>第 $i$ 行：$max(d[i][j’]+1)$ ，其中 $mat[i][j’] &lt; mat[i][j]$</li><li>第 $j$ 列：$max(d[i’][j]+1)$ ，其中 $mat[i’][j] &lt; mat[i][j]$</li></ul><p>整个状态空间在进行转移时是有序的，可以对 $mat$ 进行排序，从小到大进行转移。但在转移时，每个状态都要扫描一遍对应的行和列，时间复杂度为 $O(n+m)$；因此对整体 $nm$ 个状态求解的时间复杂度为 $O(nm(n+m))$ 。时间复杂度过大，需要优化。</p><p>由于所有 $d[i][j]$ 在更新时，值只会增大，而在转移的过程中只考虑对应行和对应列上 $d$ 的最大值（由于大于 $mat[i][j]$ 的位置还未遍历到，状态还未更新，将其设置为0）。因此可以设置长度为 $m$ 的数组 $row$ 来维护每一行 $d$ 的最大值，设置长度为 $n$ 的数组 $col$ 来维护每一列 $d$ 的最大值。即 $d[i][j]$的最大值如下：</p><ul><li>$d[i][j]=max(row[i],col[j])+1$</li></ul><p>在每次更新 $d[i][j]$ 之后，需要重新更新 $row[i]$ 和 $col[j]$。此外由于 $mat$ 中可能包含相同的数字，需要同时更新它们的 $d$ 值，再同时更新它们对应的 $row$ 和 $col$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxIncreasingCells</span>(<span class="params">self, mat: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(mat), <span class="built_in">len</span>(mat[<span class="number">0</span>])</span><br><span class="line">        mp = defaultdict(<span class="built_in">list</span>)  <span class="comment"># 创建默认值为空列表的字典</span></span><br><span class="line">        row = [<span class="number">0</span>] * m  <span class="comment"># 每一行中最大步数值</span></span><br><span class="line">        col = [<span class="number">0</span>] * n  <span class="comment"># 每一列中最大步数值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用字典mp存储矩阵mat中的每个值对应的位置有哪些</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                mp[mat[i][j]].append((i, j))  </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 整个状态空间在进行转移时是有序的，即移动时都是从小到大转移</span></span><br><span class="line">        <span class="comment"># 按照字典mp中的键（矩阵mat中的元素值）进行排序，并遍历排序后的项</span></span><br><span class="line">        <span class="keyword">for</span> _, pos <span class="keyword">in</span> <span class="built_in">sorted</span>(mp.items(), key=<span class="keyword">lambda</span> k:k[<span class="number">0</span>]):  </span><br><span class="line">            <span class="comment"># 由于mat中可能包含相同的数字，需要同时更新它们的d值</span></span><br><span class="line">            <span class="comment"># d[i][j]=max(row[i],col[j])+1</span></span><br><span class="line">            res = [<span class="built_in">max</span>(row[i], col[j]) + <span class="number">1</span> <span class="keyword">for</span> i, j <span class="keyword">in</span> pos]</span><br><span class="line">            <span class="comment"># 再同时更新它们对应的row和col</span></span><br><span class="line">            <span class="keyword">for</span> (i, j), d <span class="keyword">in</span> <span class="built_in">zip</span>(pos, res):</span><br><span class="line">                row[i] = <span class="built_in">max</span>(row[i], d)</span><br><span class="line">                col[j] = <span class="built_in">max</span>(col[j], d)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(row)</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：$O(mnlog(mn))$ ，其中 $m$ 是 $mat$ 的行数，$n$ 是 $mat$ 的列数。从小到大进行状态转移之前，需要对 $mat$ 进行排序，这部分时间复杂度为 $O(mnlog(mn))$（列表的 $.sort()$ 方法时间复杂度为 $O(nlogn)$ ）。每个状态转移的时间复杂度为 $O(1)$ ，所有状态转移的时间复杂度为 $O(mn)$。因此总体时间复杂度为 $O(mnlog(mn))$ 。</p></li><li><p>空间复杂度：$O(mn)$。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 力扣困难 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>价格减免 (leetcode 2288)</title>
      <link href="/2024/09/11/leetcode-2288/"/>
      <url>/2024/09/11/leetcode-2288/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="LeetCode每日一题"><a href="#LeetCode每日一题" class="headerlink" title="LeetCode每日一题"></a>LeetCode每日一题</h1><p>题目来源：<a href="https://leetcode.cn/">力扣（LeetCode）</a> </p><h2 id="2288-价格减免（中等）"><a href="#2288-价格减免（中等）" class="headerlink" title="2288. 价格减免（中等）"></a><a href="https://leetcode.cn/problems/apply-discount-to-prices/">2288. 价格减免（中等）</a></h2><p><code>.split()</code> <code>.isnumeric()</code></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>句子</strong> 是由若干个单词组成的字符串，单词之间用单个空格分隔，其中每个单词可以包含数字、小写字母、和美元符号 <code>&#39;$&#39;</code> 。如果单词的形式为美元符号后跟着一个非负实数，那么这个单词就表示一个 <strong>价格</strong> 。</p><ul><li>例如 <code>&quot;$100&quot;</code>、<code>&quot;$23&quot;</code> 和 <code>&quot;$6&quot;</code> 表示价格，而 <code>&quot;100&quot;</code>、<code>&quot;$&quot;</code> 和 <code>&quot;$1e5</code> 不是。</li></ul><p>给你一个字符串 <code>sentence</code> 表示一个句子和一个整数 <code>discount</code> 。对于每个表示价格的单词，都在价格的基础上减免 <code>discount%</code> ，并 <strong>更新</strong> 该单词到句子中。所有更新后的价格应该表示为一个 <strong>恰好保留小数点后两位</strong> 的数字。</p><p>返回表示修改后句子的字符串。</p><p>注意：所有价格 <strong>最多</strong> 为 <code>10</code> 位数字。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：<code>sentence = &quot;there are $1 $2 and 5$ candies in the shop&quot;, discount = 50</code><br>输出：<code>&quot;there are $0.50 $1.00 and 5$ candies in the shop&quot;</code><br>解释：<br>表示价格的单词是 “<code>$1</code>“ 和 “<code>$2</code>“ 。 </p><ul><li>“<code>$1</code>“ 减免 50% 为 “<code>$0.50</code>“ ，所以 “<code>$1</code>“ 替换为 “<code>$0.50</code>“ 。</li><li>“<code>$2</code>“ 减免 50% 为 “<code>$1</code>“ ，所以 “<code>$2</code>“ 替换为 “<code>$1.00</code>“ 。</li></ul></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：<code>sentence = &quot;1 2 $3 4 $5 $6 7 8$ $9 $10$&quot;, discount = 100</code><br>输出：<code>&quot;1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$&quot;</code><br>解释：<br>任何价格减免 100% 都会得到 0 。<br>表示价格的单词分别是 “<code>$3</code>“、”<code>$5</code>“、”<code>$6</code>“ 和 “<code>$9</code>“。<br>每个单词都替换为 “<code>$0.00</code>“。</p></blockquote><p> <strong>提示：</strong></p><ul><li>$1 &lt;= sentence.length &lt;= 10^5$</li><li>$sentence$ 由小写英文字母、数字、<code>&#39; &#39;</code> 和 <code>&#39;$&#39;</code> 组成</li><li>$sentence$ 不含前导和尾随空格</li><li>$sentence$ 的所有单词都用单个空格分隔</li><li>所有价格都是 <strong>正</strong> 整数且不含前导零</li><li>所有价格 <strong>最多</strong> 为 <code>10</code> 位数字</li><li>$0 &lt;= discount &lt;= 100$</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p><strong>流程模拟</strong></p><p>按照题目要求对更新过程进行模拟。</p><ul><li>将句子<code>sentence</code> 按空格分割得到每一个单词<code>word</code>。<ul><li>.split() ：是Python中用于将字符串按照指定的分隔符进行分割，并返回分割后的字符串列表。</li></ul></li><li>判断单词<code>word</code>是否以’<code>$</code>‘开头且后续至少有一个字符，且均在 [0,9] 中。<ul><li>.isnumeric() ：用于检测变量是否为数字或数字字符串。</li></ul></li><li>如果单词<code>word</code>满足表示价格的要求，将其转换为整数，计算折扣，再转换回字符串。<ul><li>.join() : Python中字符串对象的一个方法，用于将一个可迭代对象（如列表、元组等）中的元素以指定的字符连接起来，生成一个新的字符串。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">discountPrices</span>(<span class="params">self, sentence: <span class="built_in">str</span>, discount: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        words = sentence.split()  <span class="comment"># 分割句子字符串获取单词列表</span></span><br><span class="line">        <span class="comment"># 遍历单词列表修改价格</span></span><br><span class="line">        <span class="keyword">for</span> i, word <span class="keyword">in</span> <span class="built_in">enumerate</span>(words):</span><br><span class="line">            <span class="keyword">if</span> word[<span class="number">0</span>] == <span class="string">&quot;$&quot;</span> <span class="keyword">and</span> word[<span class="number">1</span>:].isnumeric():</span><br><span class="line">                price = <span class="built_in">int</span>(word[<span class="number">1</span>:]) * (<span class="number">1</span> - discount / <span class="number">100</span>)</span><br><span class="line">                words[i] = <span class="string">f&quot;$<span class="subst">&#123;price:<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(words)</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：$O(n)$，其中 $n$ 是字符串 $sentence$ 的长度。</li><li>空间复杂度：$O(n)$。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 力扣中等 </tag>
            
            <tag> 内置函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长特殊序列II (leetcode 522)</title>
      <link href="/2024/09/11/leetcode-522/"/>
      <url>/2024/09/11/leetcode-522/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="LeetCode每日一题"><a href="#LeetCode每日一题" class="headerlink" title="LeetCode每日一题"></a>LeetCode每日一题</h1><p>题目来源：<a href="https://leetcode.cn/">力扣（LeetCode）</a> </p><h2 id="522-最长特殊序列II（中等）"><a href="#522-最长特殊序列II（中等）" class="headerlink" title="522. 最长特殊序列II（中等）"></a><a href="https://leetcode.cn/problems/longest-uncommon-subsequence-ii/">522. 最长特殊序列II（中等）</a></h2><p><code>贪心</code> <code>双指针</code></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定字符串列表 <code>strs</code> ，返回其中 <strong>最长的特殊序列</strong> 的长度。如果最长特殊序列不存在，返回 <code>-1</code> 。</p><p><strong>特殊序列</strong> 定义如下：该序列为某字符串 <strong>独有的子序列（即不能是其他字符串的子序列）</strong>。</p><p> <code>s</code> 的 <strong>子序列</strong>可以通过删去字符串 <code>s</code> 中的某些字符实现。</p><ul><li>例如，<code>&quot;abc&quot;</code> 是 <code>&quot;aebdc&quot;</code> 的子序列，因为您可以删除<code>&quot;aebdc&quot;</code>中的字符<code>&quot;e&quot;</code>和<code>&quot;d&quot;</code>来得到 <code>&quot;abc&quot;</code> 。<code>&quot;aebdc&quot;</code>的子序列还包括<code>&quot;aebdc&quot;</code>、 <code>&quot;aeb&quot;</code> 和 <code>&quot;&quot;</code> (空字符串)等。</li></ul><p><strong>示例 1：</strong></p><blockquote><p>输入: strs = [“aba”,”cdc”,”eae”]<br>输出: 3</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p>输入: strs = [“aaa”,”aaa”,”aa”]<br>输出: -1</p></blockquote><p><strong>提示:</strong></p><ul><li>$2 &lt;= strs.length &lt;= 50$</li><li>$1 &lt;= strs[i].length &lt;= 10$</li><li>$strs[i]$ 只包含小写英文字母</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p><strong>问题转换，枚举字符串，判断子序列</strong></p><p>问题转换：</p><p>原问题 =&gt; 找出字符串列表 <code>strs</code> 中<strong>最长的特殊序列</strong> 的长度。</p><p>假设某个字符串 <code>strs[i]</code> ，如果它的一个子序列<code>sub</code>是「特殊序列」，那么 <code>strs[i]</code>本身也是一个「特殊序列」。</p><blockquote><p>如果 <code>sub</code> 没有在除了 <code>strs[i]</code> 之外的字符串中以子序列的形式出现过，那么即使给  <code>sub</code>  不断地添加字符，它也依旧不会出现。而 <code>strs[i]</code> 就是给 <code>sub</code> 添加若干个（可以为零个）字符得到的结果。即如果 <code>strs[i]</code> 存在特殊序列<code>sub</code>，那么 <code>strs[i]</code> 本身也是一个特殊序列。</p></blockquote><p>即字符串列表 <code>strs</code> 中<strong>最长的特殊序列</strong>的长度为其中某一非子序列字符串 <code>strs[i]</code> 的长度或-1</p><p>新问题 =&gt; 判断列表<code>strs</code> 中的每一个字符串 <code>strs[i]</code> 是否为其他字符串 <code>strs[j](i!=j)</code> 的子序列。</p><p>思路： </p><p>使用一个双重循环，外层枚举每一个字符串  <code>strs[i]</code> 作为特殊序列，内层枚举每一个字符串 <code>strs[j](i!=j)</code>，判断  <code>strs[i]</code> 是否不为 <code>strs[j]</code> 的子序列即可。</p><p>要想判断  <code>strs[i]</code> 是否为 <code>strs[j]</code> 的子序列，可以使用贪心 + 双指针的方法：即初始时指针 $pt_{i}$ 和 $pt_{j}$ 分别指向两个字符串的首字符。如果两个字符相同，那么两个指针都往右移动一个位置，表示匹配成功；否则只往右移动指针 $pt_{j}$，表示匹配失败。如果 $pt_{i}$ 遍历完了整个字符串，就说明  <code>strs[i]</code> 是 <code>strs[j]</code> 的子序列。</p><p>在所有满足要求的 <code>strs[i]</code> 中，选出最长的那个返回其长度作为答案。如果不存在满足要求的字符串，那么返回 -1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findLUSlength</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 判断s是否为t的子序列</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">is_subseq</span>(<span class="params">s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">            pt_s = pt_t = <span class="number">0</span></span><br><span class="line">            <span class="comment"># 双指针滑动，如果s被滑动完，说明s中的字符均顺序出现在了t中，即s是t的子序列，否则s不是t的子序列</span></span><br><span class="line">            <span class="keyword">while</span> pt_s &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> pt_t &lt; <span class="built_in">len</span>(t):</span><br><span class="line">                <span class="keyword">if</span> s[pt_s] == t[pt_t]:</span><br><span class="line">                    pt_s += <span class="number">1</span></span><br><span class="line">                pt_t += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> pt_s == <span class="built_in">len</span>(s)</span><br><span class="line">        </span><br><span class="line">        ans = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i, s <span class="keyword">in</span> <span class="built_in">enumerate</span>(strs):</span><br><span class="line">            check = <span class="literal">True</span>  <span class="comment"># s是否为特殊序列</span></span><br><span class="line">            <span class="keyword">for</span> j, t <span class="keyword">in</span> <span class="built_in">enumerate</span>(strs):</span><br><span class="line">                <span class="keyword">if</span> i != j <span class="keyword">and</span> is_subseq(s, t):</span><br><span class="line">                    check = <span class="literal">False</span>  <span class="comment"># 是子序列就不是特殊序列</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> check:</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, <span class="built_in">len</span>(s))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：$O(n^{2}·l)$，其中 $n$ 是数组 $strs$ 的长度，$l$ 是字符串的平均长度。</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 力扣中等 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo公式渲染问题</title>
      <link href="/2024/06/26/hexo-formula-rendering/"/>
      <url>/2024/06/26/hexo-formula-rendering/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Hexo公式渲染问题"><a href="#Hexo公式渲染问题" class="headerlink" title="Hexo公式渲染问题"></a>Hexo公式渲染问题</h1><p>参考解决方案：<a href="https://blog.csdn.net/yexiaohhjk/article/details/82526604">hexo next主题解决无法显示数学公式</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Markdown 编辑器通常都会集成 Mathjax，用来渲染文档中的类 Latex 格式书写的数学公式。</p><p>Hexo 默认使用 hexo-renderer-marked 引擎渲染网页，该引擎会把一些特殊的 markdown 符号转换为相应的 html 标签。比如在 markdown 语法中，下划线 <code>_</code> 代表斜体，会被渲染引擎处理为 <code>&lt;em&gt;</code> 标签。类似的语义冲突的符号还包括 <code>*</code>,  <code>&#123;</code>, <code>&#125;</code>,  <code>\\</code> 等。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>更换 Hexo 的 markdown 渲染引擎，将 <code>hexo-renderer-marked</code> 替换成 <code>hexo-renderer-kramed</code>。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>换引擎后行间公式可以正确渲染了，但行内公式的渲染还是有问题，因为 hexo-renderer-kramed 引擎也有语义冲突问题。</p><p>来到博客根目录下，找到 <code>node_modules\kramed\lib\rules\inline.js</code>，对第11行的 escape 变量和第20行的 em 变量的值做相应的修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line"><span class="attr">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><p>[ <code>escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/</code> ]：用于检测并捕获在特定字符前面的反斜杠，从而实现转义功能，使这些字符在后续处理中被视为普通字符。</p><ul><li><code>/</code>和<code>/</code>：表示中间的是正则表达式</li><li><code>^</code>: 表示字符串的开始</li><li><code>\\</code>: 由于反斜杠在正则表达式中是一个转义字符，所以用两个反斜杠来表示实际的一个反斜杠。</li><li><code>([\\*&#123;&#125;\[\]()#$+\-.!_&gt;])</code>: 这是一个捕获组，用来匹配一组特定的字符。这些字符是：<ul><li><code>\\</code>: 反斜杠</li><li><code>*</code>: 星号</li><li><code>&#123;&#125;</code>: 花括号</li><li><code>[]</code>: 方括号</li><li><code>()</code>: 圆括号</li><li><code>#</code>: 井号</li><li><code>$</code>: 美元符号</li><li><code>+</code>: 加号</li><li><code>-</code>: 减号</li><li><code>.</code>: 点</li><li><code>!</code>: 感叹号</li><li><code>_</code>: 下划线</li><li><code>&gt;</code>: 大于号</li></ul></li></ul><p>[ <code>escape: /^\\([`*\[\]()#$+\-.!_&gt;])/</code> ]：与上一个正则表达式类似，但是不包含反斜杠(<code>\</code>)和花括号(<code>&#123;&#125;</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line"><span class="attr">em</span>: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><p>[ <code>em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</code> ]：用于匹配用下划线或星号包围的文本，以实现强调或加粗的效果。例如：</p><ul><li><code>_italic_</code> 会被匹配为斜体</li><li><code>*bold*</code> 会被匹配为加粗</li></ul><p>其中匹配下划线部分 <code>^\b_((?:__|[\s\S])+?)_\b</code>：</p><ul><li><code>^</code>: 表示字符串的开始</li><li><code>\b</code>: 单词边界</li><li><code>_</code>: 下划线字符</li><li><code>((?:__|[\s\S])+?)</code>: 捕获组，匹配下划线之间的内容<ul><li><code>(?:__|[\s\S])</code>: 非捕获组，匹配两个下划线 (<code>__</code>) 或者匹配任意字符，包括换行符 (<code>[\s\S]</code>)。</li><li><code>+?</code>: 非贪婪匹配，尽可能少地匹配前面的模式</li></ul></li><li><code>_</code>: 下划线字符</li><li><code>\b</code>: 单词边界。</li></ul><p>匹配星号的部分 <code>|^\*((?:\*\*|[\s\S])+?)\*(?!\*)</code></p><ul><li><code>^</code>: 表示字符串的开始</li><li><code>\*</code>: 星号字符</li><li><code>((?:\*\*|[\s\S])+?)</code>: 捕获组，匹配星号之间的内容<ul><li><code>(?:\*\*|[\s\S])</code>: 非捕获组，匹配两个星号 (<code>**</code>) 或者匹配任意字符，包括换行符 (<code>[\s\S]</code>)</li><li><code>+?</code>: 非贪婪匹配，尽可能少地匹配前面的模式</li></ul></li><li><code>\*</code>: 星号字符</li><li><code>(?!\*)</code>: 负向前瞻，确保星号后面不是另一个星号</li></ul><p>[  <code>em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</code> ]：与上一个正则表达式类似，但只匹配星号包围的文本。</p><p>重新启动 hexo，查看公式是否能够正常渲染</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果问题仍未解决的话，检查主题配置文件中的 mathjax 是否打开，以 butterfly 主题为例。</p><p>来到博客根目录下，找到主题配置文件 <code>themes\butterfly\_config.yml</code>。</p><p>将 <code>mathjax</code> 下的 <code>enable</code> 设置为 <code>true</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Math (數學)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># About the per_page</span></span><br><span class="line"><span class="comment"># if you set it to true, it will load mathjax/katex script in each page (true 表示每一頁都加載js)</span></span><br><span class="line"><span class="comment"># if you set it to false, it will load mathjax/katex script according to your setting (add the &#x27;mathjax: true&#x27; in page&#x27;s front-matter)</span></span><br><span class="line"><span class="comment"># (false 需要時加載，須在使用的 Markdown Front-matter 加上 mathjax: true)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MathJax</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据注释，如果将 <code>mathjax</code> 下的 <code>per_page</code> 设置为 <code>true</code>，则对每个文章都进行渲染；如果将 <code>per_page</code> 设置为 <code>false</code>，则需要在需要渲染的文章的 Front-matter 里打开 mathjax 开关，如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: test</span><br><span class="line">tags: test</span><br><span class="line">categories: test</span><br><span class="line"><span class="section">mathjax: true</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问数组中的位置使分数最大 (LeetCode 2786)</title>
      <link href="/2024/06/26/leetcode-2786/"/>
      <url>/2024/06/26/leetcode-2786/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="LeetCode每日一题"><a href="#LeetCode每日一题" class="headerlink" title="LeetCode每日一题"></a>LeetCode每日一题</h1><p>题目来源：<a href="https://leetcode.cn/">力扣（LeetCode）</a> </p><h2 id="2786-访问数组中的位置使分数最大（中等）"><a href="#2786-访问数组中的位置使分数最大（中等）" class="headerlink" title="2786. 访问数组中的位置使分数最大（中等）"></a><a href="https://leetcode.cn/problems/visit-array-positions-to-maximize-score/">2786. 访问数组中的位置使分数最大（中等）</a></h2><p><code>动态规划</code> <code>数组</code></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 和一个正整数 <code>x</code> 。</p><p>你 <strong>一开始</strong> 在数组的位置 <code>0</code> 处，你可以按照下述规则访问数组中的其他位置：</p><ul><li>如果你当前在位置 <code>i</code> ，那么你可以移动到满足 <code>i &lt; j</code> 的 <strong>任意</strong> 位置 <code>j</code> 。</li><li>对于你访问的位置 <code>i</code> ，你可以获得分数 <code>nums[i]</code> 。</li><li>如果你从位置 <code>i</code> 移动到位置 <code>j</code> 且 <code>nums[i]</code> 和 <code>nums[j]</code> 的 <strong>奇偶性</strong> 不同，那么你将失去分数 <code>x</code> 。</li></ul><p>请你返回你能得到的 <strong>最大</strong> 得分之和。</p><p><strong>注意</strong> ，你一开始的分数为 <code>nums[0]</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：nums = [2,3,6,1,9,2], x = 5<br>输出：13<br>解释：我们可以按顺序访问数组中的位置：0 -&gt; 2 -&gt; 3 -&gt; 4 。<br>对应位置的值为 2 ，6 ，1 和 9 。因为 6 和 1 的奇偶性不同，所以下标从 2 -&gt; 3 让你失去 x = 5 分。<br>总得分为：2 + 6 + 1 + 9 - 5 = 13 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：nums = [2,4,6,8], x = 3<br>输出：20<br>解释：数组中的所有元素奇偶性都一样，所以我们可以将每个元素都访问一次，而且不会失去任何分数。<br>总得分为：2 + 4 + 6 + 8 = 20 。</p></blockquote><p><strong>提示：</strong></p><ul><li>$2 &lt;= nums.length &lt;= 10^5$</li><li>$1 &lt;= nums[i], x &lt;= 10^6$</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p><strong>动态规划</strong></p><p>从左到右遍历数组，遍历到一个元素 $e$ 时，如果移动到此位置，那么能获取的最大分数取决于：</p><ul><li>上一次移动到的元素为奇数且得分最大值 $odd$</li><li>上一次移动到的元素为偶数且得分最大值 $even$</li></ul><p>即移动到当前位置可以获得的最大得分 $now$ 等于:</p><ul><li>在当前元素为奇数时：$now=max(odd+e,even+e-x)$</li><li>在当前元素为偶数时：$now=max(odd+e-x,even+e)$</li></ul><p>将最大得分之和 $score$ 更新为：</p><ul><li>$score=max(score,now)$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxScore</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 从下标0处开始</span></span><br><span class="line">        res = nums[<span class="number">0</span>]  <span class="comment"># 取第一个元素的得分</span></span><br><span class="line">        dp = [-inf, -inf]  <span class="comment"># 维护一个长度为2的数组dp来保存[even,odd]的值</span></span><br><span class="line">        dp[nums[<span class="number">0</span>] % <span class="number">2</span>] = nums[<span class="number">0</span>]  <span class="comment"># 根据第一个元素的奇偶性更新even或odd</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 从左到右遍历更新dp</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            parity = nums[i] % <span class="number">2</span>  <span class="comment"># 获取当前元素奇偶性</span></span><br><span class="line">            cur = <span class="built_in">max</span>(dp[parity] + nums[i], dp[<span class="number">1</span> - parity] + nums[i] - x)  <span class="comment"># 代入求当前得分now的公式</span></span><br><span class="line">            res = <span class="built_in">max</span>(res, cur)  <span class="comment"># 更新最大得分和</span></span><br><span class="line">            dp[parity] = <span class="built_in">max</span>(dp[parity], cur)  <span class="comment"># 更新even或odd</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：$O(n)$，其中 $n$ 是数组 $nums$ 的长度。</p></li><li><p>空间复杂度：$O(1)$。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 力扣中等 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匈牙利算法</title>
      <link href="/2022/12/11/hungarian-algorithm/"/>
      <url>/2022/12/11/hungarian-algorithm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h1><h2 id="匈牙利算法步骤"><a href="#匈牙利算法步骤" class="headerlink" title="匈牙利算法步骤"></a>匈牙利算法步骤</h2><ol><li>任给初始匹配M</li><li>若M饱和V1则结束，否则转(3)</li><li>在V1中找一个非M饱和点x，置S={x}，T={ }</li><li>若N(S)=T，则停止，否则在N(S)-T中任选一点y</li><li>若y为M饱和点转(6)，否则求一条从x到y的M可增广路P，并更新匹配M，转(2)</li><li>因为y是M饱和点，所以M中有一边(y，u)，置S=S∪{u}，T=T∪{y}，转(4)</li></ol><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><p>输入二部图如下：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-01.png" alt=""></p><p>可以由以下代码表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入二部图</span></span><br><span class="line">bi_graph = [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p><strong>(1).</strong> <strong>任给初始匹配M</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化匹配</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_matching</span>(<span class="params">graph</span>):</span><br><span class="line">    x, y = np.shape(graph)</span><br><span class="line"></span><br><span class="line">    matching = np.zeros((x, y), <span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">    matched = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, x):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, y):</span><br><span class="line">            <span class="keyword">if</span> graph[i][j] == <span class="number">1</span> <span class="keyword">and</span> j <span class="keyword">not</span> <span class="keyword">in</span> matched:</span><br><span class="line">                matching[i][j] = <span class="number">1</span></span><br><span class="line">                matched.append(j)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> matching</span><br></pre></td></tr></table></figure><p>创建一个与二部图矩阵对应的匹配矩阵，初始化匹配矩阵的规则是：遍历输入的二部图矩阵，从V1出发找到V2找边，如果该边在V2中饱和的点已经在匹配中出现，则不选择该边，当找到一条合适的边时，将其加入匹配矩阵结束本次循环，并在V1中找到下一个点继续重复以上过程。</p><p>以上过程结束后即可获得如下(a)所示初始匹配矩阵。由于此初始化方法在本例中直接给出了最大匹配，无法体现完整的算法过程，因此在之后的代码中将采用(b)作为初始匹配。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-02.png" alt="(a)"></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-03.png" alt="(b)"></p><p>(b)初始化匹配结果如图所示：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-04.png" alt=""></p><p><strong>(2).</strong> <strong>判断匹配M是否饱和V1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断匹配是否饱和所有V1点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">judge_saturated</span>(<span class="params">matching</span>):</span><br><span class="line">    saturate = np.<span class="built_in">sum</span>(matching, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> saturate:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>将匹配矩阵按维度求和，只要有一行的和等于0则M未饱和V1。如果饱和则当前匹配为最大匹配，直接输出结果，否则转到(3)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> judge_saturated(matching):</span><br><span class="line">    <span class="comment"># 若M饱和V1，则M为最大匹配</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=====(结束)=====&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最大匹配:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(matching)</span><br><span class="line">    <span class="keyword">return</span> matching</span><br></pre></td></tr></table></figure><p>该案例的饱和结果如下：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-05.png" alt=""></p><p><strong>(3).</strong> <strong>在V1中找一个非M饱和点x，置S={x}，T={ }</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化S和T</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_s_and_t</span>(<span class="params">matching</span>):</span><br><span class="line">    s = []</span><br><span class="line">    t = []</span><br><span class="line">    saturate = np.<span class="built_in">sum</span>(matching, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(saturate)):</span><br><span class="line">        <span class="keyword">if</span> saturate[i] == <span class="number">0</span>:</span><br><span class="line">            s.append(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s, t</span><br></pre></td></tr></table></figure><p>将匹配矩阵按维度求和，值为0的行对应的V1中的点即为非M饱和点，取该点为x，初始化S={x}，T={ }。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-06.png" alt=""></p><p><strong>(4).</strong> <strong>如果N(S)=T，则停止。否则选择y属于N(S)-T</strong></p><p><strong>(4.1).</strong> <strong>获得N(S) 判断N(S)与T是否相等</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得N(S)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_neighbor</span>(<span class="params">graph, s</span>):</span><br><span class="line">    x, y = np.shape(graph)</span><br><span class="line">    neighbor = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, y):</span><br><span class="line">            <span class="keyword">if</span> graph[i][j] != <span class="number">0</span> <span class="keyword">and</span> j <span class="keyword">not</span> <span class="keyword">in</span> neighbor:</span><br><span class="line">                neighbor.append(j)</span><br><span class="line"></span><br><span class="line">    neighbor.sort()</span><br><span class="line">    <span class="keyword">return</span> neighbor</span><br></pre></td></tr></table></figure><p>在二部图矩阵中，从每行出发找非零值对应的V2中的点即为该点相邻的点，找出S中的点对应的所有点即可获得N(S)的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> np.<span class="built_in">all</span>(neighbor == t):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=====(结束)=====&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最大匹配:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(matching)</span><br><span class="line">    <span class="keyword">return</span> matching</span><br></pre></td></tr></table></figure><p>如果相等则当前匹配为最大匹配，直接输出结果。</p><p><strong>(4.2). 初始化y</strong></p><p>否则初始化y∈N(S)-T</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n_minus_t = [i <span class="keyword">for</span> i <span class="keyword">in</span> neighbor <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> t]</span><br><span class="line">y = n_minus_t[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>在本案例中：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-07.png" alt=""></p><p><strong>(5.1).</strong> <strong>判断y是否为M饱和点</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断该点是否是饱和点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">if_be_saturated</span>(<span class="params">y, matching</span>):</span><br><span class="line">    saturate_y = np.<span class="built_in">sum</span>(matching, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> saturate_y[y] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>如果不是饱和点则求一条从x到y的M可增广路P，并更新匹配M，转(2)；如果是饱和点则转到(6)。</p><p>在本案例中：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-08.png" alt=""></p><p><strong>(6).</strong> <strong>因为y是M饱和点，所以M中有一边(y，u)，找到u，置S=S∪{u}，T=T∪{y}，转(4)。</strong></p><p>在本案例中，之后的过程为：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-09.png" alt=""></p><p><strong>(5.2)</strong> <strong>求一条从x到y的M可增广路P，并更新匹配M, 转(2)</strong></p><p>经过以上过程找到非饱和点y，此时x与y如图所示，需要找到一条从x到y的可增广路。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-10.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 寻找可增广路</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_augmentative_path</span>(<span class="params">graph, matching, x, y</span>):</span><br><span class="line">    <span class="comment"># 从V1到V2所有可以走的非M边</span></span><br><span class="line">    path = v1_to_v2(graph, matching, x, [], y)</span><br><span class="line">    path = path[:-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 可增广路</span></span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure><p>经过前面的算法处理，现阶段一定可以找到一个从x到y的可增广路。该路开始于x点，终止与y点。该路径中V1和V2部分的点交替出现，从V1到V2的边不在匹配M中，可以有多条，从V2到V1的边在匹配M中，只能有一条。可能找到多条可增广路，不影响最后结果的正确性。交错路以走到y点标志结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从V1到V2找一条非M边</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">v1_to_v2</span>(<span class="params">graph, matching, x, path, goal</span>):</span><br><span class="line">    a_path = []</span><br><span class="line"></span><br><span class="line">    gx, gy = np.shape(graph)</span><br><span class="line">    <span class="keyword">for</span> ggy <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, gy):</span><br><span class="line">        <span class="keyword">if</span> graph[x][ggy] == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 防止重复走同一个点</span></span><br><span class="line">            <span class="keyword">if</span> if_y_in_path(ggy, path):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果走到y则结束</span></span><br><span class="line">            <span class="keyword">if</span> ggy == goal:</span><br><span class="line">                a_path = path.copy()</span><br><span class="line">                a_path.append([x, ggy])</span><br><span class="line">                a_path.append([gx, gy])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            new_path = path.copy()</span><br><span class="line">            new_path.append([x, ggy])</span><br><span class="line"></span><br><span class="line">            v2v1 = v2_to_v1(graph, matching, ggy, new_path, goal)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(v2v1) &gt; <span class="number">0</span>:</span><br><span class="line">                a_path = v2v1</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果走到y则结束</span></span><br><span class="line">            len_of = <span class="built_in">len</span>(v2v1) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> v2v1[len_of][<span class="number">0</span>] == gx:</span><br><span class="line">                <span class="keyword">return</span> a_path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a_path</span><br></pre></td></tr></table></figure><p>从V1到V2找一条非M边的代码如上所示，graph为二部图矩阵，matching为匹配矩阵，x为本次的出发点，path保存已经走过的交错路，goal记录最终结束的点。</p><p>从graph矩阵中找出从x出发所有可以走到的V2中的点，进行判断。</p><p>如果该点已经在交错路path中出现过了，则跳过该点，因为可增广路中无重复的边，而从V2中出发的边只能走M中的边，每个点最多只有一条，因此V2中的点在本算法path中只能出现一次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断v2中的点是否已在路径中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">if_y_in_path</span>(<span class="params">y, path</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> path:</span><br><span class="line">        <span class="keyword">if</span> path[<span class="number">1</span>] == y:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>如果该点走到了y点（即与goal的值相同），说明找到了一条可增广路，将该点加入到path中，并在path的最后加上标记（a_path.append([gx, gy])）以结束该算法。</p><p>如果以上条件均不满足，则将该点加入path中，并将二部图(graph)、匹配矩阵(matching)、该V2中的点(y)、目前找到的交错路（path）、结束目标(goal)作为参数，传入v2_to_v1()方法中，以继续找到一条从V2到V1的匹配边。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从V2到V1找一条M边</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">v2_to_v1</span>(<span class="params">graph, matching, y, path, goal</span>):</span><br><span class="line">    a_path = []</span><br><span class="line"></span><br><span class="line">    mx, my = np.shape(matching)</span><br><span class="line">    <span class="keyword">for</span> mmx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, mx):</span><br><span class="line">        <span class="keyword">if</span> matching[mmx][y] == <span class="number">1</span>:</span><br><span class="line">            new_path = path.copy()</span><br><span class="line">            new_path.append([mmx, y])</span><br><span class="line"></span><br><span class="line">            v1v2 = v1_to_v2(graph, matching, mmx, new_path, goal)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(v1v2) &gt; <span class="number">0</span>:</span><br><span class="line">                a_path = v1v2</span><br><span class="line"></span><br><span class="line">            len_of = <span class="built_in">len</span>(v1v2) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> v1v2[len_of][<span class="number">0</span>] == mx:</span><br><span class="line">                <span class="keyword">return</span> a_path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a_path</span><br></pre></td></tr></table></figure><p>v2_to_v1与v1_to_v2方法相似，因为V2到V1找的是匹配边，因此不用考虑结束值和重复值的问题。</p><p>两种方法互相调用，v1_to_v2找从V1到V2的非M边，v2_to_v1找从V2到V1的M边。在两个方法的调用过程中如果出现一条死路，该方法将返回一个空表，这种情况下该空表会随着调用关系向外传递，使调用该方法的方法忽略这条路径。最终调用关系将在v1_to_v2找到y之后结束，该方法在找到y之后会在path的最后添加标记并返回，在v1_to_v2和v2_to_v1都对path最后的标记进行了检查，当检查出该标记后直接返回不再进行后续过程。</p><p>根据以上思路，在本例中找到的可增广路为：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-11.png" alt=""></p><p><strong>(5.3). 根据可增广路更新匹配，转(2)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_matching</span>(<span class="params">path, matching</span>):</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> path:</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            matching[p[<span class="number">0</span>]][p[<span class="number">1</span>]] = <span class="number">1</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            matching[p[<span class="number">0</span>]][p[<span class="number">1</span>]] = <span class="number">0</span></span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> matching</span><br></pre></td></tr></table></figure><p>根据可增广路交替更新匹配中的边。</p><p>在本案例中，更新后匹配结果如下图所示：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-12.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-13.png" alt=""></p><p>之后代码转至(2)，继续重复上述过程，直到达到结束条件，输入最大匹配。</p><p>代码的完整运行结果如下图所示：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/hungarian-algorithm/hungarian-14.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 匈牙利算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论及其应用</title>
      <link href="/2022/10/09/graph-theory-and-applications/"/>
      <url>/2022/10/09/graph-theory-and-applications/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="图论及其应用"><a href="#图论及其应用" class="headerlink" title="图论及其应用"></a>图论及其应用</h1><p>对于任意无向图G(输入为矩阵)，编写程序实现：</p><ul><li>任务一：画出图G，并给所有顶点和边标号</li><li>任务二：求出图G的度序列</li><li>任务三：画出图G的补图</li><li>任务四：判断图G的连通性</li><li>任务五：求出图G的边连通度和点连通度</li><li>任务六：求出图G的最小点割集和最小边割集(元素最少)</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="任务一（画出图G，并给所有顶点和边标号）"><a href="#任务一（画出图G，并给所有顶点和边标号）" class="headerlink" title="任务一（画出图G，并给所有顶点和边标号）"></a>任务一（画出图G，并给所有顶点和边标号）</h3><ul><li>通过 <code>BrushTools</code> 类中的 <code>draw_vertex()# 画点, draw_edge()# 画边, show()# 展示绘制图像</code> 方法实现</li><li>使用二维矩阵接收点和边，点用坐标表示，边用邻接矩阵表示，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收点</span></span><br><span class="line">v = np.array([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">4</span>], [<span class="number">7</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="comment"># 接收边</span></span><br><span class="line">e = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br></pre></td></tr></table></figure><ul><li>使用python绘图库matplotlib实现图的绘制<ul><li>使用matplotlib中的 <code>scatter(x坐标, y坐标, c=&quot;颜色&quot;)</code> 函数绘制图的顶点</li><li>使用matplotlib中的 <code>plot(x坐标, y坐标, c=&quot;颜色&quot;)</code> 函数绘制图的边，其中边的始点和终点坐标通过邻接矩阵<code>e</code>找到对应顶点坐标矩阵<code>v</code>中相应的坐标</li><li>通过matplotlib中的 <code>add_artist(plt.Circle((圆心坐标), 半径, fill=是否填充, color=&quot;颜色&quot;))</code> 函数为画布上添加圆形来表示环</li><li>使用matplotlib中的 <code>annotate(注释内容, xy=[添加注释的点的坐标], xytext=[注释文字的坐标])</code> 注释函数为点和边添加注释。注：在非简单无向图中，平行边通过为一条边添加多个不同的边注释来表示</li><li>使用matplotlib中的 <code>show()</code> 函数将绘制完的图像进行展示</li></ul></li></ul><h3 id="任务二（求出图G的度序列）"><a href="#任务二（求出图G的度序列）" class="headerlink" title="任务二（求出图G的度序列）"></a>任务二（求出图G的度序列）</h3><ul><li>通过 <code>CalcTools</code> 类中的 <code>calc_degrees()</code> 方法实现度序列的计算</li><li>因为是无向图，因此点vi的度数只需要考虑邻接矩阵 <code>e</code> 中从vi点出发的边的条数，即关注邻接矩阵中的第i行，其中，环提供两度，该方法的主要结构如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">d_line = []</span><br><span class="line">d = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.e.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.e.shape[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">if</span> self.e[i][j] &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i == j:</span><br><span class="line">                d += <span class="number">2</span> * self.e[i][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d += <span class="number">1</span> * self.e[i][j]</span><br><span class="line">    d_line.append(d)</span><br><span class="line">    d = <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>其中d_line用来保存最终返回的度序列，当i==j时，说明该边为环，当内层循环结束时，将该点的度数和添加到d_line中</li></ul><h3 id="任务三（画出图G的补图）"><a href="#任务三（画出图G的补图）" class="headerlink" title="任务三（画出图G的补图）"></a>任务三（画出图G的补图）</h3><ul><li>通过 <code>BrushTools</code> 类中的 <code>draw_complement</code> 方法实现补图的计算和绘制</li><li>先将原图预处理为简单图，遍历邻接矩阵 <code>e</code> ，将对角线数字置为0（去环），将其他非0位置的值置为1（去平行边）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, e.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, e.shape[<span class="number">1</span>]):</span><br><span class="line">        <span class="comment"># 去环</span></span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            e[i][j] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 去平行边</span></span><br><span class="line">            <span class="keyword">if</span> e[i][j] &gt; <span class="number">0</span>:</span><br><span class="line">                e[i][j] = <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>将处理后的邻接矩阵 <code>e</code> 中的非对角线位置的值进行非操作，即可获得该图补图的邻接矩阵</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, ec.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, ec.shape[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">if</span> i != j:</span><br><span class="line">            <span class="keyword">if</span> ec[i][j] == <span class="number">1</span>:</span><br><span class="line">                ec[i][j] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ec[i][j] = <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>调用任务一中实现的绘图方法 <code>BrushTools.show()</code> 实现补图的绘制与展示</li></ul><h3 id="任务四（判断图G的连通性）"><a href="#任务四（判断图G的连通性）" class="headerlink" title="任务四（判断图G的连通性）"></a>任务四（判断图G的连通性）</h3><ul><li>通过 <code>CalcTools</code> 类中的 <code>judge_connect()</code> 方法判断图的连通性</li><li>无向图中若任意两点均可达，则为连通的</li><li>从图中任意一点vi出发，将该点加入连通点列表 <code>v_connect</code> 中，判断能否到达其他不在 <code>v_connect</code> 中的点，即邻接矩阵 <code>e</code> 的第i行是否有非零数<ul><li>如果没有，则说明vi与其他点不相邻，说明该图为非连通的</li><li>如果有，则说明vi与对应点相邻，进行递归，重复以上过程，继续判断对应点是否能继续走到其他点？</li></ul></li><li>完成以上过程后，得到从vi点出发可以到达所有点的列表 <code>v_connect</code> ，对其进行处理，判断其中的元素个数是否与该图总顶点数相同，如果相同则说明从vi点出发可以到达所有顶点，该图连通，否则不连通</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算图的连通性</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_connect</span>(<span class="params">self, flag</span>):</span><br><span class="line">    self.v_connect.append(flag)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.e.shape[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> self.v_connect:</span><br><span class="line">            <span class="keyword">if</span> self.e[flag][i] != <span class="number">0</span>:</span><br><span class="line">                self.calc_connect(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断连通性</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">judge_connect</span>(<span class="params">self</span>):</span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    self.calc_connect(<span class="number">0</span>)</span><br><span class="line">    result = <span class="built_in">list</span>(<span class="built_in">set</span>(self.v_connect))</span><br><span class="line">    self.v_connect = []</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(result) == self.e.shape[<span class="number">0</span>]:</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure><h3 id="任务五、六"><a href="#任务五、六" class="headerlink" title="任务五、六"></a>任务五、六</h3><ul><li>任务五：求出图G的边连通度和点连通度</li><li>任务六：求出图G的最小点割集和最小边割集(元素最少)</li><li>任务五和任务六相关，找出最小边割集/点割集，即可获取图的边连通度/点连通度</li><li>该任务的整体思路为，以找出最小边割集为例，在连通图中从少到多删除图中的边，然后调用任务四中实现的判断图连通性的方法 <code>CalcTools.judge_connect()</code><br>或其变体<code>CalcTools.judge_connect_complex()</code><br>来判断删除边后的图的连通性，一旦图不连通，则找出一个图的最小边割集，该边割集的大小即为该图的边连通度，该方法的思想同样可以找出所有的最小边割集，此处实现只找出其中一个作为展示<ul><li>判断边连通度<ul><li>首先判断输入图是否为连通图 <code>judge_connect()</code> 非连通图直接返回空列表</li><li>第一层循环为删除的边的个数，其范围为1到n-1(n为点的个数)： <code>for num in range(1, self.e.shape[0])</code><ul><li>使用 <code>e2del = list(combinations(待组合列表, 组合大小))</code> 函数来获取本次循环中要删除的边的组合，其中待组合列表为邻接矩阵 <code>e</code><br>中所表示的所有边，组合大小为i，即本次循环要删除的边的个数， <code>e2del</code>即为本次循环中要删除的边的各种组合</li><li>第二层循环，从e2del中取出待删除的边，进行删除，然后判断图的连通性，如果不连通则找到其中一个最小边割集，将其进行返回，否则对邻接矩阵 <code>e</code> 进行复原，继续进行循环</li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> edges <span class="keyword">in</span> e2del:</span><br><span class="line">    del_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    cut = []</span><br><span class="line"></span><br><span class="line">    temp_e = copy.deepcopy(self.e)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, temp_e.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, temp_e.shape[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">while</span> temp_e[i][j] &gt; <span class="number">0</span>:</span><br><span class="line">                del_count += <span class="number">1</span></span><br><span class="line">                temp_e[i][j] -= <span class="number">1</span></span><br><span class="line">                temp_e[j][i] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> edges:</span><br><span class="line">                    <span class="comment"># 说明该边在要删除的边组合中</span></span><br><span class="line">                    <span class="keyword">if</span> del_count == e:</span><br><span class="line">                        self.e[i][j] = <span class="number">0</span></span><br><span class="line">                        self.e[j][i] = <span class="number">0</span></span><br><span class="line">                        <span class="comment"># 对该边进行保存</span></span><br><span class="line">                        cut.append((i, j))</span><br><span class="line">    <span class="comment"># 删除完边，判断图的连通性</span></span><br><span class="line">    flag = self.judge_connect()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对边进行还原</span></span><br><span class="line">    self.e = copy.deepcopy(dc_e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="keyword">return</span> cut</span><br></pre></td></tr></table></figure><ul><li>计算点割集的整体思想与计算边割集的思想一致，在 <code>CalcTools.calc_vertex_connect()</code><br>方法中实现，该方法从少到多找出所有删除点的组合，然后对点和关联边进行删除，同时判断删除点和边之后的图的连通性，此处不再做过多解释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc_vertex_connect</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 深拷贝原邻接矩阵</span></span><br><span class="line">    dc_e = copy.deepcopy(self.e)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是不是连通图</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.judge_connect():</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算图中的所有点个数</span></span><br><span class="line">    v_count = self.v.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 待组合列表</span></span><br><span class="line">    v_combination = <span class="built_in">range</span>(<span class="number">0</span>, v_count)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删点和相关联的边，然后判断是否连通</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.v.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="comment"># 确定要删除的点组合</span></span><br><span class="line">        v2del = <span class="built_in">list</span>(combinations(v_combination, num))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 循环删除要删除的点和边组合</span></span><br><span class="line">        <span class="keyword">for</span> vertexes <span class="keyword">in</span> v2del:</span><br><span class="line">            cut = []</span><br><span class="line"></span><br><span class="line">            self.e = np.array(self.e)</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> vertexes:</span><br><span class="line">                self.e[v, :] = <span class="number">0</span></span><br><span class="line">                self.e[:, v] = <span class="number">0</span></span><br><span class="line">                cut.append(v)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果删除的点数等于n-1，直接返回</span></span><br><span class="line">            <span class="keyword">if</span> num == self.v.shape[<span class="number">0</span>] - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> cut</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 删除完点和关联边，判断图的连通性</span></span><br><span class="line">            flag = self.judge_connect_complex(self.v.shape[<span class="number">0</span>], vertexes)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                <span class="keyword">return</span> cut</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 对边进行还原</span></span><br><span class="line">            self.e = copy.deepcopy(dc_e)</span><br><span class="line">    self.e = copy.deepcopy(dc_e)</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><strong>绘图工具类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BrushTools</span>:</span><br><span class="line">    <span class="comment"># 创建figure</span></span><br><span class="line">    figure = plt.figure()</span><br><span class="line">    <span class="comment"># 创建axes</span></span><br><span class="line">    axes = figure.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存点坐标</span></span><br><span class="line">    v = []</span><br><span class="line">    <span class="comment"># 保存边关系</span></span><br><span class="line">    e = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, v, e</span>):</span><br><span class="line">        self.v = v</span><br><span class="line">        self.e = e</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在画布上画点</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_vertex</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 标点</span></span><br><span class="line">        self.axes.scatter(self.v[:, <span class="number">0</span>], self.v[:, <span class="number">1</span>], c=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">        <span class="comment"># 给点加注释</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.v.shape[<span class="number">0</span>]):</span><br><span class="line">            self.axes.annotate(<span class="string">&quot;v&quot;</span> + <span class="built_in">str</span>(i),</span><br><span class="line">                               xy=[self.v[i, <span class="number">0</span>], self.v[i, <span class="number">1</span>]],</span><br><span class="line">                               xytext=[self.v[i, <span class="number">0</span>] + <span class="number">0.05</span>, self.v[i, <span class="number">1</span>] - <span class="number">0.05</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在画布上画边</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_edge</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 标边</span></span><br><span class="line">        ec = copy.deepcopy(self.e)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, ec.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, ec.shape[<span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">if</span> ec[i, j] &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 判断是不是环</span></span><br><span class="line">                    <span class="keyword">if</span> i == j:</span><br><span class="line">                        self.axes.add_artist(plt.Circle((self.v[i, <span class="number">0</span>], self.v[i, <span class="number">1</span>] + <span class="number">0.2</span>), <span class="number">0.2</span>,</span><br><span class="line">                                                        fill=<span class="literal">False</span>,</span><br><span class="line">                                                        color=<span class="string">&quot;green&quot;</span>))</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># 考虑多个环的情况，加多个注释</span></span><br><span class="line">                        a_str = <span class="string">&quot;&quot;</span></span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, ec[i][j]):</span><br><span class="line">                            a_str = a_str + <span class="string">&quot;e&quot;</span> + <span class="built_in">str</span>(count) + <span class="string">&quot;,&quot;</span></span><br><span class="line">                            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                        self.axes.annotate(a_str[:-<span class="number">1</span>],</span><br><span class="line">                                           xy=[self.v[i, <span class="number">0</span>] + <span class="number">0.15</span>, self.v[i, <span class="number">1</span>] + <span class="number">0.3</span>],</span><br><span class="line">                                           xytext=[self.v[i, <span class="number">0</span>] + <span class="number">0.15</span>, self.v[i, <span class="number">1</span>] + <span class="number">0.3</span>])</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        ec[j, i] = <span class="number">0</span></span><br><span class="line">                        x = [self.v[i, <span class="number">0</span>], self.v[j, <span class="number">0</span>]]</span><br><span class="line">                        y = [self.v[i, <span class="number">1</span>], self.v[j, <span class="number">1</span>]]</span><br><span class="line">                        self.axes.plot(x, y, c=<span class="string">&quot;green&quot;</span>)</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># 给边加注释(考虑平行边的情况)</span></span><br><span class="line">                        a_str = <span class="string">&quot;&quot;</span></span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, ec[i][j]):</span><br><span class="line">                            a_str = a_str + <span class="string">&quot;e&quot;</span> + <span class="built_in">str</span>(count) + <span class="string">&quot;,&quot;</span></span><br><span class="line">                            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                        xm = (self.v[i, <span class="number">0</span>] + self.v[j, <span class="number">0</span>]) / <span class="number">2</span></span><br><span class="line">                        ym = (self.v[i, <span class="number">1</span>] + self.v[j, <span class="number">1</span>]) / <span class="number">2</span></span><br><span class="line">                        self.axes.annotate(a_str[:-<span class="number">1</span>], xy=[xm, ym], xytext=[xm + <span class="number">0.02</span>, ym + <span class="number">0.02</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画出图的补图（考虑简单无向图）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_complement</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 预处理，确保是简单无向图</span></span><br><span class="line">        ec = copy.deepcopy(self.e)</span><br><span class="line">        ec = self.transform2simple(ec)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成补图</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, ec.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, ec.shape[<span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">if</span> i != j:</span><br><span class="line">                    <span class="keyword">if</span> ec[i][j] == <span class="number">1</span>:</span><br><span class="line">                        ec[i][j] = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        ec[i][j] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 画出补图</span></span><br><span class="line">        e_temp = copy.deepcopy(self.e)</span><br><span class="line">        self.e = ec</span><br><span class="line">        self.show()</span><br><span class="line">        self.e = e_temp</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将无向图转换为简单无向图(去环，去平行边)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">transform2simple</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, e.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, e.shape[<span class="number">1</span>]):</span><br><span class="line">                <span class="comment"># 去环</span></span><br><span class="line">                <span class="keyword">if</span> i == j:</span><br><span class="line">                    e[i][j] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 去平行边</span></span><br><span class="line">                    <span class="keyword">if</span> e[i][j] &gt; <span class="number">0</span>:</span><br><span class="line">                        e[i][j] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        self.axes.cla()</span><br><span class="line">        self.draw_vertex()</span><br><span class="line">        self.draw_edge()</span><br><span class="line"></span><br><span class="line">        plt.axis(<span class="string">&#x27;scaled&#x27;</span>)</span><br><span class="line">        self.figure.show()</span><br></pre></td></tr></table></figure><p><strong>图计算工具类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalcTools</span>:</span><br><span class="line">    <span class="comment"># 保存点坐标</span></span><br><span class="line">    v = []</span><br><span class="line">    <span class="comment"># 保存边关系</span></span><br><span class="line">    e = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 临时变量</span></span><br><span class="line">    v_connect = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, v, e</span>):</span><br><span class="line">        self.v = v</span><br><span class="line">        self.e = e</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算图的度序列</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc_degrees</span>(<span class="params">self</span>):</span><br><span class="line">        d_line = []</span><br><span class="line">        d = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.e.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.e.shape[<span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">if</span> self.e[i][j] &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> i == j:</span><br><span class="line">                        d += <span class="number">2</span> * self.e[i][j]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        d += <span class="number">1</span> * self.e[i][j]</span><br><span class="line">            d_line.append(d)</span><br><span class="line">            d = <span class="number">0</span></span><br><span class="line">        <span class="comment"># print(&quot;任务二：图的度序列为&quot; + str(d_line))</span></span><br><span class="line">        <span class="keyword">return</span> d_line</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算图的连通性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc_connect</span>(<span class="params">self, flag</span>):</span><br><span class="line">        self.v_connect.append(flag)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.e.shape[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> self.v_connect:</span><br><span class="line">                <span class="keyword">if</span> self.e[flag][i] != <span class="number">0</span>:</span><br><span class="line">                    self.calc_connect(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断连通性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">judge_connect</span>(<span class="params">self</span>):</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        self.calc_connect(<span class="number">0</span>)</span><br><span class="line">        result = <span class="built_in">list</span>(<span class="built_in">set</span>(self.v_connect))</span><br><span class="line">        self.v_connect = []</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(result) == self.e.shape[<span class="number">0</span>]:</span><br><span class="line">            <span class="comment"># print(&quot;任务四：该无向图是连通的&quot;)</span></span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># print(&quot;任务四：该图只有&quot; + str(len(result)) + &quot;个点是连通的，分别是&quot; + str(result))</span></span><br><span class="line">            <span class="comment"># print(&quot;任务四：该无向图是不连通的&quot;)</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断连通性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">judge_connect_complex</span>(<span class="params">self, v_size, del_v</span>):</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, v_size):</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> del_v:</span><br><span class="line">                <span class="comment"># print(i)</span></span><br><span class="line">                self.calc_connect(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        result = <span class="built_in">list</span>(<span class="built_in">set</span>(self.v_connect))</span><br><span class="line">        self.v_connect = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(result) == v_size - <span class="built_in">len</span>(del_v):</span><br><span class="line">            <span class="comment"># print(v_size - len(del_v))</span></span><br><span class="line">            <span class="comment"># print(&quot;任务四：该无向图是连通的&quot;)</span></span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># print(&quot;任务四：该图只有&quot; + str(len(result)) + &quot;个点是连通的，分别是&quot; + str(result))</span></span><br><span class="line">            <span class="comment"># print(&quot;任务四：该无向图是不连通的&quot;)</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算边连通度</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc_edge_connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 深拷贝原邻接矩阵</span></span><br><span class="line">        dc_e = copy.deepcopy(self.e)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是不是连通图</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.judge_connect():</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算图中的所有边数</span></span><br><span class="line">        e_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.e.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.e.shape[<span class="number">1</span>]):</span><br><span class="line">                e_count = e_count + self.e[i][j]</span><br><span class="line">        e_count = <span class="built_in">int</span>(e_count / <span class="number">2.0</span>)</span><br><span class="line">        <span class="comment"># print(&quot;总边数&quot; + str(e_count))</span></span><br><span class="line"></span><br><span class="line">        e_combination = <span class="built_in">range</span>(<span class="number">1</span>, e_count + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删边，然后判断是否连通</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.e.shape[<span class="number">0</span>]):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 确定要删除的边组合</span></span><br><span class="line">            e2del = <span class="built_in">list</span>(combinations(e_combination, num))</span><br><span class="line">            <span class="comment"># print(e2del)</span></span><br><span class="line">            <span class="comment"># 循环删除要删除的边组合</span></span><br><span class="line">            <span class="keyword">for</span> edges <span class="keyword">in</span> e2del:</span><br><span class="line">                del_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                cut = []</span><br><span class="line"></span><br><span class="line">                temp_e = copy.deepcopy(self.e)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, temp_e.shape[<span class="number">0</span>]):</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, temp_e.shape[<span class="number">1</span>]):</span><br><span class="line">                        <span class="keyword">while</span> temp_e[i][j] &gt; <span class="number">0</span>:</span><br><span class="line">                            del_count += <span class="number">1</span></span><br><span class="line">                            temp_e[i][j] -= <span class="number">1</span></span><br><span class="line">                            temp_e[j][i] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span> e <span class="keyword">in</span> edges:</span><br><span class="line">                                <span class="comment"># 说明该边在要删除的边组合中</span></span><br><span class="line">                                <span class="keyword">if</span> del_count == e:</span><br><span class="line">                                    self.e[i][j] = <span class="number">0</span></span><br><span class="line">                                    self.e[j][i] = <span class="number">0</span></span><br><span class="line">                                    <span class="comment"># print(str(self.e))</span></span><br><span class="line">                                    <span class="comment"># 对该边进行保存</span></span><br><span class="line">                                    cut.append((i, j))</span><br><span class="line">                <span class="comment"># 删除完边，判断图的连通性</span></span><br><span class="line">                <span class="comment"># print(&quot;测试连通性&quot; + &quot;\n&quot; + str(self.e))</span></span><br><span class="line"></span><br><span class="line">                flag = self.judge_connect()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 对边进行还原</span></span><br><span class="line">                self.e = copy.deepcopy(dc_e)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                    <span class="keyword">return</span> cut</span><br><span class="line"></span><br><span class="line">        self.e = copy.deepcopy(dc_e)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算点连通度</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc_vertex_connect</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 深拷贝原邻接矩阵</span></span><br><span class="line">        dc_e = copy.deepcopy(self.e)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是不是连通图</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.judge_connect():</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算图中的所有点个数</span></span><br><span class="line">        v_count = self.v.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(&quot;总点数&quot; + str(v_count))</span></span><br><span class="line"></span><br><span class="line">        v_combination = <span class="built_in">range</span>(<span class="number">0</span>, v_count)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删点和相关联的边，然后判断是否连通</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.v.shape[<span class="number">0</span>]):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 确定要删除的点组合</span></span><br><span class="line">            v2del = <span class="built_in">list</span>(combinations(v_combination, num))</span><br><span class="line">            <span class="comment"># print(v2del)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 循环删除要删除的点和边组合</span></span><br><span class="line">            <span class="keyword">for</span> vertexes <span class="keyword">in</span> v2del:</span><br><span class="line">                del_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                cut = []</span><br><span class="line"></span><br><span class="line">                <span class="comment"># print(vertexes)</span></span><br><span class="line"></span><br><span class="line">                self.e = np.array(self.e)</span><br><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> vertexes:</span><br><span class="line">                    self.e[v, :] = <span class="number">0</span></span><br><span class="line">                    self.e[:, v] = <span class="number">0</span></span><br><span class="line">                    cut.append(v)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 删除完点和关联边，判断图的连通性</span></span><br><span class="line">                <span class="comment"># print(&quot;测试连通性&quot; + &quot;\n&quot; + str(self.e))</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> num == self.v.shape[<span class="number">0</span>] - <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> cut</span><br><span class="line"></span><br><span class="line">                flag = self.judge_connect_complex(self.v.shape[<span class="number">0</span>], vertexes)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                    <span class="keyword">return</span> cut</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 对边进行还原</span></span><br><span class="line">                self.e = copy.deepcopy(dc_e)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(&quot;===================================&quot;)</span></span><br><span class="line"></span><br><span class="line">        self.e = copy.deepcopy(dc_e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>主函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> brush_tools <span class="keyword">import</span> BrushTools</span><br><span class="line"><span class="keyword">from</span> calculate_tools <span class="keyword">import</span> CalcTools</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># # 接收点</span></span><br><span class="line">    <span class="comment"># v = np.array([[1, 1], [1, 4], [7, 3], [5, 1]])</span></span><br><span class="line">    <span class="comment"># # 接收边</span></span><br><span class="line">    <span class="comment"># e = np.array([[1, 2, 0, 0],</span></span><br><span class="line">    <span class="comment">#               [2, 0, 0, 1],</span></span><br><span class="line">    <span class="comment">#               [0, 0, 0, 0],</span></span><br><span class="line">    <span class="comment">#               [0, 1, 0, 0]])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 接收点</span></span><br><span class="line">    <span class="comment"># v = np.array([[1, 1], [1, 3], [2, 2], [3, 2]])</span></span><br><span class="line">    <span class="comment"># # 接收边</span></span><br><span class="line">    <span class="comment"># e = np.array([[0, 1, 1, 0],</span></span><br><span class="line">    <span class="comment">#               [1, 0, 1, 0],</span></span><br><span class="line">    <span class="comment">#               [1, 1, 1, 1],</span></span><br><span class="line">    <span class="comment">#               [0, 0, 1, 0]])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收点</span></span><br><span class="line">    v = np.array([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">2</span>], [<span class="number">7</span>, <span class="number">1</span>], [<span class="number">7</span>, <span class="number">3</span>], [<span class="number">9</span>, <span class="number">1</span>], [<span class="number">9</span>, <span class="number">3</span>]])</span><br><span class="line">    <span class="comment"># 接收边</span></span><br><span class="line">    e = np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">                  ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 任务一：画出图G，并给所有顶点和边标号</span></span><br><span class="line">    brush = BrushTools(v, e)</span><br><span class="line">    brush.show()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;任务一：如图所示&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 任务二：求出图G的度序列</span></span><br><span class="line">    calc = CalcTools(v, e)</span><br><span class="line">    degrees = calc.calc_degrees()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;任务二：图的度序列为&quot;</span> + <span class="built_in">str</span>(degrees))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 任务三：画出图G的补图</span></span><br><span class="line">    brush.draw_complement()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;任务三：如图所示，原图已被处理为简单无向图&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 任务四：连通性</span></span><br><span class="line">    calc = CalcTools(v, e)</span><br><span class="line">    flag = calc.judge_connect()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;任务四：该图的连通性为&quot;</span> + <span class="built_in">str</span>(flag))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 任务五：求边连通度和点连通度</span></span><br><span class="line">    calc = CalcTools(v, e)</span><br><span class="line">    e_cut_set = calc.calc_edge_connect()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;任务五、六：边连通度是&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(e_cut_set)) + <span class="string">&quot;,最小边割集是&quot;</span> + <span class="built_in">str</span>(e_cut_set))</span><br><span class="line"></span><br><span class="line">    v_cut_set = calc.calc_vertex_connect()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;任务五、六：点连通度是&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(v_cut_set)) + <span class="string">&quot;,最小点割集是&quot;</span> + <span class="built_in">str</span>(v_cut_set))</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><h3 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h3><ul><li>画出图G，并给所有顶点和边标号</li><li>输入点和边如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v = np.array([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">4</span>], [<span class="number">7</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">1</span>]])</span><br><span class="line">e = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br></pre></td></tr></table></figure><ul><li>绘图结果展示：</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/graph-theory-and-applications/graph-01.png" alt="任务一"></p><h3 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h3><ul><li>求出图G的度序列</li><li>输入点和边与任务一相同，度序列如下，与任务一展示图结果相对应，注：图中e1和e2为平行边</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任务二：图的度序列为[4, 3, 0, 1]</span></span><br></pre></td></tr></table></figure><h3 id="任务三"><a href="#任务三" class="headerlink" title="任务三"></a>任务三</h3><ul><li>画出图G的补图</li><li>输入点和边与任务一相同，补图如下所示，与任务一的结果相对应</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/graph-theory-and-applications/graph-02.png" alt="任务三"></p><h3 id="任务四"><a href="#任务四" class="headerlink" title="任务四"></a>任务四</h3><ul><li>判断图G的连通性</li><li>输入点和边与任务一相同，运行方法判断图的连通性，结果如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任务四：该图的连通性为False</span></span><br></pre></td></tr></table></figure><ul><li>重新输入新的点坐标和边邻接矩阵，使新的图连通，如下所示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接收点</span></span><br><span class="line">v = np.array([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="comment"># 接收边</span></span><br><span class="line">e = np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]])</span><br></pre></td></tr></table></figure><ul><li>重新输入图的展示与连通性判断结果如下：</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/graph-theory-and-applications/graph-03.png" alt="任务四"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任务四：该图的连通性为True</span></span><br></pre></td></tr></table></figure><h3 id="任务五、六-1"><a href="#任务五、六-1" class="headerlink" title="任务五、六"></a>任务五、六</h3><ul><li>求出图G的边连通度和点连通度</li><li>求出图G的最小点割集和最小边割集(元素最少)</li><li>输入的图如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接收点</span></span><br><span class="line">v = np.array([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">2</span>], [<span class="number">7</span>, <span class="number">1</span>], [<span class="number">7</span>, <span class="number">3</span>], [<span class="number">9</span>, <span class="number">1</span>], [<span class="number">9</span>, <span class="number">3</span>]])</span><br><span class="line"><span class="comment"># 接收边</span></span><br><span class="line">e = np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">              ])</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/graph-theory-and-applications/graph-04.png" alt="任务五"></p><ul><li>边割集/点割集，边连通度/点连通度计算结果如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任务五、六：边连通度是2,最小边割集是[(2, 4), (3, 4)]</span></span><br><span class="line"><span class="comment"># 任务五、六：点连通度是1,最小点割集是[4]</span></span><br></pre></td></tr></table></figure><ul><li>其中边割集(2,4)表示从点v2到v4的边，即图中的e6，同理(3,4)表示图中的e7</li><li>点割集中的4表示图中的v4</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无人机任务</title>
      <link href="/2022/09/27/drone_task/"/>
      <url>/2022/09/27/drone_task/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="无人机任务"><a href="#无人机任务" class="headerlink" title="无人机任务"></a>无人机任务</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p><strong>Scenario:</strong> A drone is mounted with an internal GPS system and a 1D spinning LIDAR (something like this <a href="http://www.slamtec.com/en/lidar/a1">http://www.slamtec.com/en/lidar/a1</a>). Every time the drone changes direction, the LIDAR does 1 full scan (sweep) of its surroundings. Our goal is to use the LIDAR data to improve the drone’s navigation. For this assignment altitude and drone orientation can be ignored. You can also assume that the scan is so fast that you can treat the drone as stationary for each sweep. One flight’s worth of data is provided consisting of $N$ sweeps over $x$ seconds.</p><p><strong>场景：</strong>一架无人机配备了内部GPS系统和一个一维旋转LIDAR（类似于这个：<a href="http://www.slamtec.com/en/lidar/a1">http://www.slamtec.com/en/lidar/a1</a> ）。每当无人机改变方向时，LIDAR都会对其周围环境进行一次完整的扫描（扫描一圈）。我们的目标是利用LIDAR数据来改进无人机的导航。在本次任务中，可以忽略无人机的高度和方向。此外，可以假设扫描速度足够快，以至于在每次扫描期间可以将无人机视为静止的。提供了一次飞行的数据，其中包含N次扫描，持续x秒。</p><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p><strong>Tasks:</strong> For this assessment complete any 2 of the following Tasks. It is recommended that you pick 2 Tasks that assist each other. Any language may be used however Java, C#, C++ or Python are preferred. You may use prebuilt libraries for any of your data processing if you wish.</p><p><strong>任务：</strong>在本次评估中，请完成以下任务中的任意两个。建议选择能够相互辅助的两个任务。可以使用任何编程语言，但推荐使用 Java、C#、C++ 或 Python。如果需要，您可以使用预构建的库来处理数据。</p><ol><li><p><strong>Display:</strong> Create a program to provide an appropriate visualization of the drone’s path and the LIDAR data. Ideally, the display should be able to show 1 sweep (1 scan ID) of data in isolation as well as all the sweeps combined together. This can be on separate displays or on the same display (with individual sweeps shown by highlighting for example)</p><ul><li><p><strong>Input:</strong> LIDARDPoints.csv and FlightPath.csv (provided or created from another Task)</p></li><li><p><strong>Output:</strong> On-screen display</p></li></ul><p><strong>显示：</strong>编写一个程序，以适当的方式可视化无人机的飞行路径和LIDAR数据。理想情况下，显示应能够单独呈现一次扫描（1个扫描ID）的数据，以及所有扫描数据的整体可视化。这可以在不同的显示界面上实现，也可以在同一界面上实现（例如，通过高亮显示单次扫描）。</p><ul><li><p><strong>输入：</strong>LIDARDPoints.csv 和 FlightPath.csv（提供的数据或由其他任务生成）</p></li><li><p><strong>输出：</strong>屏幕显示</p></li></ul></li><li><p><strong>Simulation:</strong> Generate new <strong>LIDARDPoints</strong> data based on a new room layout and new plausible flight plan. This data is not provided so you will need to create the layout and flight plan yourself. This can either be done manually (ensure you include your data with your submission) or programmatically.</p><ul><li><strong>Input</strong>: Mapping.csv and FlightPath.csv (created, you may also use a map that matches the sample data provided however you will first need to generate this file [from part 5 for example]).</li><li><strong>Output:</strong> LIDARDPoints<strong>.</strong>csv</li></ul><p><strong>模拟：</strong>基于新的房间布局和新的合理飞行计划生成新的<strong>LIDARDPoints</strong>数据。由于未提供该数据，因此您需要自行创建房间布局和飞行计划。这可以手动完成（请确保在提交时包含您的数据），也可以通过编程方式生成。</p><ul><li><p><strong>输入：</strong>Mapping.csv 和 FlightPath.csv（需要创建，您也可以使用与提供的示例数据匹配的地图，但首先需要生成此文件（例如从第5部分生成））</p></li><li><p><strong>输出：</strong>LIDARDPoints<strong>.</strong>csv</p></li></ul></li><li><p><strong>Flight optimization:</strong> Based on the data provided, find a better flight path that will result in the shortest possible travel time but still goes through the existing rooms. (Assume the first sampled location is the start point and the last sampled location is the end point).</p><ul><li><strong>Input:</strong> LIDARDPoints.csv and FlightPath.csv (provided or created)</li><li><strong>Output:</strong> FlightPath.csv</li></ul><p><strong>飞行优化：</strong>于提供的数据，寻找一条更优的飞行路径，使其在仍然经过现有房间的前提下，实现最短的旅行时间。（假设第一个采样位置为起点，最后一个采样位置为终点）。</p><ul><li><p><strong>输入：</strong>LIDARDPoints.csv 和 FlightPath.csv（提供的数据或自行创建）。</p></li><li><p><strong>输出：</strong>FlightPath.csv</p></li></ul></li><li><p><strong>Flight reroute:</strong> Based on the data provided, find an alternative route that will take you to the end point faster. You may go through different rooms.</p><ul><li><strong>Input</strong>: LIDARDPoints.csv and FlightPath.csv (provided or created)</li><li><strong>Output:</strong> FlightPath.csv</li></ul><p><strong>飞行路线重规划：</strong>基于提供的数据，寻找一条替代路线，使无人机更快到达终点。可以经过不同的房间。</p><ul><li><p><strong>输入：</strong>LIDARDPoints.csv 和 FlightPath.csv（提供的数据或自行创建）。</p></li><li><p><strong>输出：</strong>FlightPath.csv</p></li></ul></li><li><p><strong>Mapping:</strong> Use the multiple data sweeps to map out the dimensions of the rooms.</p><ul><li><strong>Input</strong>: LIDARDPoints.csv and FlightPath.csv (provided or created)</li><li><strong>Output:</strong> Mapping.csv</li></ul><p><strong>映射：</strong>利用多次数据扫描来绘制房间的尺寸。</p><ul><li><strong>输入：</strong>LIDARDPoints.csv 和 FlightPath.csv（提供的数据或自行创建）。</li><li><strong>输出：</strong>Mapping.csv</li></ul></li></ol><h2 id="格式要求"><a href="#格式要求" class="headerlink" title="格式要求"></a>格式要求</h2><p><strong>Format:</strong></p><ul><li><strong>Program IO:</strong> As input, your program should take a path to the CSV files you will use as an input. As output, if the result is a data outputting Task, should be a csv, otherwise, if the Task is a visualization Task, it should display as it runs.</li><li><strong>File Format:</strong> Each time the drone takes a sample of data it generates a unique corresponding scan ID. This ID is shared between files and you can link location and lidar data using it.<ul><li><strong>FlightPath:</strong> FlightPath data is provided (and should be written in if you generate it) as a CSV file. The first line has the scan ID and number of data line (always 1). The next line is the X,Y location of the drone in meters.</li><li><strong>LIDARDPoints:</strong> LIDARPoints data is provided (and should also be the output format, if you generate LIDAR data) as a CSV file. The first line has the scan ID and number of data lines (number of recorded points for that sweep). Each following line has the angle of the data point (in degrees) and the distance (in millimeters) until the next scan ID header line. 34 sweeps are included.</li><li><strong>Mapping:</strong> If you generate a map of the rooms (Task 5) the results should be printed to a csv file. Each line of the file should represent one wall in the building. Each wall should be represented by its start and end point in millimeters (xstart, ystart, xend, ystart).</li></ul></li></ul><p><strong>格式要求：</strong></p><ul><li><strong>程序输入/输出（Program IO）：</strong>作为输入，程序应接受要使用的 CSV 文件的路径。作为输出，如果任务涉及数据输出，则应生成 CSV 文件；如果任务是可视化任务，则应在程序运行时进行显示。</li><li><strong>文件格式（File Format）：</strong>每次无人机采样数据时，都会生成一个唯一的扫描 ID，该 ID 在不同的文件中共享，可用于关联位置信息和 LIDAR 数据。<ul><li><strong>FlightPath（飞行路径）：</strong>该数据以 CSV 文件格式提供（如果生成新数据，也应以相同格式写入）。第一行包含扫描 ID 和数据行数（始终为 1）。第二行记录无人机的 X、Y 位置（单位：米）。</li><li><strong>LIDARDPoints（LIDAR 数据点）：</strong>该数据以 CSV 文件格式提供（如果生成新的 LIDAR 数据，也应以相同格式输出）。第一行 包含扫描 ID 和数据行数（即该次扫描记录的点数）。接下来的每一行记录数据点的角度（单位：度）和该方向上的距离（单位：毫米），直到遇到下一个扫描 ID 标题行。总共包含 34 次扫描数据。</li><li><strong>Mapping（房间映射）：</strong>如果执行了任务 5（生成房间地图），结果应输出到 CSV 文件。文件中的每一行代表建筑中的一面墙。每面墙的表示方式：起点坐标（xstart, ystart）和终点坐标（xend, yend），单位为毫米。</li></ul></li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/drone-task/drone-01.png" alt="Format Example"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>任务说明文件和相关数据保存在<a href="https://github.com/rr-Razor/drone_task/tree/master/task_related"><code>./task_related</code></a>路径下</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>python3</li><li>安装pandas库(用于读取csv文件)</li><li>安装numpy(处理矩阵)</li><li>安装matplotlib(用于本任务绘图)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br><span class="line">pip install numpy</span><br><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><h3 id="部分任务实现"><a href="#部分任务实现" class="headerlink" title="部分任务实现"></a>部分任务实现</h3><ul><li><p>任务1</p><ul><li><p>读取GPS坐标，使用matplotlib库实现绘制飞行轨迹。</p></li><li><p>读取雷达扫描信息，根据角度将据墙壁的距离映射到x和y轴上，与对应GPS坐标相加获得扫描点的坐标，使用matplotlib将所有扫描点进行绘制即可得到墙壁。</p></li><li><p>注意本任务中数据的特殊性，GPS坐标和雷达扫描坐标x轴一致，y轴方向相反。</p></li></ul></li><li><p>任务5</p><ul><li>从任务1中获取墙壁雷达扫描点的坐标，因为扫描点存在误差，因为忽略掉坐标的小数位和个十位，使同一面墙的扫描点位于同一直线上。</li><li>观察数据，墙壁只有x轴和y轴两个走向，分别按y轴方向和按x轴方向检测墙壁，以y轴方向为例。</li><li>扫描点坐标矩阵进行排序，使其按照x坐标由小到大排列，当x坐标相同时，按照y坐标大小进行由小到大排列。</li><li>遍历排序后的矩阵，将第一个点的坐标设置给x_start,y_start，遍历的过程中进行两种情况的判断：</li><li>判断1(x坐标变化)：<ul><li>当前点与上一个点x坐标是否相等，因为在检索y轴走向墙壁，x坐标不相等则为不同墙壁</li><li>如不相等，继续判断上一坐标点的坐标与x_start,y_start的值是否相等以排除x轴走向墙壁的情况</li><li>当前点x坐标与上一点不同且上一点坐标与x_start,y_start不同，说明上一个点为墙壁的结束点，将上个点的坐标设置给x_end,y_end，将当前x_start,y_start，x_end,y_end进行保存，将当前点的坐标设置给x_start,y_start，继续遍历。</li></ul></li><li>判断2(y坐标的差值)：<ul><li>当x坐标相同时，y轴差距过大，说明不是同一个墙壁</li><li>因为在进行数据预处理时，将坐标个十位和小数点忽略，因此在一个墙壁上的连续点的差值均为100</li><li>在遍历的过程中，用当前点y坐标减去上一个点的y坐标，其差值大于100则说明不在同一墙壁上，将上个点的坐标设置给x_end,y_end，将当前x_start,y_start,x_end,y_end进行保存，将当前点的坐标设置给x_start,y_start，继续遍历。</li></ul></li><li>x轴走向的墙壁探测思路与y轴相同，完成对x和y轴走向墙壁的探测，即可获取墙壁起止坐标的映射。</li></ul></li></ul><p><strong>绘图工具类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图工具</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Draw</span>:</span><br><span class="line">    <span class="comment"># 创建figure</span></span><br><span class="line">    figure = plt.figure()</span><br><span class="line">    <span class="comment"># 创建axes</span></span><br><span class="line">    axes = figure.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存FlightPath.csv数据</span></span><br><span class="line">    paths = [[]]</span><br><span class="line">    <span class="comment"># 保存LIDARPoints.csv数据</span></span><br><span class="line">    points = [[]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存扫描点坐标</span></span><br><span class="line">    x = []</span><br><span class="line">    y = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 路径点个数和扫描点的个数</span></span><br><span class="line">    num_of_paths = <span class="number">0</span></span><br><span class="line">    num_of_points = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, paths_origin, points_origin</span>):</span><br><span class="line">        <span class="comment"># 坐标点预处理</span></span><br><span class="line">        paths = paths_origin[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">        <span class="comment"># 将坐标点的单位由米转换为毫米</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, paths.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, paths.shape[<span class="number">1</span>]):</span><br><span class="line">                paths[i][j] = paths[i][j] * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">        self.num_of_paths = paths.shape[<span class="number">0</span>]</span><br><span class="line">        self.num_of_points = points_origin.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 属性赋值</span></span><br><span class="line">        self.paths = paths</span><br><span class="line">        self.points = points_origin</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制飞行轨迹</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_paths</span>(<span class="params">self</span>):</span><br><span class="line">        self.axes.plot(self.paths[:, <span class="number">0</span>], self.paths[:, <span class="number">1</span>], c=<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">        self.axes.scatter(self.paths[:, <span class="number">0</span>], self.paths[:, <span class="number">1</span>], c=<span class="string">&quot;blue&quot;</span>, s=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制扫描点</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_points</span>(<span class="params">self</span>):</span><br><span class="line">        self.transfer()</span><br><span class="line">        self.axes.scatter(self.x, self.y, c=<span class="string">&quot;red&quot;</span>, s=<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># self.axes.plot(self.x, self.y, c=&quot;red&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 扫描点坐标转换</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">transfer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 遍历扫描点</span></span><br><span class="line">        p_id = <span class="number">0</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.num_of_points):</span><br><span class="line">            <span class="comment"># 判断是否是id行</span></span><br><span class="line">            <span class="keyword">if</span> i == count:</span><br><span class="line">                count = count + self.points[i][<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                p_id = <span class="built_in">int</span>(self.points[i][<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 获取扫描点扫描墙壁的坐标</span></span><br><span class="line">                x = self.paths[p_id][<span class="number">0</span>] + self.points[i][<span class="number">1</span>] * math.cos(self.points[i][<span class="number">0</span>] / <span class="number">180</span> * math.pi)</span><br><span class="line">                y = self.paths[p_id][<span class="number">1</span>] - self.points[i][<span class="number">1</span>] * math.sin(self.points[i][<span class="number">0</span>] / <span class="number">180</span> * math.pi)</span><br><span class="line">                self.x.append(x)</span><br><span class="line">                self.y.append(y)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">zip</span>(self.x, self.y))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示绘制结果</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure><p><strong>墙壁映射工具类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 墙壁映射工具</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mapping</span>:</span><br><span class="line">    <span class="comment"># 墙壁扫描点</span></span><br><span class="line">    wall_points = [[]]</span><br><span class="line">    <span class="comment"># 墙壁映射</span></span><br><span class="line">    wall_map = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, wall_points</span>):</span><br><span class="line">        <span class="comment"># 将浮点数转换为整数</span></span><br><span class="line">        self.wall_points = np.array(wall_points).astype(dtype=<span class="built_in">int</span>)</span><br><span class="line">        <span class="comment"># 将整数个十位省略</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.wall_points.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.wall_points.shape[<span class="number">1</span>]):</span><br><span class="line">                self.wall_points[i][j] = <span class="built_in">int</span>(self.wall_points[i][j] / <span class="number">100</span>) * <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sort_points</span>(<span class="params">self, flag</span>):</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 按照先行再列从小到大排序</span></span><br><span class="line">            index = np.lexsort((self.wall_points[:, <span class="number">1</span>], self.wall_points[:, <span class="number">0</span>]))</span><br><span class="line">            self.wall_points = self.wall_points[index]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 按照先列再行从小到大排序</span></span><br><span class="line">            index = np.lexsort((self.wall_points[:, <span class="number">0</span>], self.wall_points[:, <span class="number">1</span>]))</span><br><span class="line">            self.wall_points = self.wall_points[index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wall_xy</span>(<span class="params">self, axis</span>):</span><br><span class="line">        <span class="comment"># 对墙壁扫描点进行排序处理</span></span><br><span class="line">        self.sort_points(axis)</span><br><span class="line">        <span class="comment"># 先找竖着的墙</span></span><br><span class="line">        x_start = self.wall_points[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        y_start = self.wall_points[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.wall_points.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="comment"># 判断是否在同一竖线上</span></span><br><span class="line">            a = <span class="number">0</span></span><br><span class="line">            b = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> axis == <span class="number">1</span>:</span><br><span class="line">                a = <span class="number">0</span></span><br><span class="line">                b = x_start</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = <span class="number">1</span></span><br><span class="line">                b = y_start</span><br><span class="line">            <span class="keyword">if</span> self.wall_points[i][a] != b:</span><br><span class="line">                <span class="keyword">if</span> x_start != self.wall_points[i - <span class="number">1</span>][<span class="number">0</span>] <span class="keyword">or</span> y_start != self.wall_points[i - <span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">                    x_end = self.wall_points[i - <span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">                    y_end = self.wall_points[i - <span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                    self.wall_map.append([x_start, y_start, x_end, y_end])</span><br><span class="line"></span><br><span class="line">                x_start = self.wall_points[i][<span class="number">0</span>]</span><br><span class="line">                y_start = self.wall_points[i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 判断是否属于同一面墙</span></span><br><span class="line">                <span class="keyword">if</span> self.wall_points[i][axis] - self.wall_points[i - <span class="number">1</span>][axis] &gt; <span class="number">100</span>:</span><br><span class="line">                    <span class="keyword">if</span> x_start != self.wall_points[i - <span class="number">1</span>][<span class="number">0</span>] <span class="keyword">or</span> y_start != self.wall_points[i - <span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">                        x_end = self.wall_points[i - <span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">                        y_end = self.wall_points[i - <span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                        self.wall_map.append([x_start, y_start, x_end, y_end])</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> axis == <span class="number">1</span>:</span><br><span class="line">                        y_start = self.wall_points[i][<span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        x_start = self.wall_points[i][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        x_end = self.wall_points[self.wall_points.shape[<span class="number">0</span>] - <span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        y_end = self.wall_points[self.wall_points.shape[<span class="number">0</span>] - <span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        self.wall_map.append([x_start, y_start, x_end, y_end])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wall_mapping</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 找出y轴走向的墙壁</span></span><br><span class="line">        self.wall_xy(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 找出x轴走向的墙壁</span></span><br><span class="line">        self.wall_xy(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出墙壁映射结果</span></span><br><span class="line">        pd.DataFrame(self.wall_map).to_csv(<span class="string">&quot;./data/output/Mapping.csv&quot;</span>, index=<span class="literal">None</span>, header=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><strong>主函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> painting_tools <span class="keyword">import</span> Draw</span><br><span class="line"><span class="keyword">from</span> wall_map <span class="keyword">import</span> Mapping</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务一：数据可视化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task1_display</span>(<span class="params">paths, points</span>):</span><br><span class="line">    draw = Draw(paths, points)</span><br><span class="line">    <span class="comment"># 绘制飞行路径</span></span><br><span class="line">    draw.draw_paths()</span><br><span class="line">    <span class="comment"># 绘制墙壁</span></span><br><span class="line">    draw.draw_points()</span><br><span class="line">    <span class="comment"># 绘制结果展示</span></span><br><span class="line">    draw.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务五：获取墙壁映射</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task5_mapping</span>(<span class="params">paths, points</span>):</span><br><span class="line">    <span class="comment"># 获取墙壁扫描点</span></span><br><span class="line">    draw2 = Draw(paths, points)</span><br><span class="line">    wall_points = draw2.transfer()</span><br><span class="line">    <span class="comment"># 根据扫描点计算墙壁映射</span></span><br><span class="line">    mapping = Mapping(wall_points)</span><br><span class="line">    mapping.wall_mapping()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 读数据</span></span><br><span class="line">    paths_origin = pd.read_csv(<span class="string">&quot;./data/input/FlightPath.csv&quot;</span>, header=<span class="literal">None</span>).values</span><br><span class="line">    points_origin = pd.read_csv(<span class="string">&quot;./data/input/LIDARPoints.csv&quot;</span>, header=<span class="literal">None</span>).values</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拷贝数据</span></span><br><span class="line">    paths1 = copy.deepcopy(paths_origin)</span><br><span class="line">    points1 = copy.deepcopy(points_origin)</span><br><span class="line">    paths2 = copy.deepcopy(paths_origin)</span><br><span class="line">    points2 = copy.deepcopy(points_origin)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用任务一方法</span></span><br><span class="line">    task1_display(paths1, points1)</span><br><span class="line">    <span class="comment"># 调用任务五方法</span></span><br><span class="line">    task5_mapping(paths2, points2)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;任务处理结束，请在&quot;./data/output/Mapping.csv&quot;中查看输出结果&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><ul><li>任务1结果<ul><li>任务一图中，蓝色线为无人机飞行轨迹，蓝色点为无人机GPS定位点，红色墙壁由多个雷达扫描点组成。</li></ul></li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/drone-task/drone-02.png" alt="任务1"></p><ul><li>任务5结果<ul><li>任务5图中，一行为一组坐标，其中A列为x_start，B列为y_start, C列位x_end，D列为y_end。</li><li>任务5的数据对应任务1中的红色墙壁，其中两个房间连接处较短的线段也被认为是一面墙壁，映射结果与图片展示结果是对应的。</li></ul></li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/drone-task/drone-03.png" alt="任务5"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无人机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GUI编程</title>
      <link href="/2021/01/21/gui-programming/"/>
      <url>/2021/01/21/gui-programming/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程</h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>窗口</li><li>弹窗</li><li>面板</li><li>文本框</li><li>列表框</li><li>按钮</li><li>图片</li><li>监听事件</li><li>鼠标事件</li><li>键盘事件</li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Gui核心技术： Swing、AWT</p><p>被逐渐淘汰原因：</p><ol><li>界面不美观</li><li>需要jre环境</li></ol><h2 id="AWT"><a href="#AWT" class="headerlink" title="AWT"></a>AWT</h2><h3 id="AWT（抽象窗口工具）介绍"><a href="#AWT（抽象窗口工具）介绍" class="headerlink" title="AWT（抽象窗口工具）介绍"></a>AWT（抽象窗口工具）介绍</h3><ol><li>包含很多类和接口</li><li>元素：窗口、按钮、文本框</li><li>java.awt</li></ol><h3 id="Frame图像窗口界面"><a href="#Frame图像窗口界面" class="headerlink" title="Frame图像窗口界面"></a>Frame图像窗口界面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//窗口</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;java图形界面窗口&quot;</span>);</span><br><span class="line">        <span class="comment">//设置可见性</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//设置窗口大小</span></span><br><span class="line">        frame.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        <span class="comment">//设置背景颜色</span></span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//弹出的初始位置</span></span><br><span class="line">        frame.setLocation(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="comment">//设置大小固定(窗口大小不可拉伸)</span></span><br><span class="line">        frame.setResizable(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Frame图像窗口自定义封装"><a href="#Frame图像窗口自定义封装" class="headerlink" title="Frame图像窗口自定义封装"></a>Frame图像窗口自定义封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFrame2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyFrame</span> <span class="variable">myFrame1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>,Color.red);</span><br><span class="line">        <span class="type">MyFrame</span> <span class="variable">myFrame2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="number">300</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">200</span>,Color.yellow);</span><br><span class="line">        <span class="type">MyFrame</span> <span class="variable">myFrame3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="number">500</span>,<span class="number">500</span>,<span class="number">200</span>,<span class="number">200</span>,Color.blue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//计数器，可能存在多个窗口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrame</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> w, <span class="type">int</span> h, Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;MyFrame&quot;</span>+(++id));</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//设置屏幕位置和宽高</span></span><br><span class="line">        setBounds(x,y,w,h);</span><br><span class="line">        setBackground(color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Panel面板"><a href="#Panel面板" class="headerlink" title="Panel面板"></a>Panel面板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPanel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        <span class="comment">//面板</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        <span class="comment">//设置布局</span></span><br><span class="line">        frame.setLayout(<span class="literal">null</span>);</span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//panel的坐标相对于frame</span></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">        <span class="comment">//将panel放入frame</span></span><br><span class="line">        frame.add(panel);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听窗口关闭事件</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//结束程序</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三种布局管理器"><a href="#三种布局管理器" class="headerlink" title="三种布局管理器"></a>三种布局管理器</h3><ul><li>流式布局FlowLayout</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFlowLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">        <span class="comment">//按钮组件</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button1&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button2&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button3&quot;</span>);</span><br><span class="line">        <span class="comment">//设置为流式布局</span></span><br><span class="line">        <span class="comment">//frame.setLayout(new FlowLayout()); 默认居中</span></span><br><span class="line">        <span class="comment">//frame.setLayout(new FlowLayout(FlowLayout.LEFT));  靠左</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.RIGHT));  <span class="comment">//靠右</span></span><br><span class="line">        frame.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.add(button1);</span><br><span class="line">        frame.add(button2);</span><br><span class="line">        frame.add(button3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>东西南北中BorderLayout</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBorderLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;TestBorderLayout&quot;</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">east</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;east&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">west</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;west&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">south</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;south&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">north</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;north&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">center</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;center&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.add(east,BorderLayout.EAST);</span><br><span class="line">        frame.add(west,BorderLayout.WEST);</span><br><span class="line">        frame.add(south,BorderLayout.SOUTH);</span><br><span class="line">        frame.add(north,BorderLayout.NORTH);</span><br><span class="line">        frame.add(center,BorderLayout.CENTER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/gui-programming/gui-01.png" alt=""></p><ul><li>表格布局GridLayout</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGridLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;GridLayout&quot;</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn3&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn4&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn5&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        frame.add(btn1);</span><br><span class="line">        frame.add(btn2);</span><br><span class="line">        frame.add(btn3);</span><br><span class="line">        frame.add(btn4);</span><br><span class="line">        frame.add(btn5);</span><br><span class="line">        frame.add(btn6);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//frame.pack();//自动布局</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/gui-programming/gui-02.png" alt=""></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/gui-programming/gui-03.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        frame.setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">250</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        p1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;west-1&quot;</span>),BorderLayout.WEST);</span><br><span class="line">        p1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;east-1&quot;</span>),BorderLayout.EAST);</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;p2-btn-1&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;p2-btn-2&quot;</span>));</span><br><span class="line">        p1.add(p2,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        p3.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;west-2&quot;</span>),BorderLayout.WEST);</span><br><span class="line">        p3.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;east-2&quot;</span>),BorderLayout.EAST);</span><br><span class="line">        p4.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;p4-btn-1&quot;</span>));</span><br><span class="line">        p4.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;p4-btn-2&quot;</span>));</span><br><span class="line">        p4.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;p4-btn-3&quot;</span>));</span><br><span class="line">        p4.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;p4-btn-4&quot;</span>));</span><br><span class="line">        p3.add(p4,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        frame.add(p1);</span><br><span class="line">        frame.add(p3);</span><br><span class="line">        </span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>Frame是一个顶级窗口</li><li>Panel无法单独显示，必须添加到某个容器中</li><li>布局管理器<ol><li>流式</li><li>东西南北中</li><li>表格</li></ol></li><li>大小、定位、背景颜色、可见性、监听</li></ol><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>按钮事件监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;事件监听&quot;</span>);</span><br><span class="line">        frame.setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按钮事件监听</span></span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent actionEvent)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;按下按钮&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        frame.add(btn);</span><br><span class="line">        windowClosing(frame);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭窗口事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(Frame frame)</span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>共用一个监听事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;stop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以显示定义命令，没有就是默认值</span></span><br><span class="line">        btn2.setActionCommand(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MyMonitor</span> <span class="variable">monitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyMonitor</span>();</span><br><span class="line">        btn1.addActionListener(monitor);</span><br><span class="line">        btn2.addActionListener(monitor);</span><br><span class="line"></span><br><span class="line">        frame.add(btn1,BorderLayout.NORTH);</span><br><span class="line">        frame.add(btn2,BorderLayout.SOUTH);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        windowClosing(frame);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭窗口事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(Frame frame)</span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMonitor</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent actionEvent)</span> &#123;</span><br><span class="line">        <span class="comment">//actionEvent.getActionCommand() 获得按钮信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getActionCommand():&quot;</span>+actionEvent.getActionCommand());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入框监听"><a href="#输入框监听" class="headerlink" title="输入框监听"></a>输入框监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">textField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>();</span><br><span class="line">        add(textField);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听文本框文字</span></span><br><span class="line">        textField.addActionListener(<span class="keyword">new</span> <span class="title class_">MyActionListener</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置替换编码</span></span><br><span class="line">        textField.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">250</span>);</span><br><span class="line">        pack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyActionListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent actionEvent)</span> &#123;</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">field</span> <span class="operator">=</span> (TextField) actionEvent.getSource();<span class="comment">//返回一个对象</span></span><br><span class="line">        System.out.println(field.getText());<span class="comment">//获取输入的文本</span></span><br><span class="line">        field.setText(<span class="string">&quot;&quot;</span>);<span class="comment">//将文本框内容设置为空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算器实现"><a href="#计算器实现" class="headerlink" title="计算器实现"></a>计算器实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextField num1;</span><br><span class="line">    <span class="keyword">private</span> TextField num2;</span><br><span class="line">    <span class="keyword">private</span> TextField num3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calculator</span><span class="params">()</span> &#123;</span><br><span class="line">        loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//组件</span></span><br><span class="line">        num1 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);</span><br><span class="line">        num2 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);</span><br><span class="line">        num3 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">20</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听器</span></span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">MyCalListener</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//布局</span></span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">        add(num1);</span><br><span class="line">        add(label);</span><br><span class="line">        add(num2);</span><br><span class="line">        add(button);</span><br><span class="line">        add(num3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//窗口</span></span><br><span class="line">        setTitle(<span class="string">&quot;计算器&quot;</span>);</span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        closingWindow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closingWindow</span><span class="params">()</span> &#123;</span><br><span class="line">        addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听器类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyCalListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent actionEvent)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(num1.getText());</span><br><span class="line">            <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> Integer.parseInt(num2.getText());</span><br><span class="line">            num3.setText(n1+n2+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            num1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            num2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPaint</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyPaint</span>().loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPaint</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">800</span>,<span class="number">600</span>);</span><br><span class="line">        closingWindow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closingWindow</span><span class="params">()</span>&#123;</span><br><span class="line">        addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画笔</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="comment">//画笔需要有颜色</span></span><br><span class="line">        g.setColor(Color.red);</span><br><span class="line">        g.drawOval(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        g.fillOval(<span class="number">100</span>,<span class="number">300</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        g.setColor(Color.green);</span><br><span class="line">        g.fillRect(<span class="number">300</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鼠标监听"><a href="#鼠标监听" class="headerlink" title="鼠标监听"></a>鼠标监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMouseListener</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="string">&quot;画图&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList points;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrame</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(title);</span><br><span class="line">        setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//存放鼠标点击的点</span></span><br><span class="line">        points = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加鼠标监听器</span></span><br><span class="line">        addMouseListener(<span class="keyword">new</span> <span class="title class_">MyMouseListener</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> points.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> (Point) iterator.next();</span><br><span class="line">            g.setColor(Color.red);</span><br><span class="line">            g.fillOval(point.x, point.y, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyMouseListener</span> <span class="keyword">extends</span> <span class="title class_">MouseAdapter</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">            points.add(<span class="keyword">new</span> <span class="title class_">Point</span>(e.getX(),e.getY()));</span><br><span class="line">            <span class="type">MyFrame</span> <span class="variable">myFrame</span> <span class="operator">=</span> (MyFrame) e.getSource();</span><br><span class="line">            myFrame.repaint();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="键盘监听"><a href="#键盘监听" class="headerlink" title="键盘监听"></a>键盘监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestKeyListener</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">KeyFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KeyFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        addKeyListener(<span class="keyword">new</span> <span class="title class_">KeyAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//获得键盘按下的键</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">keyCode</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line">                <span class="keyword">if</span> (keyCode == KeyEvent.VK_UP) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;按下上键&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="窗口监听"><a href="#窗口监听" class="headerlink" title="窗口监听"></a>窗口监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestWindow</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WindowFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WindowFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">200</span>);</span><br><span class="line">        setBackground(Color.blue);</span><br><span class="line"></span><br><span class="line">        addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="comment">//关闭窗口</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;windowClosing&quot;</span>);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//激活窗口</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowActivated</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;windowActivated&quot;</span>);</span><br><span class="line">                <span class="type">WindowFrame</span> <span class="variable">source</span> <span class="operator">=</span> (WindowFrame) e.getSource();</span><br><span class="line">                source.setTitle(<span class="string">&quot;激活&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GUI </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础笔记10（异常）</title>
      <link href="/2021/01/03/java-notes-10/"/>
      <url>/2021/01/03/java-notes-10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java基础笔记10（异常）"><a href="#Java基础笔记10（异常）" class="headerlink" title="Java基础笔记10（异常）"></a>Java基础笔记10（异常）</h1><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><ul><li>检查性异常</li><li>运行时异常</li><li>错误</li></ul><h2 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h2><ul><li>Java把异常当做对象处理，并定义一个基类java.lang.Throwable作为所有异常的超类</li><li>在Java API中已经定义了许多异常类，这些异常类分为两大类，错误Error、异常Exception</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-10/java-01.png" alt=""></p><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ul><li>Error类对象由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>Java虚拟机运行错误（Virtul Machine Error），当JVM不再有继续执行操作所需要的内存资源时，将出现OutOfMemoryError。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。</li><li>虚拟机试图执行应用时，出现类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误是不可查的，因为他们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li></ul><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><ul><li>在Exception分支中有一个重要的子类RuntimeException（运行时异常）<ul><li>ArrayIndexOutOfBoundsException（数组下标越界）</li><li>NullPointerException（空指针异常）</li><li>ArithmeticException（算数异常）</li><li>MissingResourceException（丢失资源）</li><li>ClassNotFoundException（找不到类）</li><li>这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理</li></ul></li><li>这些异常一般是由程序逻辑错误引起</li><li>Error和Exception的区别：Error是致命的错误，是程序无法控制和处理的，Java虚拟机一般会选择终止线程；Exception通常情况下是可以被程序处理的。</li></ul><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><ul><li><p>抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();<span class="comment">//主动抛出异常，一般在方法中使用</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(a/b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> ArithmeticException &#123;<span class="comment">//在方法上抛出异常</span></span><br><span class="line">    System.out.println(a/b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>捕获异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//捕获多个异常要从小到大捕获</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;<span class="comment">//监控区域</span></span><br><span class="line">    System.out.println(a / b);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;<span class="comment">//捕获异常 参数：想要捕获的异常类型</span></span><br><span class="line">    System.out.println(<span class="string">&quot;程序异常，分母不能为0&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Throwable&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;<span class="comment">//无论有没有异常都会执行，可以不写</span></span><br><span class="line">    System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异常处理五个关键字</p><ul><li>try、catch、finally、throw、throws</li></ul></li></ul><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ul><li>用户自定义异常类，只需要继承Exception类即可</li><li>自定义异常类步骤<ol><li>创建自定义异常类</li><li>在方法中通过throw关键字抛出异常对象</li><li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作</li><li>在出现异常方法的调用者中捕获并处理异常</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印异常信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;num=&quot;</span> + num +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//可能存在异常的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> <span class="keyword">throws</span> MyException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递参数为：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;参数小于等于10&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Test</span>().test(<span class="number">11</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">传递参数为：11</span></span><br><span class="line"><span class="comment">MyException&#123;num=11&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础笔记9（类与对象）</title>
      <link href="/2021/01/02/java-notes-09/"/>
      <url>/2021/01/02/java-notes-09/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java基础笔记9（类与对象）"><a href="#Java基础笔记9（类与对象）" class="headerlink" title="Java基础笔记9（类与对象）"></a>Java基础笔记9（类与对象）</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>面向对象编程（Object-Oriented Programing，OOP）</li><li>面向对象编程的本质：以类的方式组织代码，以对象的形式组织（封装）数据</li><li>三大特性<ul><li>封装</li><li>继承</li><li>多态</li></ul></li><li>对象是具体的事物，类是对对象的抽象</li><li>从代码运行的角度，先有类再有对象，类是对象的模板</li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li>属性：<ul><li>又叫字段（Field）或成员变量</li><li>默认初始化<ul><li>数字：0、0.0</li><li>char：u0000</li><li>boolean：false</li><li>引用：null</li></ul></li><li>修饰符 属性类型 属性名 = 属性值</li></ul></li><li>方法<ul><li>修饰符 返回类型 方法名（）{ 方法体 }</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类(Student类)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;<span class="comment">//方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">()</span> &#123; <span class="comment">//方法 </span></span><br><span class="line">        <span class="built_in">this</span>.name = name; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul><li>对象的创建和使用<ul><li>使用new关键字创建对象 Student stu = new Student();</li><li>对象的属性stu.name;   前提属性name不是私有的</li><li>对象的方法stu.getName();</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类实例化后会返回一个自己的对象</span></span><br><span class="line"><span class="comment">//zhangsan、lisi就是Student类的具体实例</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Student</span> <span class="variable">lisi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">zhangsan.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">zhangsan.getName();<span class="comment">//张三</span></span><br><span class="line"></span><br><span class="line">lisi.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">lisi.getName();<span class="comment">//李四</span></span><br></pre></td></tr></table></figure><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ul><li>构造器名和类名相同，无返回值</li><li>使用new关键字，本质是在调用构造器</li><li>构造器用来初始化值</li><li>一个类即使什么都不写，也会有一个默认构造方法（无参构造）</li><li>一但定义了有参构造，无参构造就必须显式定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;<span class="comment">//无参构造方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;<span class="comment">//有参构造方法</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.name = name; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">zhangsan.getName();<span class="comment">//张三</span></span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li><p>高内聚、低耦合</p><ul><li>高内聚：类内部的数据操作细节自己完成</li><li>低耦合：暴露少量的方法供外部使用</li></ul></li><li><p>数据隐藏</p><ul><li><p>通常禁止直接访问一个对象中数据的实际表示，而应通过操作接口来进行访问</p></li><li><p>get\set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.name = name; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="依赖、关联、组合、聚合"><a href="#依赖、关联、组合、聚合" class="headerlink" title="依赖、关联、组合、聚合"></a>依赖、关联、组合、聚合</h3><ul><li><p>继承是类与类之间的一种关系，除此之外类与类之间的关系还有依赖、关联、组合、聚合等</p><ul><li><p>依赖：</p><ul><li>类A中的方法使用到了另一个类B，B类的变化会影响到A，具有偶然性、临时性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般依赖关系在Java中体现为局域变量、方法的形参，或者对静态方法的调用。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;count money&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countMoney</span> <span class="params">(Money money)</span>&#123;<span class="comment">//money作为Person类方法的参数。Person类依赖Money类</span></span><br><span class="line">        money.count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关联：</p><ul><li>体现的是两个类、或者类与接口之间语义级别的一种强依赖关系。</li><li>这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的</li><li>一般是长期性的，而且双方的关系一般是平等的，关联可以是单向、双向的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关联关系一般使用成员变量来实现。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;count money&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Money money;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Money money)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countMoney</span> <span class="params">()</span>&#123;</span><br><span class="line">        money.count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>聚合：</p><ul><li>聚合是关联关系的一种特例，他体现的是整体与部分、拥有的关系</li><li>在代码层面，聚合和关联关系是一致的，只能从语义级别来区分。普通的关联关系中，a类和b类没有必然的联系，而聚合中，需要b类是a类的一部分，是一种has a的关系，即 a has a b; 比如班级里有学生。</li><li>has a不是 must has a，a可以有b，也可以没有。a是整体，b是部分，整体与部分之间是可分离的，他们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不同于关联关系的平等地位，聚合关系中两个类的地位是不平等。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students; <span class="comment">//一个家庭里有许多孩子</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>组合：</p><ul><li>组合也是关联关系的一种特例，他体现的是一种contains a的关系，这种关系比聚合更强，也称为强聚合。</li><li>组合同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合关系中，两个类关系也是不平等的。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Arm arm;  </span><br><span class="line">    <span class="keyword">private</span> Leg leg;<span class="comment">//一个人有手有脚，但人没了，手和脚也就没意义了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// .... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h3><ul><li><p>继承的本质是对某一批类的抽象</p></li><li><p>继承关系的两个类</p><ul><li><p>一个为子类（派生类）</p></li><li><p>一个为父类（基类）</p></li><li><p>子类继承父类，使用关键字extends来表示  </p></li><li><p>子类 extends 父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Persion</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>子类可以继承父类所有非私有属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">lastName</span> <span class="operator">=</span> <span class="string">&quot;李&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">firstName</span> <span class="operator">=</span> <span class="string">&quot;四&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">2333</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publicFun</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateFun</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">protectedFun</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试子类可以调用的父类中哪些属性和方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">lastName</span> <span class="operator">=</span> son.lastName;</span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> son.money;</span><br><span class="line">        son.publicFun();</span><br><span class="line">        son.protectedFun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Java中类只有单继承，没有多继承</p><ul><li>一个子类只能直接继承一个父类，但可以间接继承多个父类</li></ul></li><li><p>子类和父类之间，从意义上讲应该具有“is a”的关系</p><ul><li>Student is a Person</li></ul></li><li><p>Object类</p><ul><li>在Java中，所有的类都默认直接或间接继承Object</li></ul></li><li><p>super</p><ul><li><p>子类通过super来访问父类的方法和属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">lastName</span> <span class="operator">=</span> <span class="string">&quot;李&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">firstName</span> <span class="operator">=</span> <span class="string">&quot;老四&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类方法&quot;</span>);</span><br><span class="line">        System.out.println(firstName);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.firstName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">firstName</span> <span class="operator">=</span> <span class="string">&quot;小四&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类方法&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.test();</span><br><span class="line">        System.out.println(<span class="string">&quot;父类方法结束&quot;</span>);</span><br><span class="line">        System.out.println(firstName);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.firstName);</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.firstName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">子类方法</span></span><br><span class="line"><span class="comment">父类方法</span></span><br><span class="line"><span class="comment">老四</span></span><br><span class="line"><span class="comment">老四</span></span><br><span class="line"><span class="comment">父类方法结束</span></span><br><span class="line"><span class="comment">小四</span></span><br><span class="line"><span class="comment">小四</span></span><br><span class="line"><span class="comment">老四</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>子类的构造器必须调用父类的构造器;</p></li><li><p>调用父类构造器必须是子类构造器第一行代码</p></li><li><p>子类构造器默认调用父类无参构造super();</p></li></ul></li><li><p>方法重写</p><ul><li>需要继承关系，子类重写父类方法</li><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符范围可以扩大不能缩小</li><li>抛出异常范围可以缩小但不可以扩大   </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的引用指向子类</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">A=&gt;test()</span></span><br><span class="line"><span class="comment">B=&gt;test()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法去掉static后</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的引用指向子类</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">A=&gt;test()</span></span><br><span class="line"><span class="comment">A=&gt;test()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">静态方法是类的方法，非静态方法是对象的方法</span></span><br><span class="line"><span class="comment">b是A new出来的对象，因此调用了A的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>即同一方法可以根据发送对象的不同而采用多种不同行为方式</li><li>一个对象的实际类型是确定的，但可以指向的引用的类型有很多</li><li>多态存在的条件<ul><li>有继承关系</li><li>子类重写父类方法</li><li>父类引用指向子类对象</li></ul></li><li>多态是方法的多态，属性没有多态性</li><li>instanceof</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father=&gt;test1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son=&gt;test1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son=&gt;test2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//一个对象的实际类型是确定的(new Son())</span></span><br><span class="line">        <span class="comment">//引用类型不确定，父类引用指向子类</span></span><br><span class="line">        <span class="comment">//son能调用自己的或继承父类的方法</span></span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="comment">//father可以指向子类，但不能调用子类独有方法</span></span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//子类重写父类方法，执行子类方法</span></span><br><span class="line">        son.test1();</span><br><span class="line">        father.test1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象能执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class="line">        son.test2();</span><br><span class="line">        <span class="comment">//father.test2(); father无test2()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>instanceof 用来测试一个对象是否为一个类的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> obj <span class="keyword">instanceof</span> Class</span><br></pre></td></tr></table></figure><ul><li><p>obj 为一个对象，Class 表示一个类或者一个接口，当 obj 为 Class 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false。</p></li><li><p>编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能确定类型，则通过编译，具体看运行时定。</p></li></ul><p>几种情况</p><ol><li><p>obj 必须为引用类型，不能是基本类型，否则编译不通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">System.out.println(i <span class="keyword">instanceof</span> Integer);<span class="comment">//编译不通过</span></span><br><span class="line">System.out.println(i <span class="keyword">instanceof</span> Object);<span class="comment">//编译不通过</span></span><br></pre></td></tr></table></figure></li><li><p>如果 obj 为 null，那么将返回 false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="literal">null</span> <span class="keyword">instanceof</span> Object);<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>obj 可以为 class 类的实例对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">System.out.println(integer <span class="keyword">instanceof</span>  Integer);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>obj 可以为 class 类的直接或间接子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Father</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="type">Father</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"><span class="type">Son</span> <span class="variable">test3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">System.out.println(test1 <span class="keyword">instanceof</span> Son);<span class="comment">//false</span></span><br><span class="line">System.out.println(test2 <span class="keyword">instanceof</span> Son);<span class="comment">//true</span></span><br><span class="line">System.out.println(test3 <span class="keyword">instanceof</span> Son);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>obj 可以为接口的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">    </span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">System.out.println(arrayList <span class="keyword">instanceof</span> List);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">System.out.println(list <span class="keyword">instanceof</span> ArrayList);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul><li><p>静态变量、静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//static表示从属该类，跟类一起加载</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> sid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fn</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sfn</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sid1</span> <span class="operator">=</span> sid;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sid2</span> <span class="operator">=</span> Test.sid;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>().id;</span><br><span class="line"></span><br><span class="line">        sfn();</span><br><span class="line">        Test.sfn();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Test</span>().fn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>静态代码块、匿名代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//匿名代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块 静态代码块只执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Test() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">静态代码块</span></span><br><span class="line"><span class="comment">匿名代码块</span></span><br><span class="line"><span class="comment">构造方法</span></span><br><span class="line"><span class="comment">=============</span></span><br><span class="line"><span class="comment">匿名代码块</span></span><br><span class="line"><span class="comment">构造方法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>静态导入包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未导包前，调用Math.random()方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Math.random());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用静态导入包后，调用Math.random()方法</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(random());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>抽象类不能new，只能靠子类去实现</li><li>抽象类中可以写普通方法</li><li>抽象方法必须写在抽象类中</li><li>抽象类也有构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//abstract修饰抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Abstract</span> &#123;</span><br><span class="line">    <span class="comment">//abstract修饰抽象方法,只有方法名，没有方法实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doIt</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类要继承实现抽象类的所有方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Implement</span> <span class="keyword">extends</span> <span class="title class_">Abstract</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doIt</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者子类也是抽象类，继续将方法传给自己的子类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DontImplement</span> <span class="keyword">extends</span> <span class="title class_">Abstract</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoImplement</span> <span class="keyword">extends</span> <span class="title class_">DontImplement</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doIt</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>普通类：具体实现</li><li>抽象类：具体实现和规范（抽象方法）</li><li>接口：规范</li><li>接口不能有构造方法，抽象类有构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//interface 定义的关键字，接口需要有实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//接口里的所有属性都是常量public static final</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ID</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">    <span class="comment">//接口中的所有定义的方法都是public abstract</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">VIPService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">vip</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现了接口中的类，就需要重写接口中的方法</span></span><br><span class="line"><span class="comment">//利用接口实现多继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>, VIPService &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vip</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li><p>成员内部类</p></li><li><p>静态内部类</p></li><li><p>局部内部类</p></li><li><p>匿名内部类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外部类的方法&quot;</span>);</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner3</span> &#123;</span><br><span class="line">            <span class="comment">//局部内部类可以获得外部类的属性、方法</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">inId</span> <span class="operator">=</span> id;</span><br><span class="line">                out();</span><br><span class="line">                System.out.println(<span class="string">&quot;成员内部类方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner1</span> &#123;</span><br><span class="line">        <span class="comment">//成员内部类可以获得外部类的属性、方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">inId</span> <span class="operator">=</span> id;</span><br><span class="line">            out();</span><br><span class="line">            System.out.println(<span class="string">&quot;成员内部类方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner2</span> &#123;</span><br><span class="line">        <span class="comment">//内部类可以获得外部类的静态属性、静态方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成员内部类方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//匿名内部类，实现UserService接口</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Inner4</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hide</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Inner4</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hide</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础笔记8（数组）</title>
      <link href="/2020/12/26/java-notes-08/"/>
      <url>/2020/12/26/java-notes-08/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java基础笔记8（数组）"><a href="#Java基础笔记8（数组）" class="headerlink" title="Java基础笔记8（数组）"></a>Java基础笔记8（数组）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>数组是<strong>相同类型</strong>的数据的有序集合</li><li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成</li><li>每一个数据称作一个数组元素，每个数组元素可以通过下标来访问</li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ul><li><p>必须声明数组变量，才能在程序中使用数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataType[] nums1; <span class="comment">//推荐写法</span></span><br><span class="line">或</span><br><span class="line">dataType nums2[];</span><br></pre></td></tr></table></figure></li><li><p>Java语言中使用new来创建数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataType[] nums = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br><span class="line">或</span><br><span class="line">dataType[] nums = <span class="keyword">new</span> <span class="title class_">dataType</span>[]&#123;element1，element2，element3&#125;;</span><br><span class="line">(dataType[] nums = &#123;element1，element2，element3&#125;;)</span><br></pre></td></tr></table></figure></li><li><p>数组赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">nums[<span class="number">1</span>] = <span class="number">23</span>;</span><br><span class="line">nums[<span class="number">5</span>] = <span class="number">6</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数组特点"><a href="#数组特点" class="headerlink" title="数组特点"></a>数组特点</h2><ul><li>长度确定，数组一旦被创建，其大小就不可改变</li><li>元素可以使任意相同数据类型，包括基本类型和引用类型</li><li>数组变量属于引用类型，数组也可以看成是对象，数组中每个元素相当于该对象的成员变量。</li><li>数组本身就是对象，Java对象保存在堆中，因此数组无论是保存原始类型还是其他数据类型，数组对象本身是在堆中的</li></ul><h2 id="Java内存"><a href="#Java内存" class="headerlink" title="Java内存"></a>Java内存</h2><ul><li><p>堆</p><ul><li>存放new的对象和数组</li><li>可以被所有的线程共享，不会存放别的对象引用</li></ul></li><li><p>栈</p><ul><li>存放基本数据类型（包含这个基本类型的具体数值）</li><li>引用对象的变量（存放这个引用在堆里的具体地址）</li></ul></li><li>方法区<ul><li>可以被所有线程共享</li><li>包含所有的class和static变量</li></ul></li></ul><h2 id="三种初始化状态"><a href="#三种初始化状态" class="headerlink" title="三种初始化状态"></a>三种初始化状态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">//动态初始化</span></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//默认初始化</span></span><br><span class="line"><span class="comment">//数组是引用类型，它的元素相当于类的示例变量</span></span><br><span class="line"><span class="comment">//因此数组一经分配空间，其中每个元素也被按照实例变量同样的方式被隐式初始化</span></span><br></pre></td></tr></table></figure><h2 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h2><p>合法下标区间 [0,length-1] ,如果越界就会报错：ArrayIndexOutOfBoundsException（数组下标越界异常）</p><h2 id="数组使用"><a href="#数组使用" class="headerlink" title="数组使用"></a>数组使用</h2><h3 id="for-each循环"><a href="#for-each循环" class="headerlink" title="for each循环"></a>for each循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//普通循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arrays.length;i++)&#123;</span><br><span class="line">    System.out.println(arrays[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for each循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> array : arrays)&#123;</span><br><span class="line">    System.out.println(array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组作为参数、返回值"><a href="#数组作为参数、返回值" class="headerlink" title="数组作为参数、返回值"></a>数组作为参数、返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> nums)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num : nums)&#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成反转数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] reverse(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = len - <span class="number">1</span>; i &lt; len; i++,j--) &#123;</span><br><span class="line">        ans[j] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其中每一个元素都是一个一维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组 </span></span><br><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span>[][] b = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//a、b都可以看成一个两行三列的数组</span></span><br></pre></td></tr></table></figure><h2 id="稀疏数组（压缩）"><a href="#稀疏数组（压缩）" class="headerlink" title="稀疏数组（压缩）"></a>稀疏数组（压缩）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//压缩以下数组</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>下标</th><th>行</th><th>列</th><th>值</th></tr></thead><tbody><tr><td>[0]</td><td>3（原数组有几行）</td><td>5（原数组有几列）</td><td>4（除0以外其他数字总数）</td></tr><tr><td>[1]</td><td>0</td><td>4</td><td>7</td></tr><tr><td>[2]</td><td>1</td><td>0</td><td>1</td></tr><tr><td>[3]</td><td>1</td><td>2</td><td>3</td></tr><tr><td>[4]</td><td>2</td><td>0</td><td>2</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//原始数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> array[][] = <span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">        array[<span class="number">0</span>][<span class="number">4</span>] = <span class="number">7</span>;</span><br><span class="line">        array[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        array[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">        array[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;打印原始数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : ints) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算原始数组中非0的数的总数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : ints) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//稀疏数组</span></span><br><span class="line">        <span class="type">int</span>[][] sparseArray = <span class="keyword">new</span> <span class="title class_">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">0</span>] = row;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">1</span>] = col;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sparseArray[count][<span class="number">0</span>] = i;</span><br><span class="line">                    sparseArray[count][<span class="number">1</span>] = j;</span><br><span class="line">                    sparseArray[count][<span class="number">2</span>] = array[i][j];</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;打印稀疏数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : sparseArray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : ints) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//还原稀疏数组</span></span><br><span class="line">        <span class="type">int</span>[][] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[sparseArray[<span class="number">0</span>][<span class="number">0</span>]][sparseArray[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; sparseArray.length; i++) &#123;</span><br><span class="line">            array2[sparseArray[i][<span class="number">0</span>]][sparseArray[i][<span class="number">1</span>]] = sparseArray[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;打印还原数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array2) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : ints) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">打印原始数组</span></span><br><span class="line"><span class="comment">00007</span></span><br><span class="line"><span class="comment">10300</span></span><br><span class="line"><span class="comment">20000</span></span><br><span class="line"><span class="comment">打印稀疏数组</span></span><br><span class="line"><span class="comment">354</span></span><br><span class="line"><span class="comment">047</span></span><br><span class="line"><span class="comment">101</span></span><br><span class="line"><span class="comment">123</span></span><br><span class="line"><span class="comment">202</span></span><br><span class="line"><span class="comment">打印还原数组</span></span><br><span class="line"><span class="comment">00007</span></span><br><span class="line"><span class="comment">10300</span></span><br><span class="line"><span class="comment">20000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础笔记7（方法）</title>
      <link href="/2020/12/25/java-notes-07/"/>
      <url>/2020/12/25/java-notes-07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java基础笔记7（方法）"><a href="#Java基础笔记7（方法）" class="headerlink" title="Java基础笔记7（方法）"></a>Java基础笔记7（方法）</h1><h2 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h2><ul><li>方法是语句的集合，它们在一起执行一个功能<ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul></li><li>方法是一段用来完成特定功能的代码片段</li><li>方法包含一个方法头和一个方法体<ul><li>修饰符：可选，告诉编译器如何调用该方法。定义了该方法的访问类型</li><li>返回值类型：方法返回值的数据类型</li><li>方法名：方法的名称，方法名和参数表共同构成方法签名</li><li>参数类型：方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含参数<ul><li>形式参数：在方法被调用时用于接收外界输入数据</li><li>实参：调用方法时实际传给方法的数据</li></ul></li><li>方法体：方法体包含具体的语句，定义该方法的功能</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名（参数类型 参数名）&#123;</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><ul><li><p>调用方法：对象名.方法名（实参列表）</p></li><li><p>方法返回一个值时，方法调用常被当做一个值，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> Math.pow(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">//8.0</span></span><br></pre></td></tr></table></figure></li><li><p>方法返回值是void时，方法调用直接作为一条语句，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println();</span><br></pre></td></tr></table></figure></li></ul><h2 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h2><ul><li>值传递：在调用函数时将实际参数<strong>复制</strong>一份<strong>副本</strong>传递到函数中，在函数中如果对参数进行修改，将不会影响到实际参数。</li><li>引用传递：在调用函数时将实际参数的<strong>地址</strong>传递到函数中，实参和形参在内存上指向了同一块区域，在函数中对参数所进行的修改，将影响到实际参数。</li></ul><h2 id="Java是值传递"><a href="#Java是值传递" class="headerlink" title="Java是值传递"></a>Java是值传递</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">change(s); </span><br><span class="line">System.out.println(<span class="string">&quot;实参s：&quot;</span> + s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> x)</span> &#123; </span><br><span class="line">x++;</span><br><span class="line">System.out.println(<span class="string">&quot;形参x：&quot;</span> + x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">形参x：11</span></span><br><span class="line"><span class="comment">实参s：10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解释：</span></span><br><span class="line"><span class="comment">x是s的副本，存储空间不同，x改变不影响s</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例二</span></span><br><span class="line"><span class="comment">//2.1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        change(s);</span><br><span class="line">        System.out.println(s.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Student x)</span> &#123;</span><br><span class="line">        x.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(x.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">李四</span></span><br><span class="line"><span class="comment">李四</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解释：</span></span><br><span class="line"><span class="comment">为什么输出相等？实参的值被改变了吗？看下面分析</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;change前s的地址：&quot;</span> + s);</span><br><span class="line">        change(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;change后s的地址：&quot;</span> + s);</span><br><span class="line">        System.out.println(<span class="string">&quot;s所指对象的内容：&quot;</span> + s.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Student x)</span> &#123;</span><br><span class="line">        x.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;x的地址：&quot;</span> + x);</span><br><span class="line">        System.out.println(<span class="string">&quot;x所指对象的内容：&quot;</span> + x.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">change前s的地址：Student@312b1dae</span></span><br><span class="line"><span class="comment">x的地址：Student@312b1dae</span></span><br><span class="line"><span class="comment">x所指对象的内容：李四</span></span><br><span class="line"><span class="comment">change后s的地址：Student@312b1dae</span></span><br><span class="line"><span class="comment">s所指对象的内容：李四</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解释：</span></span><br><span class="line"><span class="comment">我们发现change函数对对象的内容进行了修改，而没有修改对象的地址</span></span><br><span class="line"><span class="comment">继续看下例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;change前s的地址：&quot;</span> + s);</span><br><span class="line">        change(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;change后s的地址：&quot;</span> + s);</span><br><span class="line">        System.out.println(<span class="string">&quot;s所指对象的内容：&quot;</span> + s.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Student x)</span> &#123;</span><br><span class="line">        x = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;x的地址：&quot;</span> + x);</span><br><span class="line">        System.out.println(<span class="string">&quot;s所指对象的内容：&quot;</span> + x.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">change前s的地址：Student@312b1dae</span></span><br><span class="line"><span class="comment">x的地址：Student@7530d0a</span></span><br><span class="line"><span class="comment">s所指对象的内容：李四</span></span><br><span class="line"><span class="comment">change后s的地址：Student@312b1dae</span></span><br><span class="line"><span class="comment">s所指对象的内容：张三</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解释：</span></span><br><span class="line"><span class="comment">通过该例我们可以发现，在将对象作为参数传入方法中时，传递的是地址，将对象的地址复制一份副本传给形参。</span></span><br><span class="line"><span class="comment">因此2.1中看似在方法中将张三修改为了李四并影响了实参，实则真正的形参（传入对象的地址）并未修改（见2.2），因此不能说形参影响了实参。</span></span><br><span class="line"><span class="comment">2.3中使形参x指向一个新的对象，修改了形参的内容（x的地址：Student@7530d0a），从输出结果可以看出，实参的值并未受影响（change前s的地址：Student@312b1dae、change后s的地址：Student@312b1dae）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例三</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        change(s);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String x)</span> &#123;</span><br><span class="line">        x = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解释：</span></span><br><span class="line"><span class="comment">String 变量只要被赋值就等于新new一个String对象</span></span><br><span class="line"><span class="comment">因此x += &quot;b&quot;;等价于x = new String(&quot;b&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul><li>方法名相同，参数类型不同</li><li>方法重载规则<ul><li>方法名相同</li><li>参数列表不同（个数不同、类型不同、顺序不同等）</li><li>返回值类型可以相同也可以不同</li><li>只有返回值类型不同不能成为方法重载</li></ul></li><li>方法名称相同时，编译器会根据调用方法的参数个数、类型等去匹配方法，匹配失败编译器会报错。</li></ul><h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span>+i+<span class="string">&quot;]=&quot;</span>+args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">E:\<span class="built_in">test</span>&gt;javac src\test.java</span><br><span class="line"></span><br><span class="line">E:\<span class="built_in">test</span>&gt;<span class="built_in">cd</span> src</span><br><span class="line"></span><br><span class="line">E:\<span class="built_in">test</span>\src&gt;java <span class="built_in">test</span> hello world</span><br><span class="line">args[0]=hello</span><br><span class="line">args[1]=world</span><br><span class="line"></span><br><span class="line">E:\<span class="built_in">test</span>\src&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul><li>JDK1.5开始，Java支持传递同类型的可变参数给一个方法</li><li>在方法声明中，在指定参数类型后加一个省略号（…）</li><li>一个方法中只能指定一个可变参数，它必须是方法最后一个参数，任何普通参数必须在他之前声明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test.print(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span> <span class="params">(<span class="type">int</span>... n)</span>&#123;</span><br><span class="line">        System.out.println(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n.length; i++) &#123;</span><br><span class="line">            System.out.println(n[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li>递归包含两个部分<ul><li>递归头</li><li>递归体</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阶乘</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        System.out.println(test.factorial(<span class="number">5</span>));<span class="comment">//120</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础笔记6（Scanner、程序结构）</title>
      <link href="/2020/12/22/java-notes-06/"/>
      <url>/2020/12/22/java-notes-06/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java基础笔记6（Scanner、程序结构）"><a href="#Java基础笔记6（Scanner、程序结构）" class="headerlink" title="Java基础笔记6（Scanner、程序结构）"></a>Java基础笔记6（Scanner、程序结构）</h1><h2 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h2><ul><li><p>java.util.Scanner是Java5的新特征，可以通过Scanner类来获取用户的输入</p></li><li><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure></li><li><p>通过Scanner类的next()与nextLine()方法获取输入的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> scanner.next();<span class="comment">//输入：hello world</span></span><br><span class="line">System.out.println(s1);<span class="comment">//输出：hello</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> scanner.nextLine();<span class="comment">//输入：hello world</span></span><br><span class="line">System.out.println(s1);<span class="comment">//输出：hello world</span></span><br></pre></td></tr></table></figure><ul><li>next<ol><li>读取到有效字符后才可以结束输入</li><li>对输入的有效字符之前遇到的空白，next()方法会将其自动过滤掉</li><li>只有输入有效字符后才将后面输入的空白作为分隔符或结束符</li><li>next()不能得到带有空格的字符串</li></ol></li><li>nextLine()<ol><li>以Enter为结束符，nextLine()方法返回输入回车之前的所有字符</li><li>可以获得带空格的字符串</li></ol></li></ul></li><li><p>在读取前一般使用hasNext()与hasNextLine()判断是否还有输入的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">System.out.print(scanner.nextInt()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入：1 2 3 4 5 a b 6 c</span></span><br><span class="line"><span class="comment">//输出：1 2 3 4 5</span></span><br></pre></td></tr></table></figure></li><li><p>属于IO流的类不关闭会一直占用资源，用完就关掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scan.close();</span><br></pre></td></tr></table></figure></li></ul><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>语句与语句之间从上到下顺序执行</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-06/java-01.png" alt=""></p><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><h3 id="if单选择结构"><a href="#if单选择结构" class="headerlink" title="if单选择结构"></a>if单选择结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-06/java-02.png" alt=""></p><h3 id="if-else双选择结构"><a href="#if-else双选择结构" class="headerlink" title="if-else双选择结构"></a>if-else双选择结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-06/java-03.png" alt=""></p><h3 id="if多选择结构"><a href="#if多选择结构" class="headerlink" title="if多选择结构"></a>if多选择结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">3</span>)&#123;</span><br><span class="line">    语句<span class="number">3</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    语句<span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-06/java-04.png" alt=""></p><h3 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">        语句</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-06/java-05.png" alt=""></p><h3 id="switch多选择结构"><a href="#switch多选择结构" class="headerlink" title="switch多选择结构"></a>switch多选择结构</h3><ul><li>switch case判断一个变量与一系列值中某个值是否相等，每一个值是一个分支</li><li>switch语句变量类型<ul><li>byte、short、int、char</li><li>从Java SE 7开始支持String<ul><li>判断String时，通过String的哈希值来判断</li></ul></li><li>case标签必须为字符串常量或字面量</li></ul></li><li>case穿透<ul><li>如果不加break，执行完当前分支语句后，会停止判断，继续执行剩下每个分支的语句</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value1 :</span><br><span class="line">        语句<span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2 :</span><br><span class="line">        语句<span class="number">2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        语句<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-06/java-06.png" alt=""></p><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式)&#123;</span><br><span class="line">循环语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>只要条件为true，循环就会一直执行</p></li><li><p>一般我们需要在循环语句中，改变布尔表达式使其失效，使循环停下来</p></li><li><p>少部分情况需要循环一直执行，如服务器的请求响应监听</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-06/java-07.png" alt=""></p></li></ul><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环语句</span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式)</span><br></pre></td></tr></table></figure><ul><li>do while循环至少执行一次</li><li>while先判断后执行，do while先执行后判断</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-06/java-08.png" alt=""></p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化;布尔表达式;更新)&#123;</span><br><span class="line">    循环语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>for循环执行次数在执行前就可以确认</p></li><li><p>初始化只进行一次，只能声明一种类型，可以初始化多个循环控制变量，也可以是空语句</p></li><li>每次循环中各部分执行顺序，布尔表达式 -&gt; 循环语句 -&gt; 更新</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-06/java-09.png" alt=""></p><h3 id="for-each"><a href="#for-each" class="headerlink" title="for each"></a>for each</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">23</span>&#125;;</span><br><span class="line"><span class="comment">//遍历数组中的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">System.out.print(num+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：1 3 6 8 23</span></span><br></pre></td></tr></table></figure><h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break continue"></a>break continue</h3><ul><li>break用于强行退出循环，不执行循环中剩余的语句</li><li>continue在循环语句中用于终止某次循环，即跳过循环体中尚未执行的语句，接着进行下一次循环判定</li><li>（不建议使用）break 和 continue可以加标签</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">label: <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(j==i)&#123;</span><br><span class="line"><span class="keyword">continue</span> label</span><br><span class="line">        &#125;</span><br><span class="line">System.out.print(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：001</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">label: <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">break</span> label;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划问题</title>
      <link href="/2020/12/19/dynamic-programming/"/>
      <url>/2020/12/19/dynamic-programming/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="力扣62题-不同路径"><a href="#力扣62题-不同路径" class="headerlink" title="力扣62题 不同路径"></a>力扣62题 不同路径</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>一个机器人位于一个 m x n 网格的左上角。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角。</p><p>问总共有多少条不同的路径？</p><p>力扣链接：<a href="https://leetcode-cn.com/problems/unique-paths">https://leetcode-cn.com/problems/unique-paths</a></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 2</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">从左上角开始，总共有 3 条路径可以到达右下角。</span><br><span class="line">1. 向右 -&gt; 向右 -&gt; 向下</span><br><span class="line">2. 向右 -&gt; 向下 -&gt; 向右</span><br><span class="line">3. 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//使用二维数组保存到当前位置的最大路径数</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//因为每次只能向下或向右移动，因此i==0或j==0时表示一直向右移动或一直向左移动，因此最大路径数都是1</span></span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//只可能从(i-1,j)或(i,j-1)位置通过向下移动或向右移动到达当前(i,j)位置，所以到(i,j)的最大路径数等于前两个位置的最大路径数之和</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从左上角(0,0)点出发，不断利用上一步的结果动态更新下一个位置的最大路径数dp，最终更新完右下角dp[m-1][n-1]时，即可得出到达右下角的最大路径数</span></span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="力扣376题-摆动序列"><a href="#力扣376题-摆动序列" class="headerlink" title="力扣376题 摆动序列"></a>力扣376题 摆动序列</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。</p><p>例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p><p>给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p><p>力扣链接：<a href="https://leetcode-cn.com/problems/wiggle-subsequence">https://leetcode-cn.com/problems/wiggle-subsequence</a></p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,7,4,9,2,5]</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 整个序列均为摆动序列。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,17,5,10,13,15,10,5,16,8]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。</span><br></pre></td></tr></table></figure><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//up(down)保存上一个以正数(负数)差值结尾的最长摆动序列子串长度,均初始化长度为1，表示开始时只有第一个数字</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">up</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">down</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//遍历数组，同时更新以正数、负数差值结尾的两个字符串的长度</span></span><br><span class="line">        <span class="comment">//假设当前位置i与i-1的差值为正，我们发现，无论上一个以负数差值结尾的最长子串的最后一位数字是不是位于i-1位置，我们都可以通过down+1来就表示新的以正数差值结尾的最长子串的长度up。见下图</span></span><br><span class="line">        <span class="comment">//因此我们每次只关心i与i-1的差值，并据此更新长度</span></span><br><span class="line">        <span class="comment">//i与i-1的差值为负时同理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                up = down + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                down = up + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(up, down);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dynamic-programming/dynamic-01.png" alt=""></p><p>当前位置i与i-1的差值为正，无论上一个以负数差值结尾的最长子串的最后一位数字是不是位于i-1位置（图中画出了最后两个位置，即a-1位置与a位置），我们都可以通过down+1来就表示新的以正数差值结尾的最长子串的长度up，因为无论图中哪种情况（包括a与i-1位置的值相等等图中未画出情况）通过删掉a或i-1位置都可以新拼接出一个长度为down+1的以正数差值结尾的最长子串。</p><h2 id="力扣474题-一和零"><a href="#力扣474题-一和零" class="headerlink" title="力扣474题 一和零"></a>力扣474题 一和零</h2><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><p>给你一个二进制字符串数组 strs 和两个整数 m 和 n 。</p><p>请你找出并返回 strs 的最大子集的大小，该子集中最多有 m 个 0 和 n 个 1 。</p><p>如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p><p>力扣链接：<a href="https://leetcode-cn.com/problems/ones-and-zeroes">https://leetcode-cn.com/problems/ones-and-zeroes</a></p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;10&quot;, &quot;0001&quot;, &quot;111001&quot;, &quot;1&quot;, &quot;0&quot;], m = 5, n = 3</span><br><span class="line">输出：4</span><br><span class="line">解释：最多有 5 个 0 和 3 个 1 的最大子集是 &#123;&quot;10&quot;,&quot;0001&quot;,&quot;1&quot;,&quot;0&quot;&#125; ，因此答案是 4 。</span><br><span class="line">其他满足题意但较小的子集包括 &#123;&quot;0001&quot;,&quot;1&quot;&#125; 和 &#123;&quot;10&quot;,&quot;1&quot;,&quot;0&quot;&#125; 。&#123;&quot;111001&quot;&#125; 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;10&quot;, &quot;0&quot;, &quot;1&quot;], m = 1, n = 1</span><br><span class="line">输出：2</span><br><span class="line">解释：最大的子集是 &#123;&quot;0&quot;, &quot;1&quot;&#125; ，所以答案是 2 。</span><br></pre></td></tr></table></figure><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxForm</span><span class="params">(String[] strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="literal">null</span> || strs.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[i][j] 表示 当前数组中，最多有 i个0、j个1 的组合数</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> oneNum;</span><br><span class="line">        <span class="type">int</span> zeroNum;</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="comment">//记录当前字符串中0和1的数量</span></span><br><span class="line">            oneNum = <span class="number">0</span>;</span><br><span class="line">            zeroNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> aChar : chars) &#123;</span><br><span class="line">                <span class="keyword">if</span> (aChar == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                    zeroNum++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    oneNum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                dp[i][j] 的结果有两种情况：</span></span><br><span class="line"><span class="comment">                1、当前状态(dp[i][j])</span></span><br><span class="line"><span class="comment">                2、上一个状态(dp[i - zeroNum][j - oneNum])的个数 + 1</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &gt;= zeroNum; i--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n; j &gt;= oneNum; j--) &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j], dp[i - zeroNum][j - oneNum] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础笔记5（包、JavaDoc）</title>
      <link href="/2020/12/19/java-notes-05/"/>
      <url>/2020/12/19/java-notes-05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java基础笔记5（包、JavaDoc）"><a href="#Java基础笔记5（包、JavaDoc）" class="headerlink" title="Java基础笔记5（包、JavaDoc）"></a>Java基础笔记5（包、JavaDoc）</h1><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li><p>一般使用公司域名倒置作为包名，如</p><ul><li>com.baidu.www</li><li>com.baidu.baike</li><li>com.baidu.blog</li></ul></li><li><p>包中的类要在类前面加上package 包名，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baudu.www<span class="comment">//注：要放在代码最上面</span></span><br></pre></td></tr></table></figure></li><li><p>导入其他包中的类时使用import，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*<span class="comment">//*表示导入该包下所有的类</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h2><ul><li><p>javadoc命令用来生成自己的API文档</p></li><li><p>参数</p><ul><li>@author 作者名</li><li>@version 版本号</li><li>@since 指明需要最早使用的jdk版本</li><li>@param 参数名</li><li>@return 返回值</li><li>@throws 抛出异常情况</li></ul></li><li><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hollowshadow;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Haunt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Haunt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开命令行，执行javadoc命令</span><br><span class="line">javadoc -encoding UTF-8 -charset UTF-8 Student.java</span><br></pre></td></tr></table></figure><ul><li>打开类所在目录，发现自动生成html等文件，打开index.html，即javadoc生成的API文档</li></ul></li></ul><h2 id="IDEA中使用JavaDoc"><a href="#IDEA中使用JavaDoc" class="headerlink" title="IDEA中使用JavaDoc"></a>IDEA中使用JavaDoc</h2><ol><li><p>菜单 Tools -&gt; Generate JavaDoc </p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-05/java-01.png" alt=""></p></li><li><p>进行配置</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-05/java-02.png" alt=""></p><ul><li><p>Generate JavaDoc scope：使用JavaDoc生成文档的范围</p></li><li><p>Output directory：生成的文档所在的目录</p></li><li><p>Locale：语言版本，默认英文或者是当前操作系统语言，zh_CN中文</p></li><li><p>Other command line arguments：参数设置，多个参数可用空格隔开。<br>如：-encoding UTF-8 -charset UTF-8 -windowtitle “标题名” -link <a href="http://docs.oracle.com/javase/7/docs/api-encoding">http://docs.oracle.com/javase/7/docs/api-encoding</a> </p><ul><li><p>-encoding UTF-8<br>表示源代码基于 UTF-8 编码，避免非英语字符乱码问题</p></li><li><p>-charset UTF-8<br>表示在处理并生成 JavaDoc 超文本时使用的字符集也是以 UTF-8 为编码</p></li><li><p>-windowtitle “标题名”<br>表示生成的 JavaDoc 文档在浏览器中打开时，标题栏显示的内容</p></li><li><p>-link <a href="http://docs.oracle.com/javase/7/docs/api-encoding">http://docs.oracle.com/javase/7/docs/api-encoding</a></p><p>表示生成的 JavaDoc 中涉及到很多对其他外部 Java 类的引用，是使用全限定名称还是带有超链接的短名称，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">s</span><span class="params">(带有超链接的短名称)</span></span><br><span class="line"><span class="comment">//在生成 JavaDoc 时如果不指定 -link 参数，则JavaDoc中对该方法的表述就会自动变为 </span></span><br><span class="line">java.lang.String <span class="title function_">s</span><span class="params">(全限定名称)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础笔记4（变量常量、命名规范、运算符）</title>
      <link href="/2020/12/16/java-notes-04/"/>
      <url>/2020/12/16/java-notes-04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java基础笔记4（变量常量、命名规范、运算符）"><a href="#Java基础笔记4（变量常量、命名规范、运算符）" class="headerlink" title="Java基础笔记4（变量常量、命名规范、运算符）"></a>Java基础笔记4（变量常量、命名规范、运算符）</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li>类变量（静态变量）<ul><li>在方法外</li><li>从属类</li><li>无需初始化，有默认值</li></ul></li><li>实例变量（对象变量）<ul><li>在方法外</li><li>从属对象</li><li>无需初始化，有默认值</li></ul></li><li>局部变量<ul><li>在方法内</li><li>只在方法内有效</li><li>必须声明和初始化</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//类变量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//实例变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类变量和实例变量的区别"><a href="#类变量和实例变量的区别" class="headerlink" title="类变量和实例变量的区别"></a>类变量和实例变量的区别</h3><p>类变量是所有对象共有，其中一个对象将它值改变，其他对象得到的就是改变后的结果。</p><p>实例变量属对象私有，某一个对象将其值改变，不影响其他对象。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>初始化后不能改变值</p><p>常量一般用大写字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li>变量、方法、类名：见名知意</li><li>类成员变量：小驼峰（lastName）</li><li>局部变量：小驼峰</li><li>常量：大写（MAX_VALUE）</li><li>类名：大驼峰</li><li>方法名：小驼峰</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>算术运算符：+,-,*,/,%,++,—</li><li>赋值运算符：=</li><li>关系运算符：&gt;,&lt;,&gt;=,&lt;=,==,!=,instanceof(测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。)</li><li>逻辑运算符：&amp;&amp;,||,!</li><li>位运算符：&amp;,|,^,~,&gt;&gt;,&lt;&lt;,&gt;&gt;&gt;</li><li><p>条件运算符：? :</p></li><li><p>扩展赋值运算符：+=,-=,*=,/=</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2333333333333L</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2333</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">233</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a+b+c+d);<span class="comment">//long</span></span><br><span class="line">System.out.println(b+c+d);<span class="comment">//int</span></span><br><span class="line">System.out.println(c+d);<span class="comment">//int </span></span><br><span class="line"><span class="comment">//自动升为混合运算类型中最高类型</span></span><br><span class="line"><span class="comment">//整数类型操作中，操作数中有long，结果也为long，操作数中没有long时，结果为int</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">b = b + <span class="number">2</span>;<span class="comment">//编译失败，b+2运算中b会被提升为int类型，是结果是int型，从int转为byte需要强制类型转换</span></span><br><span class="line">b=(<span class="type">byte</span>)(b+<span class="number">2</span>);<span class="comment">//编译通过，手动将运算结果进行强制类型转换</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">s = s + <span class="number">5</span>; <span class="comment">//编译失败，因为s会被提升为int类型，运算后的结果还是int类型，无法给short类型赋值</span></span><br><span class="line">s += <span class="number">5</span>; <span class="comment">//编译通过，因为+=运算符在给s赋值时，自动完成了强转操作</span></span><br></pre></td></tr></table></figure><h3 id="一元运算符-自增自减"><a href="#一元运算符-自增自减" class="headerlink" title="一元运算符 自增自减"></a>一元运算符 自增自减</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++;  <span class="comment">//先赋值，再自增</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ++a;  <span class="comment">//先自增，再赋值</span></span><br><span class="line"></span><br><span class="line">System.out.println(a);<span class="comment">//2</span></span><br><span class="line">System.out.println(b);<span class="comment">//0</span></span><br><span class="line">System.out.println(c);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="幂运算"><a href="#幂运算" class="headerlink" title="幂运算"></a>幂运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(<span class="number">2</span>,<span class="number">3</span>);  <span class="comment">//2的3次方，使用Math工具类操作</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与(&amp;&amp;\&amp;) 两边表达式只有全为真时，运算结果才为真  </span></span><br><span class="line"><span class="comment">//或(||\|) 两边表达式只要一个为真，运算结果就为真</span></span><br><span class="line"><span class="comment">//非(！) 真变假，假变真</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(!a);<span class="comment">//false</span></span><br><span class="line">System.out.println(a&amp;&amp;b);<span class="comment">//false</span></span><br><span class="line">System.out.println(a||b);<span class="comment">//true</span></span><br><span class="line">System.out.println(a&amp;b);<span class="comment">//false</span></span><br><span class="line">System.out.println(a|b);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;&amp;与&amp;、||与|的区别</span></span><br><span class="line"><span class="comment">//&amp;&amp;短路功能，当判断左边表达式为假时，直接返回假，不再判断右边表达式</span></span><br><span class="line"><span class="comment">//||短路功能，当判断左边表达式为真时，直接返回真，不再判断右边表达式</span></span><br><span class="line"><span class="comment">//&amp;和|没有短路功能，左右表达式都需要判断</span></span><br><span class="line"><span class="comment">//当左右表达式不为boolean类型时，&amp;和|表示按位操作</span></span><br><span class="line">System.out.println(<span class="number">0b1010</span>&amp;<span class="number">0b0101</span>);  <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="number">0b1010</span>|<span class="number">0b0101</span>);  <span class="comment">//15</span></span><br></pre></td></tr></table></figure><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与运算，同一位都是1结果为1，否则为0</span></span><br><span class="line">System.out.println(<span class="number">0b1010</span>&amp;<span class="number">0b1100</span>);  <span class="comment">//0b1000</span></span><br><span class="line"><span class="comment">//或运算，同一位都是0结果为0，否则为1</span></span><br><span class="line">System.out.println(<span class="number">0b1010</span>|<span class="number">0b1100</span>);  <span class="comment">//0b1110</span></span><br><span class="line"><span class="comment">//异或运算，同一位相同为0，不同为1</span></span><br><span class="line">System.out.println(<span class="number">0b1010</span>^<span class="number">0b1100</span>);  <span class="comment">//0b0110</span></span><br><span class="line"><span class="comment">//取反运算，按位取反</span></span><br><span class="line">System.out.println(~<span class="number">0b1010</span>);  <span class="comment">//0b0101</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//左移,将二进制数左移n位，每移一位相当于*2</span></span><br><span class="line">System.out.println(<span class="number">3</span>&lt;&lt;<span class="number">2</span>);<span class="comment">//12</span></span><br><span class="line"><span class="comment">//0b11</span></span><br><span class="line"><span class="comment">//0b1100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//右移，将二进制数右移n位，每移一位相当于/2</span></span><br><span class="line">System.out.println(<span class="number">9</span>&gt;&gt;<span class="number">2</span>);<span class="comment">//2</span></span><br><span class="line"><span class="comment">//0b1001</span></span><br><span class="line"><span class="comment">//0b10</span></span><br></pre></td></tr></table></figure><h3 id="关于位运算的问题"><a href="#关于位运算的问题" class="headerlink" title="关于位运算的问题"></a>关于位运算的问题</h3><p><strong>问题：</strong>为什么java中按位取反<strong>~5</strong>结果为<strong>-6</strong>。即 System.out.println(~5);的输出结果为-6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在计算机中，负数以其绝对值的补码形式表达。</span><br><span class="line">   1个字节，只能表示256个数。</span><br><span class="line">   因为有符号所以我们就把它表示为：-128~+127。用最高位表示符号位（0表示正数，1表示负数），剩下的7位用来储存数的绝对值的话，能表示2^7个数的绝对值，因为分正负两种情况，2^7*2一共还是256个数。</span><br><span class="line">   0在计算机中储存为00000000</span><br><span class="line">   00000001到01111111依次表示1到127。那么这些数对应的二进制码就是这些数的原码。</span><br><span class="line">   10000001到11111111依次表示-127到-1。10000000表示最小的负数-128。</span><br><span class="line">   计算机储存有符号的整数时，是用该整数的补码进行储存的，0的原码、补码都是0，正数的原码、补码可以特殊理解为相同，负数的补码是它的反码加1。</span><br></pre></td></tr></table></figure><ul><li>5是int类型，占4字节，32位<ul><li>原码：一个整数，按照绝对值大小转换成的二进制数，称为原码。<br>00000000 00000000 00000000 00000101 是 5的原码。</li><li>反码：将二进制数按位取反，所得的新二进制数称为原二进制数的反码。11111111 11111111 11111111 11111010 是5的反码</li><li>补码：反码加1称为补码。<br>11111111 11111111 11111111 11111011 是5的补码</li></ul></li><li>-6是int类型，占4字节，32位。因为负数以其绝对值的补码形式表达，所以-6在计算机中以6的补码表示<ul><li>6的原码：00000000 00000000 00000000 00000110</li><li>6的反码：11111111 11111111 11111111 11111001</li><li>6的补码：11111111 11111111 11111111 11111010</li></ul></li></ul><p>因为0的原码、补码都是0；正数的原码、补码可以<strong>特殊理解为相同</strong>；负数的补码是它的反码加1。</p><p>5在计算机中用原码表示：00000000 00000000 00000000 00000101</p><p>按位取反~5后：11111111 11111111 11111111 11111010，符号位为1，是负数，且该值与6的补码相同，负数以其绝对值的补码形式表达，因此计算机输出-6</p><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(a+b);  <span class="comment">//30(int)</span></span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b);<span class="comment">//1020(String)</span></span><br><span class="line">System.out.println(a+b+<span class="string">&quot;&quot;</span>);<span class="comment">//30(String)</span></span><br><span class="line">System.out.println(a+b+<span class="string">&quot;&quot;</span>+a);<span class="comment">//3010(String)</span></span><br><span class="line"><span class="comment">//+运算中碰到String类型时，会将其他操作数转换为String类型并进行字符串连接</span></span><br><span class="line"><span class="comment">//没有遇到String类型之前，操作数按原有类型运算,遇到String类型后再将之前的运算结果转化为字符串进行拼接</span></span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x?y:z</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">if</span>(X)&#123;</span><br><span class="line">    y;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础笔记3（注释、标识符、数据类型、类型转换）</title>
      <link href="/2020/12/13/java-notes-03/"/>
      <url>/2020/12/13/java-notes-03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java基础笔记3（注释、标识符、数据类型、类型转换）"><a href="#Java基础笔记3（注释、标识符、数据类型、类型转换）" class="headerlink" title="Java基础笔记3（注释、标识符、数据类型、类型转换）"></a>Java基础笔记3（注释、标识符、数据类型、类型转换）</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Helloworld</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> PlanZ</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="IDEA自定义注释样式"><a href="#IDEA自定义注释样式" class="headerlink" title="IDEA自定义注释样式"></a>IDEA自定义注释样式</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-03/java-01.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-03/java-02.png" alt=""></p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><div class="table-container"><table><thead><tr><th><a href="https://baike.baidu.com/item/abstract">abstract</a></th><th><a href="https://baike.baidu.com/item/assert">assert</a></th><th><a href="https://baike.baidu.com/item/boolean">boolean</a></th><th>break</th><th><a href="https://baike.baidu.com/item/byte">byte</a></th></tr></thead><tbody><tr><td>case</td><td><a href="https://baike.baidu.com/item/catch">catch</a></td><td><a href="https://baike.baidu.com/item/char">char</a></td><td><a href="https://baike.baidu.com/item/class">class</a></td><td>const</td></tr><tr><td>continue</td><td><a href="https://baike.baidu.com/item/default">default</a></td><td><a href="https://baike.baidu.com/item/do">do</a></td><td><a href="https://baike.baidu.com/item/double">double</a></td><td><a href="https://baike.baidu.com/item/else">else</a></td></tr><tr><td><a href="https://baike.baidu.com/item/enum">enum</a></td><td><a href="https://baike.baidu.com/item/extends">extends</a></td><td><a href="https://baike.baidu.com/item/final">final</a></td><td><a href="https://baike.baidu.com/item/finally">finally</a></td><td>float</td></tr><tr><td><a href="https://baike.baidu.com/item/for">for</a></td><td>goto</td><td><a href="https://baike.baidu.com/item/if">if</a></td><td><a href="https://baike.baidu.com/item/implements">implements</a></td><td><a href="https://baike.baidu.com/item/import">import</a></td></tr><tr><td><a href="https://baike.baidu.com/item/instanceof">instanceof</a></td><td><a href="https://baike.baidu.com/item/int">int</a></td><td><a href="https://baike.baidu.com/item/interface">interface</a></td><td>long</td><td>native</td></tr><tr><td>new</td><td><a href="https://baike.baidu.com/item/package">package</a></td><td><a href="https://baike.baidu.com/item/private">private</a></td><td><a href="https://baike.baidu.com/item/protected">protected</a></td><td><a href="https://baike.baidu.com/item/public">public</a></td></tr><tr><td><a href="https://baike.baidu.com/item/return">return</a></td><td><a href="https://baike.baidu.com/item/strictfp">strictfp</a></td><td><a href="https://baike.baidu.com/item/short">short</a></td><td><a href="https://baike.baidu.com/item/static">static</a></td><td><a href="https://baike.baidu.com/item/super">super</a></td></tr><tr><td><a href="https://baike.baidu.com/item/switch">switch</a></td><td><a href="https://baike.baidu.com/item/synchronized">synchronized</a></td><td><a href="https://baike.baidu.com/item/this">this</a></td><td><a href="https://baike.baidu.com/item/throw">throw</a></td><td>throws</td></tr><tr><td><a href="https://baike.baidu.com/item/transient">transient</a></td><td>try</td><td><a href="https://baike.baidu.com/item/void">void</a></td><td><a href="https://baike.baidu.com/item/volatile">volatile</a></td><td><a href="https://baike.baidu.com/item/while">while</a></td></tr></tbody></table></div><h3 id="标识符-1"><a href="#标识符-1" class="headerlink" title="标识符"></a>标识符</h3><ul><li>所有的标识符以字母（A-Z或a-z），美元符（$），下划线（_）开始，不可以以数字开头</li><li>首字母之后可以是字母（A-Z或a-z），美元符（$），下划线（_），数字（0-9）的任意组合</li><li>不能使用关键字作为变量名或方法名</li><li>大小写敏感</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="强类型语言"><a href="#强类型语言" class="headerlink" title="强类型语言"></a>强类型语言</h3><p>要求变量的使用要严格符合规定，所有变量必须先定义后使用</p><h3 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h3><p>弱类型语言也称为弱类型定义语言。与强类型语言定义相反。</p><p>vb，php等就属于弱类型语言。</p><h3 id="Java的数据类型分为两大类"><a href="#Java的数据类型分为两大类" class="headerlink" title="Java的数据类型分为两大类"></a>Java的数据类型分为两大类</h3><p><strong>基本类型(Primitive Type)</strong></p><ul><li>数值类型<ul><li>整数类型<ul><li>byte占1个字节范围：-128-127</li><li>short占2个字节范围：-32768-32767</li><li>int占4个字节范围：-2147483648-2147483647</li><li>long占8个字节范围：-9223372036854775808-9223372036854775807</li></ul></li><li>浮点类型<ul><li>float占4个字节</li><li>double占8个字节</li></ul></li><li>字符类型<ul><li>char占2个字节</li></ul></li></ul></li><li>boolean类型<ul><li>boolean占1位，其值只有true和false</li></ul></li></ul><p><strong>引用类型(Reference Type)</strong></p><ul><li>类</li><li>接口</li><li>数组</li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h3><ul><li>位（bit）：计算机内部存储的最小单位，11001010是一个八位二进制数</li><li>字节（byte）：计算机数据处理基本单位，用B表示</li><li>1B=8bit </li><li>1KB=1024B</li><li>1MB=1024KB</li><li>1GB=1024MB</li><li>1TB=1024GB</li><li>1PB=1024TB</li><li>1EB=1024PB</li></ul><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><ul><li>二进制0b</li><li>八进制0</li><li>十六进制0x</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">0b10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="number">010</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a1);</span><br><span class="line">System.out.println(a2);</span><br><span class="line">System.out.println(a3);</span><br><span class="line">System.out.println(a4);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">16</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="浮点数扩展"><a href="#浮点数扩展" class="headerlink" title="浮点数扩展"></a>浮点数扩展</h3><p>浮点数是有限的、离散的，存在舍入误差</p><p>避免使用浮点数进行比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.1f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1.0</span>/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(f);</span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println(f==d);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">0.1</span></span><br><span class="line"><span class="comment">0.1</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">123123123123123f</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f2</span> <span class="operator">=</span> f1 + <span class="number">1</span>;</span><br><span class="line">System.out.println(f1==f2);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>银行业务使用<strong>BigDecimal</strong>（数学工具类）来表示</p><h3 id="字符扩展"><a href="#字符扩展" class="headerlink" title="字符扩展"></a>字符扩展</h3><p>所有的字符本质还是数字</p><p>ASCALL码 1字节</p><p>Unicode编码 2字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println((<span class="type">int</span>)c);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">97</span></span><br><span class="line"><span class="comment">原因：</span></span><br><span class="line"><span class="comment">a的ASCALL码对应97</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;\u0061&#x27;</span>;</span><br><span class="line">System.out.println(c);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">原因：</span></span><br><span class="line"><span class="comment">a的Unicode码对应0061</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><div class="table-container"><table><thead><tr><th>转义字符</th><th>意义</th><th>ASCII码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>响铃(BEL)</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行(LF) ，将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表(HT) （跳到下一个TAB位置）</td><td>009</td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>\\</td><td>代表一个反斜线字符’’\’</td><td>092</td></tr><tr><td>\’</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>\”</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>\?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>空字符(NUL)</td><td>000</td></tr><tr><td>\ddd</td><td>1到3位八进制数所代表的任意字符</td><td>三位八进制</td></tr><tr><td>\xhh</td><td>十六进制所代表的任意字符</td><td>十六进制</td></tr></tbody></table></div><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>Java是强类型语言，不同类型变量运算时需要类型转换。</p><p>运算时，不同类型的数据先转化为同一类型，然后进行运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>,<span class="type">short</span>,<span class="type">char</span> -&gt; <span class="type">int</span> -&gt; <span class="type">long</span> -&gt; <span class="type">float</span> -&gt; <span class="type">double</span></span><br></pre></td></tr></table></figure><p>强制类型转换（从高到低）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内存溢出</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;</span><br><span class="line">System.out.println(i); <span class="comment">//128</span></span><br><span class="line">System.out.println(b); <span class="comment">//-128 byte范围是-128-127，将128赋给byte内存溢出</span></span><br></pre></td></tr></table></figure><p>自动类型转换（从低到高）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> i;</span><br><span class="line">System.out.println(i); <span class="comment">//128</span></span><br><span class="line">System.out.println(d); <span class="comment">//128.0</span></span><br></pre></td></tr></table></figure><p>注意点</p><ol><li>不能对布尔类型进行转换</li><li>不能把对象类型转换为不相干的类型</li><li>在把高容量转换为低容量时，要进行强制转换</li><li>转换时可能会出现内存溢出或精度问题</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础笔记2（编译型和解释型）</title>
      <link href="/2020/12/13/java-notes-02/"/>
      <url>/2020/12/13/java-notes-02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java基础笔记2（编译型和解释型）"><a href="#Java基础笔记2（编译型和解释型）" class="headerlink" title="Java基础笔记2（编译型和解释型）"></a>Java基础笔记2（编译型和解释型）</h1><h2 id="编译型和解释型"><a href="#编译型和解释型" class="headerlink" title="编译型和解释型"></a>编译型和解释型</h2><p>计算机不能理解高级语言，只能直接理解机器语言，所以使用任何高级语言编写的程序若想被计算机运行，都必须将其转换成计算机语言，也就是机器码。而这种转换的方式有两种：编译型和解释型。</p><h3 id="编译型"><a href="#编译型" class="headerlink" title="编译型"></a>编译型</h3><p>一次编译，多次执行。（运行速度快，跨平台性差）</p><p>源程序执行前编译，只编译一次，以后运行时不需要编译。</p><p>使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。</p><p>编译型语言：C、C++、Objective等</p><h3 id="解释型"><a href="#解释型" class="headerlink" title="解释型"></a>解释型</h3><p>边解释，边执行。（跨平台性好，效率较低）</p><p>直接将源代码解释成机器码并立即执行。</p><p>使用专门的解释器，逐行解释源程序为特定平台的机器码并立即执行。代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。</p><p>解释型语言：Python等</p><h2 id="JAVA程序运行机制"><a href="#JAVA程序运行机制" class="headerlink" title="JAVA程序运行机制"></a>JAVA程序运行机制</h2><p>Java既具有编译型特点，也具有解释型特点。</p><p>因为有JVM的存在，Java可以一次编译，到处运行。</p><h3 id="Java编译型特点："><a href="#Java编译型特点：" class="headerlink" title="Java编译型特点："></a>Java编译型特点：</h3><p>所有的Java代码都是要编译的成字节码文件。</p><h3 id="Java解释型特点："><a href="#Java解释型特点：" class="headerlink" title="Java解释型特点："></a>Java解释型特点：</h3><p>编译后的Java代码不能直接运行，需要在JVM上进行解释运行。（或编译运行）</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-02/java-01.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础笔记1（介绍、环境搭建与卸载）</title>
      <link href="/2020/12/13/java-notes-01/"/>
      <url>/2020/12/13/java-notes-01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java基础笔记1（介绍、环境搭建与卸载）"><a href="#Java基础笔记1（介绍、环境搭建与卸载）" class="headerlink" title="Java基础笔记1（介绍、环境搭建与卸载）"></a>Java基础笔记1（介绍、环境搭建与卸载）</h1><h2 id="Java发展史"><a href="#Java发展史" class="headerlink" title="Java发展史"></a>Java发展史</h2><h3 id="1972年C诞生"><a href="#1972年C诞生" class="headerlink" title="1972年C诞生"></a>1972年C诞生</h3><ul><li>贴近硬件，运行极快，效率极高</li><li>操作系统，编译器，数据库，网络系统等</li><li>指针和内存管理</li></ul><h3 id="1982年C-诞生"><a href="#1982年C-诞生" class="headerlink" title="1982年C++诞生"></a>1982年C++诞生</h3><ul><li>面向对象</li><li>兼容C</li><li>图形领域、游戏等</li></ul><h3 id="新语言"><a href="#新语言" class="headerlink" title="新语言"></a>新语言</h3><ul><li>语法像C</li><li>没有指针</li><li>没有内存管理</li><li>真正的可移植性，一次编写，到处运行</li><li>面向对象</li><li>类型安全</li><li>高质量类库</li></ul><h3 id="Java初生"><a href="#Java初生" class="headerlink" title="Java初生"></a>Java初生</h3><ul><li><p>1995年的网页简单而粗糙，缺乏互动性</p></li><li><p>图形界面程序（Applet）</p></li><li>Bill Gates说：这是迄今为止设计的最好的语言！</li><li>Java 2 标准版（J2SE）：占领桌面</li><li>Java 2 移动版（J2ME）：占领手机</li><li>Java 2 企业版（J2EE）：占领服务器</li><li>大量巨头加入</li></ul><h3 id="Java发展"><a href="#Java发展" class="headerlink" title="Java发展"></a>Java发展</h3><ul><li>基于Java开发了大量平台、系统、工具<ul><li>构建工具：Ant, Maven, Jekins</li><li>应用服务器：Tomcat, Jetty, Jboss, Websphere, weblogic(三高问题：高可用、高性能、高并发)</li><li>Web开发：Struts, Spring, Hibernate, myBatis</li><li>开发工具：Eclipse, Netbean, intellij idea, Jbuilder</li><li>……</li></ul></li><li>2006：Hadoop（大数据领域）</li><li>2008：Android（手机端）</li></ul><h2 id="Java特性和优势"><a href="#Java特性和优势" class="headerlink" title="Java特性和优势"></a>Java特性和优势</h2><ul><li>简单性</li><li>面向对象</li><li>可以执行</li><li>高性能</li><li>分布式</li><li>动态性（反射）</li><li>多线程</li><li>安全性</li><li>健壮性</li></ul><h2 id="Java三大版本"><a href="#Java三大版本" class="headerlink" title="Java三大版本"></a>Java三大版本</h2><ul><li>JavaSE：标准版（桌面程序、控制台开发）</li><li>JavaME：嵌入式开发（手机、小家电）</li><li>JavaEE：企业级开发（Web端，服务器开发）</li></ul><h2 id="JDK、JRE、JVM"><a href="#JDK、JRE、JVM" class="headerlink" title="JDK、JRE、JVM"></a>JDK、JRE、JVM</h2><ul><li>JDK：Java Development Kit</li><li>JRE：Java Runtime Environment</li><li>JVM：Java Virtual Machine</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-01.png" alt=""></p><h2 id="Java环境搭建"><a href="#Java环境搭建" class="headerlink" title="Java环境搭建"></a>Java环境搭建</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li><p>下载电脑对应版本的JDK</p></li><li><p>安装JDK（建议准备一个存放环境的文件夹）</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-02.png" alt=""></p></li><li><p>配置环境变量</p><p>右键点击计算机-属性-高级系统设置-高级-环境变量</p><p>或</p><p>控制面板-系统安全-系统-高级系统设置-高级-环境变量</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-03.png" alt=""></p></li><li><p>新建JAVA_HOME系统变量</p><p>变量名：JAVA_HOME</p><p>变量值：（JDK安装目录）</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-04.png" alt=""></p></li><li><p>编辑PATH系统变量</p><p>新建 </p><p>%JAVA_HOME%\bin</p><p>%JAVA_HOME%\jre\bin</p></li></ol><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-05.png" alt=""></p><ol><li><p>新建CLASSPATH系统变量</p><p>变量名：CLASSPATH</p><p>变量值：.%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar（注意最前面的点不要漏写）</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-06.png" alt=""></p></li><li><p>在命令行输入java -version和javac -version检查是否安装成功</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-07.png" alt=""></p></li><li><p>java8以上版本不需要配置jre</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-08.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-09.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-10.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-11.png" alt=""></p></li></ol><h3 id="为什么要配置JAVA-HOME"><a href="#为什么要配置JAVA-HOME" class="headerlink" title="为什么要配置JAVA_HOME"></a>为什么要配置JAVA_HOME</h3><ol><li>方便引用</li><li>归一原则, 当JDK路径改变的时候, 仅需更改JAVA_HOME的变量值即可</li><li>某些第三方软件会引用约定好的JAVA_HOME变量</li></ol><h3 id="为什么要配置PATH"><a href="#为什么要配置PATH" class="headerlink" title="为什么要配置PATH"></a>为什么要配置PATH</h3><p>因为电脑系统将根据该变量的值找到java编程中需要的一些程序，比如javac.exe、java.exe、javah.exe等等</p><h3 id="为什么要配置CLASSPATH"><a href="#为什么要配置CLASSPATH" class="headerlink" title="为什么要配置CLASSPATH"></a>为什么要配置CLASSPATH</h3><p>配置classpath变量，才能使得java解释器知道到哪里去找标准类库。比如我们常用到java.lang包中的类，在配置classpath变量后被设为默认导入，所以在写程序时就不用import这个包了</p><p>这些标准类库在JDK的lib目录下以jar为后缀的文件中：dt.jar，tools.jar</p><p>通常我们都会把这两个jar包加到我们的classpath环境变量</p><h2 id="卸载JDK"><a href="#卸载JDK" class="headerlink" title="卸载JDK"></a>卸载JDK</h2><ol><li><p>删除JDK文件</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-12.png" alt=""></p></li><li><p>控制面板-系统安全-系统  或  右键我的电脑-属性</p></li></ol><p>   <img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-13.png" alt=""></p><ol><li>高级系统设置-环境变量</li></ol><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-14.png" alt=""></p><ol><li><p>删除系统变量中JAVA_HOME变量</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-15.png" alt=""></p></li><li><p>删除PATH变量中的关于Java的目录</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-16.png" alt=""></p></li><li><p>删除CLASSPATH系统变量</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-17.png" alt=""></p></li><li><p>在命令行输入java -version检查是否删除成功</p></li></ol><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/java-notes-01/java-18.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevTools热部署</title>
      <link href="/2020/10/19/springboot-devtools/"/>
      <url>/2020/10/19/springboot-devtools/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="DevTools热部署"><a href="#DevTools热部署" class="headerlink" title="DevTools热部署"></a>DevTools热部署</h1><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><h3 id="IDEA新建sping-boot选择-DevTools"><a href="#IDEA新建sping-boot选择-DevTools" class="headerlink" title="IDEA新建sping boot选择 DevTools"></a>IDEA新建sping boot选择 DevTools</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-devtools 模块能够实现热部署，添加类  添加方法  修改配置文件  修改页面等 都能实现热部署</span><br><span class="line">原理就是重启项目，但比手动重启快多了，其深层原理是使用了两个ClassLoader，一个Classloader加载那些不会改变的类（第三方Jar包），另一个ClassLoader加载会更改的类，称为  restart ClassLoader,这样在有代码更改的时候，原来的restart ClassLoader 被丢弃，重新创建一个restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间（5秒以内）</span><br></pre></td></tr></table></figure><p><strong>第一步 引入jar+插件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">第一步 引入jar+插件</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;optional&gt;true&lt;/optional&gt;    不能被其它模块继承，如果多个子模块可以去掉  不必须</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;     只在运行时起作用  打包时不打进去</span><br><span class="line">&lt;/dependency&gt;    </span><br><span class="line">添加spring-boot-maven-plugin：</span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">            &lt;!--fork :  如果没有该项配置，肯呢个devtools不会起作用，即应用不会restart   这个要手动加进去 --&gt;</span><br><span class="line">            &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p><strong>第二部 启动项目即可</strong></p><ol><li>devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机），注意：因为其采用的虚拟机机制，该项重启是很快的。</li><li>devtools可以实现页面热部署（即页面修改后会立即生效，这个可以直接在application.properties文件中配置spring.thymeleaf.cache=false来实现(这里注意不同的模板配置不一样)</li></ol><h3 id="如果使用idea，必须确保开启运行时编译才行"><a href="#如果使用idea，必须确保开启运行时编译才行" class="headerlink" title="如果使用idea，必须确保开启运行时编译才行"></a>如果使用idea，必须确保开启运行时编译才行</h3><p>1.设置File -&gt;Setting -&gt;Compile： 勾选“Make project automatically”选项</p><p>2.使用快捷键ctrl+alt+shift+/，选择选项Registry，找到选项”compller.automake.allow.when.app.running”并勾选</p><p>3.重启idea即可</p><p>idea新建一个spring-boot工程，勾选DevTools即可，pom就会引入相应jar ，该jar默认是runtime 也就是只在运行时使用，打包时不打进去。</p><h2 id="devtools-原理说明"><a href="#devtools-原理说明" class="headerlink" title="devtools 原理说明"></a>devtools 原理说明</h2><p>Spring Boot 包括一组额外的工具，可以使应用程序开发体验更加愉快。 spring-boot-devtools 模块可以包含在任何项目中，它可以节省大量的时间。 想要使用devtools支持，只需将模块依赖关系添加到你的构建中：</p><p><strong>Maven:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>Gradle:</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">&quot;org.springframework.boot:spring-boot-devtools&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行打包的应用程序时，开发人员工具会自动禁用。</strong>如果你通过 Java -jar 或者其他特殊的类加载器进行启动时，都会被认为是“生产环境的应用”。</p><p>将依赖标记为 optional 可选是一种最佳做法，可以防止将devtools依赖传递到其他模块中。Gradle 不支持开箱即用的optional依赖项，你可以参考propdeps-plugin。</p><h2 id="属性默认设置"><a href="#属性默认设置" class="headerlink" title="属性默认设置"></a>属性默认设置</h2><p>Spring Boot 支持的一些库中会使用缓存来提高性能。例如模版引擎将缓存编译后的模板，以避免重复解析模板文件。 此外，Spring MVC可以在服务静态资源时向响应中添加HTTP缓存头。</p><p>虽然缓存在生产中非常有益，但它在开发过程中可能会产生反效果，它会阻止你看到刚刚在应用程序中进行的更改。 因此，spring-boot-devtools 将默认禁用这些缓存选项。</p><p>缓存选项通常在application.properties 文件中配置。例如，Thymeleaf提供了spring.thymeleaf.cache属性。spring-boot-devtools 模块不需要手动设置这些属性，而是自动应用合理的开发时配置。</p><h2 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h2><p>spring-boot-devtools会在类路径上的文件发生更改时自动重启。 这在IDE中工作时可能是一个有用的功能，因为它为代码更改提供了非常快的反馈循环。 默认情况下会监视类路径上的所有变动，但请注意，某些资源（如静态资源和视图模板）不需要重启应用程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">触发重启</span><br><span class="line"> </span><br><span class="line">当DevTools监视类路径资源时，触发重启的唯一方法是更新类路径。 导致类路径更新的方式取决于你正在使用的IDE。在Eclipse中，保存修改的文件将导致类路径被更新并触发重启。 在IntelliJ IDEA中，构建项目（ Build -&gt; Make Project ）将具有相同的效果。</span><br><span class="line"> </span><br><span class="line">重新启动和重新加载</span><br><span class="line"> </span><br><span class="line">Spring Boot提供的重新启动技术使用了两个类加载器。 不改变的类（例如，来自第三方jar的）被加载到 base 类加载器中。 你正在开发的类被加载到 restart 类加载器中。 当应用程序重启时， restart加载器将被丢弃，并创建一个新的类加载器。 这种方法意味着应用程序重启通常比“冷启动”快得多，因为 base 加载器已经已加载并且可用。</span><br></pre></td></tr></table></figure><h3 id="1-排除资源"><a href="#1-排除资源" class="headerlink" title="1. 排除资源"></a><strong>1. 排除资源</strong></h3><p>某些资源在更改时不一定需要触发重启。 例如，可以直接编辑Thymeleaf模板。 默认情况下，更改/META-INF/maven ， /META-INF/resources ， /resources ， /static ， /public或/templates中的资源不会触发重启，但会触发实时重新加载。 如果要自定义这些排除项，可以使用spring.devtools.restart.exclude属性。 例如，要仅排除/static和/public你将设置以下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.devtools.restart.exclude</span> = <span class="string">static / **，public / ** </span></span><br></pre></td></tr></table></figure><p>如果你想保留上面的默认（情况下的）值并添加其他的排除项，你可以使用</p><p>spring.devtools.restart.additional-exclude 属性。</p><h3 id="2-监控额外的路径"><a href="#2-监控额外的路径" class="headerlink" title="2. 监控额外的路径"></a><strong>2. 监控额外的路径</strong></h3><p>当你对不在类路径中的文件进行更改时，可能需要重启或重新加载应用程序。为此，请使用spring.devtools.restart.additional-paths 属性来配置监视其他路径的更改。你可以使用上述的 spring.devtools.restart.exclude 属性来控制附加路径下的更改是否会触发完全重启或只是实时重新加载 。</p><h3 id="3-禁用重启"><a href="#3-禁用重启" class="headerlink" title="3. 禁用重启"></a><strong>3. 禁用重启</strong></h3><p>如果不想使用重启功能，可以使用spring.devtools.restart.enabled属性来禁用它。 在大多数情况下，你可以在application.properties中设置此项（这仍将初始化重启类加载器，但不会监视文件更改）。</p><p>例如，如果你需要完全禁用重启支持，因为它不适用于特定库，则需要在调用SpringApplication.run(…)之前设置System属性。 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.setProperty(<span class="string">&quot;spring.devtools.restart.enabled&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">    SpringApplication.run(MyApp.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-使用触发文件"><a href="#4-使用触发文件" class="headerlink" title="4. 使用触发文件"></a><strong>4. 使用触发文件</strong></h3><p>如果你使用自动编译已更改文件的IDE，则可能希望仅在特定时间触发重启。 为此，你可以使用“触发文件”，这是一个特殊文件，当你要实际触发重启检查时，必须修改它。 更改文件只会触发检查，只有在Devtools检测到它必须执行某些操作时才会重启。 触发文件可以手动更新，也可以通过IDE插件更新。</p><p>要使用触发器文件，请使用spring.devtools.restart.trigger-file属性。</p><p>如果你希望将spring.devtools.restart.trigger-file设置为全局配置，可以参考下面第四小节。</p><h3 id="5-自定义重启类加载器"><a href="#5-自定义重启类加载器" class="headerlink" title="5. 自定义重启类加载器"></a><strong>5. 自定义重启类加载器</strong></h3><p>如上面重新启动和重新加载部分所述，重启功能是通过使用两个类加载器实现的。 对于大多数应用程序，此方法运行良好，但有时可能会导致类加载问题。</p><p>默认情况下，IDE中的任何打开的项目都会使用“restart”类加载器加载，任何常规.jar文件将使用“base”类加载器加载。 如果你在多模块项目上工作，但不是每个模块都导入到IDE中，则可能需要自定义配置。 为此，你可以创建一个META-INF/spring-devtools.properties文件。</p><p>spring-devtools.properties文件可以包含restart.exclude. 和restart.include. 前缀的属性。 include元素是应该被放入“restart”类加载器的项目， exclude元素是应该放入“base”类加载器的项目。 属性的值是应用于类路径下的正则表达式。</p><p>例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">restart.exclude.companycommonlibs</span>=<span class="string">/mycorp-common-[\\w-]+\.jar</span></span><br><span class="line"><span class="attr">restart.include.projectcommon</span>=<span class="string">/mycorp-myproj-[\\w-]+\.jar</span></span><br></pre></td></tr></table></figure><p>针对通用Mapper，可以做如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">restart.include.mapper</span>=<span class="string">/mapper-[\\w-\\.]+jar</span></span><br></pre></td></tr></table></figure><p>所有属性的键值（名字，companycommonlibs 部分）必须是唯一的，只有 restart.exclude. 和 restart.include. 开头的属性有效。</p><p>所有类路径下面的 META-INF/spring-devtools.properties 配置文件都会生效，所以你可以把该配置打包到每个模块中。</p><p>注：新版本的Mapper(3.4.1+)会默认增加该配置。</p><h3 id="6-已知限制"><a href="#6-已知限制" class="headerlink" title="6. 已知限制"></a><strong>6. 已知限制</strong></h3><p>重启功能对使用标准ObjectInputStream对象序列化的对象不是很好 。如果需要反序列化数据，可能需要使用Spring的ConfigurableObjectInputStream配合Thread.currentThread().getContextClassLoader() 使用。</p><p>不幸的是，一些第三方库都不考虑在使用上下文类加载器的情况下反序列化。 如果你发现这样的问题，你需要向原作者请求修复。</p><h2 id="实时加载"><a href="#实时加载" class="headerlink" title="实时加载"></a>实时加载</h2><p>spring-boot-devtools模块包含嵌入式LiveReload服务器，可以在资源更改时用于触发浏览器刷新。 LiveReload浏览器扩展程序支持Chrome，Firefox和Safari，你可以从livereload.com免费下载。</p><p>如果你不想在应用程序运行时启动LiveReload服务器，则可以将spring.devtools.livereload.enabled属性设置为false 。</p><p>同一时间只能运行一个LiveReload服务器。 开始应用程序之前，请确保没有其他LiveReload服务器正在运行。如果从IDE启动多个应用程序，则只有第一个应用程序将支持LiveReload。</p><h2 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h2><p>你可以通过向$HOME文件夹添加名为.spring-boot-devtools.properties的文件来配置全局devtools设置（请注意，文件名以“.”开头）。 添加到此文件的任何属性将适用于你的计算机上使用devtools的所有 Spring Boot应用程序。 例如，要配置重启始终使用触发器文件 ，你可以添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">〜/ .spring-boot-devtools.properties</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.devtools.reload.trigger-file</span>=<span class="string">.reloadtrigger</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> DevTools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A-Star算法介绍</title>
      <link href="/2020/10/19/a-star-algorithm/"/>
      <url>/2020/10/19/a-star-algorithm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="A-Star算法介绍"><a href="#A-Star算法介绍" class="headerlink" title="A-Star算法介绍"></a>A-Star算法介绍</h1><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>A*（念做：A Star）算法是一种很常用的路径查找和图形遍历算法。它有较好的性能和准确度。</p><p>A*算法最初发表于1968年，由Stanford研究院的Peter Hart, Nils Nilsson以及Bertram Raphael发表。它可以被认为是Dijkstra算法的扩展。</p><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>为了更好的理解A*算法，我们首先从广度优先（Breadth First）算法讲起。</p><p>正如其名称所示，广度优先搜索以广度做为优先级进行搜索。</p><p>从起点开始，首先遍历起点周围邻近的点，然后再遍历已经遍历过的点邻近的点，逐步的向外扩散，直到找到终点。</p><p>这种算法就像洪水（Flood fill）一样向外扩张，算法的过程如下图所示：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/a-star-algorithm/a-01.gif" alt=""></p><p>在上面这幅动态图中，算法遍历了图中所有的点，这通常没有必要。对于有明确终点的问题来说，一旦到达终点便可以提前终止算法，下面这幅图对比了这种情况：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/a-star-algorithm/a-02.png" alt=""></p><p>在执行算法的过程中，每个点需要记录达到该点的前一个点的位置 — 可以称之为父节点。这样做之后，一旦到达终点，便可以从终点开始，反过来顺着父节点的顺序找到起点，由此就构成了一条路径。</p><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p>Dijkstra算法是由计算机科学家<a href="https://en.wikipedia.org/wiki/Edsger_W._Dijkstra">Edsger W. Dijkstra</a>在1956年提出的。</p><p>Dijkstra算法用来寻找图形中节点之间的最短路径。</p><p>考虑这样一种场景，在一些情况下，图形中相邻节点之间的移动代价并不相等。例如，游戏中的一幅图，既有平地也有山脉，那么游戏中的角色在平地和山脉中移动的速度通常是不相等的。</p><p>在Dijkstra算法中，需要计算每一个节点距离起点的总移动代价。同时，还需要一个优先队列结构。对于所有待遍历的节点，放入优先队列中会按照代价进行排序。</p><p>在算法运行的过程中，每次都从优先队列中选出代价最小的作为下一个遍历的节点。直到到达终点为止。</p><p>下面对比了不考虑节点移动代价差异的广度优先搜索与考虑移动代价的Dijkstra算法的运算结果：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/a-star-algorithm/a-03.gif" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当图形为网格图，并且每个节点之间的移动代价是相等的，那么Dijkstra算法将和广度优先算法变得一样。</span><br></pre></td></tr></table></figure><h2 id="最佳优先搜索"><a href="#最佳优先搜索" class="headerlink" title="最佳优先搜索"></a>最佳优先搜索</h2><p>在一些情况下，如果我们可以预先计算出每个节点到终点的距离，则我们可以利用这个信息更快的到达终点。</p><p>其原理也很简单。与Dijkstra算法类似，我们也使用一个优先队列，但此时以每个节点到达终点的距离作为优先级，每次始终选取到终点移动代价最小（离终点最近）的节点作为下一个遍历的节点。这种算法称之为最佳优先（Best First）算法。</p><p>这样做可以大大加快路径的搜索速度，如下图所示：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/a-star-algorithm/a-04.gif" alt=""></p><p>但这种算法会不会有什么缺点呢？答案是肯定的。</p><p>因为，如果起点和终点之间存在障碍物，则最佳优先算法找到的很可能不是最短路径，下图描述了这种情况。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/a-star-algorithm/a-05.gif" alt=""></p><h2 id="A-算法"><a href="#A-算法" class="headerlink" title="A*算法"></a>A*算法</h2><p>对比了上面几种算法，最后终于可以讲解本文的重点：A*算法了。</p><p>下面的描述我们将看到，A*算法实际上是综合上面这些算法的特点于一身的。</p><p>A*算法通过下面这个函数来计算每个节点的优先级。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/a-star-algorithm/a-06.png" alt=""></p><p>其中：</p><ul><li>f(n)是节点n的综合优先级。当我们选择下一个要遍历的节点时，我们总会选取综合优先级最高（值最小）的节点。</li><li>g(n) 是节点n距离起点的代价。</li><li>h(n)是节点n距离终点的预计代价，这也就是A*算法的启发函数。关于启发函数我们在下面详细讲解。</li></ul><p>A*算法在运算过程中，每次从优先队列中选取f(n)值最小（优先级最高）的节点作为下一个待遍历的节点。</p><p>另外，A*算法使用两个集合来表示待遍历的节点，与已经遍历过的节点，这通常称之为<code>open_set</code>和<code>close_set</code>。</p><p>完整的A*算法描述如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">* 初始化open_set和close_set；</span><br><span class="line">* 将起点加入open_set中，并设置优先级为<span class="number">0</span>（优先级最高）；</span><br><span class="line">* 如果open_set不为空，则从open_set中选取优先级最高的节点n：</span><br><span class="line">    * 如果节点n为终点，则：</span><br><span class="line">        * 从终点开始逐步追踪<span class="built_in">parent</span>节点，一直达到起点；</span><br><span class="line">        * 返回找到的结果路径，算法结束；</span><br><span class="line">    * 如果节点n不是终点，则：</span><br><span class="line">        * 将节点n从open_set中删除，并加入close_set中；</span><br><span class="line">        * 遍历节点n所有的邻近节点：</span><br><span class="line">            * 如果邻近节点m在close_set中，则：</span><br><span class="line">                * 跳过，选取下一个邻近节点</span><br><span class="line">            * 如果邻近节点m也不在open_set中，则：</span><br><span class="line">                * 设置节点m的<span class="built_in">parent</span>为节点n</span><br><span class="line">                * 计算节点m的优先级</span><br><span class="line">                * 将节点m加入open_set中</span><br></pre></td></tr></table></figure><h3 id="启发函数"><a href="#启发函数" class="headerlink" title="启发函数"></a>启发函数</h3><p>上面已经提到，启发函数会影响A*算法的行为。</p><ul><li>在极端情况下，当启发函数h(n)始终为0，则将由g(n)决定节点的优先级，此时算法就退化成了Dijkstra算法。</li><li>如果h(n)始终小于等于节点n到终点的代价，则A*算法保证一定能够找到最短路径。但是当h(n)的值越小，算法将遍历越多的节点，也就导致算法越慢。</li><li>如果h(n)完全等于节点n到终点的代价，则A*算法将找到最佳路径，并且速度很快。可惜的是，并非所有场景下都能做到这一点。因为在没有达到终点之前，我们很难确切算出距离终点还有多远。</li><li>如果h(n)的值比节点n到终点的代价要大，则A*算法不能保证找到最短路径，不过此时会很快。</li><li>在另外一个极端情况下，如果h(n)相较于g(n)大很多，则此时只有h(n)产生效果，这也就变成了最佳优先搜索。</li></ul><p>由上面这些信息我们可以知道，通过调节启发函数我们可以控制算法的速度和精确度。因为在一些情况，我们可能未必需要最短路径，而是希望能够尽快找到一个路径即可。这也是A*算法比较灵活的地方。</p><p>对于网格形式的图，有以下这些启发函数可以使用：</p><ul><li>如果图形中只允许朝上下左右四个方向移动，则可以使用曼哈顿距离（Manhattan distance）。</li><li>如果图形中允许朝八个方向移动，则可以使用对角距离。</li><li>如果图形中允许朝任何方向移动，则可以使用欧几里得距离（Euclidean distance）。</li></ul><h3 id="关于距离"><a href="#关于距离" class="headerlink" title="关于距离"></a>关于距离</h3><p><strong>曼哈顿距离</strong></p><p>如果图形中只允许朝上下左右四个方向移动，则启发函数可以使用曼哈顿距离，它的计算方法如下图所示：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/a-star-algorithm/a-07.png" alt=""></p><p>计算曼哈顿距离的函数如下，这里的D是指两个相邻节点之间的移动代价，通常是一个固定的常数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">heuristic</span>(<span class="params">node</span>) =</span><br><span class="line">    dx = <span class="title function_">abs</span>(node.<span class="property">x</span> - goal.<span class="property">x</span>)</span><br><span class="line">    dy = <span class="title function_">abs</span>(node.<span class="property">y</span> - goal.<span class="property">y</span>)</span><br><span class="line">    <span class="keyword">return</span> D * (dx + dy)</span><br></pre></td></tr></table></figure><p><strong>对角距离</strong></p><p>如果图形中允许斜着朝邻近的节点移动，则启发函数可以使用对角距离。它的计算方法如下：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/a-star-algorithm/a-08.png" alt=""></p><p>计算对角距离的函数如下，这里的D2指的是两个斜着相邻节点之间的移动代价。如果所有节点都正方形，则其值就是</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/a-star-algorithm/a-09.png" alt=""></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">heuristic</span>(<span class="params">node</span>) =</span><br><span class="line">    dx = <span class="title function_">abs</span>(node.<span class="property">x</span> - goal.<span class="property">x</span>)</span><br><span class="line">    dy = <span class="title function_">abs</span>(node.<span class="property">y</span> - goal.<span class="property">y</span>)</span><br><span class="line">    <span class="keyword">return</span> D * (dx + dy) + (<span class="variable constant_">D2</span> - <span class="number">2</span> * D) * <span class="title function_">min</span>(dx, dy)</span><br></pre></td></tr></table></figure><p><strong>欧几里得距离</strong></p><p>如果图形中允许朝任意方向移动，则可以使用欧几里得距离。</p><p>欧几里得距离是指两个节点之间的直线距离，因此其计算方法也是我们比较熟悉的：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/a-star-algorithm/a-10.png" alt=""></p><p>其函数表示如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">heuristic</span><span class="params">(node)</span> </span>=</span><br><span class="line">    dx = <span class="built_in">abs</span>(node.x - goal.x)</span><br><span class="line">    dy = <span class="built_in">abs</span>(node.y - goal.y)</span><br><span class="line">    <span class="keyword">return</span> D * <span class="built_in">sqrt</span>(dx * dx + dy * dy)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A-Star </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora使用说明</title>
      <link href="/2020/10/19/typora-user-guide/"/>
      <url>/2020/10/19/typora-user-guide/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Typora使用说明"><a href="#Typora使用说明" class="headerlink" title="Typora使用说明"></a>Typora使用说明</h1><h2 id="空格与换行"><a href="#空格与换行" class="headerlink" title="空格与换行"></a>空格与换行</h2><p>Typora 在空格与换行部分主要是使用 <a href="http://www.commonmark.cn/w/">CommonMark</a> 作为标注规范。</p><ul><li><strong>空格：</strong>在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。<br>你可以在源代码模式下，为每个空格前加一个 <code>\</code> 转义符，或者直接使用 HTML 风格的 <code>&amp;nbps;</code> 来保持连续的空格。</li><li><strong>软换行：</strong>需要说明的是，在 Markdown 语法中，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在 Typora 中，你可以通过 <code>Shift + Enter</code> 完成一次软换行。软换行只在编辑界面可见，当文档被导出时换行会被省略。</li><li><strong>硬换行：</strong>你可以通过 <code>空格 + 空格 + Shift + Enter</code> 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</li><li><strong>换段：</strong>你可以通过 <code>Enter</code> 完成一次换段。Typora 会自动帮你完成两次 <code>Shift + Enter</code> 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</li><li><strong>Windows 风格（CR+LF）与 Unix 风格（CR）的换行符：</strong>CR 表示回车 <code>\r</code> ，即回到一行的开头，而 LF 表示换行 <code>\n</code> ，即另起一行。<br>所以 Windows 风格的换行符本质是「回车 + 换行」，而 Unix 风格的换行符是「换行」。这也是为什么 Unix / Mac 系统下的文件，如果在 Windows 系统直接打开会全部在同一行内。 你可以在 <code>文件 - 偏好设置 - 编辑器 - 默认换行符</code> 中对此进行切换。</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/typora-user-guide/typora-01.png" alt=""></p><h2 id="emoji-表情"><a href="#emoji-表情" class="headerlink" title="emoji 表情"></a>emoji 表情</h2><p>在 Typora 中，你可以用 <code>:emoji:</code> 的形式来打出 emoji，软件会自动给出图形的提示。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/typora-user-guide/typora-02.png" alt=""></p><h2 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h2><p>Typora 原生支持 LaTeX 语法，你有两种方式输入 LaTeX 风格的数学公式：</p><ol><li><strong>行内公式（inline）：</strong>用 <script type="math/tex">...</script> 括起公式，公式会出现在行内。</li><li><strong>块间公式（display）：</strong>用 $$$…$$$ 括起公式（注意 $$$$ 后需要换行），公式会默认显示在行中间。</li></ol><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>Typora 中代码的插入也可以分为行内和块间两种：</p><ol><li>行内代码：用`…` 或 ``…`` 括起代码，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</li><li>代码块：输入 ``` 后并输入语言名，换行，开始写代码，Typora 就会自动帮你实现代码高亮。Typora 原生支持许多编程语言代码块的语法高亮，基本日常常用的编程语言它都能很好地支持。<br>除此以外，你也可以直接换行开始写，而后再选择语言。</li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>在 Markdown 中插入表格一直是一件比较头疼的事情。在一般的 Markdown 编辑器中，你可以通过以下的格式插入表格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>乍一看还挺直观好用的是吧？但想想，一旦表格内容层次不齐，又或是表格长得难以下手，直接用键盘输入表格就显得十分麻烦和痛苦了。</p><p>好在 Typora 为我们提供了图形界面的插入表格的功能，你只需要在行内 <code>鼠标右键 - 插入 - 表格</code> ，并输入行数和列数，Typora 就会自动生成一张样式不错的空表格。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/typora-user-guide/typora-03.png" alt=""></p><h2 id="链接引用与脚注"><a href="#链接引用与脚注" class="headerlink" title="链接引用与脚注"></a>链接引用与脚注</h2><p><strong>链接引用</strong>类似于我们常在论文末尾看到的「参考文献」的写法，你可以通过 <code>[]:</code> 或<code>[]()</code>的语法来为你的文档加上链接引用。</p><p><strong>脚注</strong>在少数派的文章中也很常见，即某段话结尾右上角标有数字标记，页面底部进行注释的写法。你可以在需要插入脚注标号的位置写 <code>[^ number ]</code> ，再在下方通过 <code>[^ number ]:</code> 在文档中插入脚注。注意不要遗漏了脚注编号 <code>number</code> 前后的空格。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/typora-user-guide/typora-04.png" alt=""></p><p><a href="www.baidu.com">百度</a></p><p>百度<sup><a href="#fn_ 1" id="reffn_ 1"> 1</a></sup></p><h2 id="一个伪装成文本编辑器的浏览器"><a href="#一个伪装成文本编辑器的浏览器" class="headerlink" title="一个伪装成文本编辑器的浏览器"></a>一个伪装成文本编辑器的浏览器</h2><p>当你按下 <code>Shift + F12</code> 快捷键时，页面会弹出一个基于 Chrome 的开发者工具栏，也就是我们在浏览器中常说的「审查元素」。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/typora-user-guide/typora-05.png" alt=""></p><h3 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h3><p>Typora 支持许多常用的 HTML 标签，如果你了解 HTML 语法的话，你可以写出十分美观丰富的文档页面。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/typora-user-guide/typora-06.png" alt=""></p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>为了让文档更美观，我们可以为其加上 CSS style。我认为 Typora 对 CSS 的支持让它成为一众桌面笔记应用中最与众不同的一个。在 Typora 中 CSS 被称为「主题」，但其本质仍是 CSS 文件。你可以在 <code>文件 - 偏好设置 - 主题 - 打开主题文件夹</code> 看到这些 CSS 文件。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/typora-user-guide/typora-07.png" alt="">主题</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/typora-user-guide/typora-08.png" alt="">主题文件夹</p><p>选择不同的主题可以使文档拥有不同的外观，但不会影响内容。Typora 自带了若干主题，你也可以在 <a href="http://theme.typora.io/">官网</a> 下载更多的主题。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/typora-user-guide/typora-09.png" alt=""></p><p>除此以外，如果你有一定的 Web 编程基础，你当然也可以自己修改、新建适合你使用需求的 CSS 文件。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/typora-user-guide/typora-10.png" alt="">CSS 文件</p><p>使用 Typora 的「主题」功能写公众号的一个好处是，只需要每次都套用同样的主题，我们就可以在保证每次排版规范都相同的同时，节省许多重复的工作。</p>]]></content>
      
      
      <categories>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迪杰斯特拉算法</title>
      <link href="/2020/10/18/dijkstra-algorithm/"/>
      <url>/2020/10/18/dijkstra-algorithm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="迪杰斯特拉算法"><a href="#迪杰斯特拉算法" class="headerlink" title="迪杰斯特拉算法"></a>迪杰斯特拉算法</h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ol><li>初始化距离向量 d（长度为 V ），起点设为0，其他点设为无穷大</li><li>初始化集合 Q，含义为尚未确定距离的顶点的集合，将所有顶点加入</li><li>从 Q 中弹出距离最小的顶点 u </li><li>遍历 u 的所有仍在 Q中的邻居 w ， 判断 d[u] + length(u,w) &lt; d[w]是否成立，如果成立，更新d[w] = d[u] + length(u,w), 否则无视</li><li>回到 3 开始循环，直到 Q为空集</li></ol><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ol><li>初始化 d 和 Q  均为 O(V)</li><li>外层循环，每次删除一个顶点，共 V 个顶点，故为O(V)</li><li>内层 Extrac-min 为O(V)，遍历邻居为 O(N)（N 为每个节点最大的邻居数）</li></ol><p>综上，复杂度为  O(V) + O(V^2) + O(VN) ~O(V^2)</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>时间复杂度依赖于最小优先队列的实现方式，如果用数组存储最小优先队列的话，时间复杂度才是O（V^2），因为每次调用extractmin都要遍历整个数组</p><h4 id="图实现"><a href="#图实现" class="headerlink" title="图实现"></a>图实现</h4><p>如我们现在有如下有向加权图：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dijkstra-algorithm/d-01.png" alt=""></p><p>计算点 A 到其他顶点的最短距离。</p><p>同样的，我们创建 vertexes 数组来临时保存点 A 到其他顶点的最短路距离。在算法计算过程中，从点 A 开始往其他顶点扩散遍历。同时以当前遍历到的边结合 vertexes 数组中的值，不断更新 vertexes 数组中的值。</p><p>首先我们以邻接表来表示这个图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Edge</span> &#123;<span class="comment">// 表示边</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> sid;<span class="comment">// 边的起始节点</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> tid;<span class="comment">// 边的结束节点</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> w;<span class="comment">// 边的权重</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.sid = s;</span><br><span class="line">            <span class="built_in">this</span>.tid = t;</span><br><span class="line">            <span class="built_in">this</span>.w = w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Vertex</span> &#123;<span class="comment">// 用于算法实现中，记录第一个节点到这个节点的距离</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> dist;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Vertex</span><span class="params">(<span class="type">int</span> id; <span class="type">int</span> dist)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            <span class="built_in">this</span>.dist = dist;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Edge&gt; adj[];<span class="comment">// 邻接表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> v;<span class="comment">// 顶点数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.v = v;</span><br><span class="line">        <span class="built_in">this</span>.adj = <span class="keyword">new</span> <span class="title class_">LinkedList</span>[v];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i; i&lt;v; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.adj[i] = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Edge&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adj[s].add(<span class="keyword">new</span> <span class="title class_">Edge</span>(s, t, w));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的说明一下这个类，它可以用来表示一张图，类中分别有两个成员变量表示邻接表和顶点数，其中，Edge 类表示一条边，结合邻接表可以将图的信息记录，Vertex 类则是记录起始节点到当前节点的最短距离。</p><p>在算法实现过程中，我们会使用一个优先队列，将离起始节点最近的节点优先出队，利用这个节点能到达的节点的距离与当前记录在 vertexes 数组中的最短距离比较，进行更新最短距离（松弛）。文字说的不太清楚，结合代码会更容易理解。</p><p>注意：由于 Java 类库中没有提供可更新节点信息的优先队列，因此我们需要手动实现一个优先队列，思路是使用一个小顶堆来实现。</p><h4 id="优先队列代码实现"><a href="#优先队列代码实现" class="headerlink" title="优先队列代码实现"></a>优先队列代码实现</h4><p>优先队列代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个可更新数据的优先队列，即小顶堆，根据dist构建</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">PriorityQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Vertex[] nodes;<span class="comment">// 优先队列中的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">// 队列中的节点个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PriorityQueue</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nodes = <span class="keyword">new</span> <span class="title class_">Vertex</span>[v + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Vertex <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">v</span> <span class="operator">=</span> <span class="built_in">this</span>.nodes[<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">this</span>.nodes[<span class="number">1</span>] = <span class="built_in">this</span>.nodes[count--];</span><br><span class="line">        heapify();<span class="comment">// 堆化</span></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入队</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Vertex vertex)</span> &#123;</span><br><span class="line">        nodes[++<span class="built_in">this</span>.count] = vertex;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.count;</span><br><span class="line">        <span class="keyword">while</span>(i/<span class="number">2</span> &gt; <span class="number">0</span> &amp;&amp; nodes[i/<span class="number">2</span>].dist &gt; nodes[i].dist) &#123;</span><br><span class="line">            swap(i/<span class="number">2</span>, i);</span><br><span class="line">            i = i/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新队列中某个节点</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Vertex vertex)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodes[i].id == vertex.id) &#123;</span><br><span class="line">                nodes[i] = vertex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判空</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 堆化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minPos</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> temp * <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> temp * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (left &lt;= count &amp;&amp; nodes[left].dist &lt; nodes[temp].dist) &#123;</span><br><span class="line">                minPos = left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right &lt;= count &amp;&amp; nodes[right].dist &lt; nodes[minPos].dist) &#123;</span><br><span class="line">                minPos = right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (minPos == temp) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(temp, minPos);</span><br><span class="line">            temp = minPos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换两个值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> temp, <span class="type">int</span> minPos)</span> &#123;</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">t</span> <span class="operator">=</span> nodes[temp];</span><br><span class="line">        nodes[temp] = nodes[minPos];</span><br><span class="line">        nodes[minPos] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们已经把所有的准备工作都做完了，剩下的只需要利用当前的条件来实现 Dijkstra 算法。</p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dijkstra-algorithm/d-01.png" alt=""></p><p>从上图中顶点 1 开始遍历，顶点 1 可以连通到顶点 2 和 3，将顶点 2 和 3 入队，并同时在 vertexes 数组更新到达顶点 2 和 3 的距离。</p><p>接着出队为顶点 2，顶点 2 能连通的是顶点 3 和 4，此时，我们可以得到顶点 1 到 3 的距离是 1+9=10，而 vertexes 数组中记录的是 12，因此需要更新 vertexes 数组和队列中节点 3 的 dist 值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算从顶点 s 到 t 的最短路</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dijkstra</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] pre = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="built_in">this</span>.v+<span class="number">1</span>];<span class="comment">// 用于还原最短路的路径</span></span><br><span class="line">    Vertex[] vertexes = <span class="keyword">new</span> <span class="title class_">Vertex</span>[<span class="built_in">this</span>.v+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">this</span>.v; i++) &#123;<span class="comment">//初始化 vertexes 数组</span></span><br><span class="line">        vertexes[i] = <span class="keyword">new</span> <span class="title class_">Vertex</span>(i, Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="built_in">this</span>.v+<span class="number">1</span>);<span class="comment">//小顶堆</span></span><br><span class="line">    <span class="type">boolean</span>[] inqueue = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="built_in">this</span>.v+<span class="number">1</span>];<span class="comment">//标记节点是否已经入队</span></span><br><span class="line">    </span><br><span class="line">    vertexes[s].dist = <span class="number">0</span>;</span><br><span class="line">    queue.add(vertexes[s]);</span><br><span class="line">    inqueue[s] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">minVertex</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="keyword">if</span>(minVertex.id == t)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">this</span>.adj[minVertex.id].size(); i++)&#123;<span class="comment">//遍历节点连通的其他节点</span></span><br><span class="line">            <span class="type">Edge</span> <span class="variable">e</span> <span class="operator">=</span> <span class="built_in">this</span>.adj[minVertex.id].get(i);<span class="comment">//取出节点 minVertex.id 相连的节点</span></span><br><span class="line">            <span class="type">Vertex</span> <span class="variable">nextVertex</span> <span class="operator">=</span> vertexes[e.tid];<span class="comment">//初始节点到下一个节点的距离</span></span><br><span class="line">            <span class="keyword">if</span>(minVertex.dist + e.w &lt; nextVertex.dist) &#123;<span class="comment">//上一步计算得到的距离和当前计算出的距离比较</span></span><br><span class="line">                nextVertex.dist = minVertex.dist + e.w;<span class="comment">//更新距离</span></span><br><span class="line">                pre[nextVertex.id] = minVertex.id;<span class="comment">//记录路径</span></span><br><span class="line">                <span class="keyword">if</span>(inqueue[nextVertex.id])&#123;<span class="comment">//若节点已经在队列中，则更新值，若不在则入队</span></span><br><span class="line">                    queue.update(nextVertex);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    queue.add(nextVertex);</span><br><span class="line">                    inqueue[nextVertex.id] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(s);</span><br><span class="line">    print(s, t, pre);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t, <span class="type">int</span>[] pre)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(s == t) <span class="keyword">return</span>;</span><br><span class="line">    print(s, pre[t], pre);</span><br><span class="line">    System.out.print(<span class="string">&quot;-&gt;&quot;</span>+t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Graph</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graph</span>(<span class="number">6</span>);</span><br><span class="line">    g.addEdge(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    g.addEdge(<span class="number">1</span>, <span class="number">3</span>, <span class="number">12</span>);</span><br><span class="line">    g.addEdge(<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">    g.addEdge(<span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>);</span><br><span class="line">    g.addEdge(<span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    g.addEdge(<span class="number">4</span>, <span class="number">5</span>, <span class="number">13</span>);</span><br><span class="line">    g.addEdge(<span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">    g.addEdge(<span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line">    g.addEdge(<span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>);</span><br><span class="line">    g.dijkstra(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*output:</span></span><br><span class="line"><span class="comment">1-&gt;2-&gt;4-&gt;3-&gt;5-&gt;6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h4><p>Dijkstra 算法的核心逻辑已经讲完了，我们现在来考虑一下算法的复杂度情况。</p><p>在核心代码部分，最复杂的是 while 循环和 for 循环嵌套的部分，while 循环最多循环 v 次（v 为顶点个数），for 循环执行次数与边的数目有关，假设顶点数 v 的最大边数是 e。</p><p>for 循环中往优先队列中添加删除数据的复杂度为<code>O(log v)</code>。</p><p>综合上述两部分，最终 Dijkstra 算法的时间复杂度是<code>O(e·logv)</code></p><h3 id="为什么权重不能为负"><a href="#为什么权重不能为负" class="headerlink" title="为什么权重不能为负"></a>为什么权重不能为负</h3><p>Dijkstra算法是贪心算法，大概前提是，从当前的所有可能中就能找到全局的最优解，而负权图不满足这个条件（比如本文末尾的图例）</p><p>让我们从它的算法步骤上仔细分析一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.将图上的初始点看作一个集合S，其它点看作另一个集合</span><br><span class="line">2.根据初始点，求出其它点到初始点的距离d[i] （若相邻，</span><br><span class="line">则d[i]为边权值；若不相邻，则d[i]为无限大）</span><br><span class="line">3.选取最小的d[i]（记为d[x]），并将此d[i]边对应的点（记为x）加入集合S</span><br><span class="line">4.再根据x，更新跟 x 相邻点 y 的d[y]值：d[y] = min&#123;d[y], d[x] + 边权值w[x][y] &#125;，因为可能把距离调小，所以这个更新操作叫做松弛操作。</span><br><span class="line">5.重复3，4两步，直到目标点也加入了集合，此时目标点所对应的d[i]即为最短路径长度。</span><br></pre></td></tr></table></figure><p>在第三步中，若点 x 的 d[x] 值是最小的，就将此点加入集合，而这个 d[x] 便也就是 x 到初始点的最短距离了。</p><p>所以<strong>d[x]的确定</strong>尤其重要，而第三，四步中，d[x] 是根据<strong>已经处于集合中的点</strong>来更新的。</p><p><strong>如果是正权图</strong>，集合内的点到初始点的最短距离已经确认了，把没在集合内的点加入路径只可能会增加无用的边，也就增加了路径长度；所以<strong>只根据</strong>集合内点的邻边来更新，就能得到当前的最小d[x]了。</p><p><strong>但如果是负权图</strong>，注意上句话中的文字 “把没在集合内的点加入路径”，这个时候，如果边的长度是负的，就有<strong>可能产生更小的d[x]</strong>！而Dijkstra根本没有<strong>不会考虑</strong> “把没在集合内的点加入路径”这种情况，这也就是Dijkstra算法目光短浅的原因。</p><p>这里有一个简单的例子：</p><p>  从A到B的最短路。</p><p>  用Dijkstra算法，第一步就能得到所谓的最短路径长度<strong>4</strong>，不会去考虑边(C,B)。</p><p>  而实际上最短路径却需要加入边(C, B)，长度是<strong>2</strong>。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/dijkstra-algorithm/d-02.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贝尔曼福特算法</title>
      <link href="/2020/10/18/bellman-ford-algorithm/"/>
      <url>/2020/10/18/bellman-ford-algorithm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="贝尔曼福特算法"><a href="#贝尔曼福特算法" class="headerlink" title="贝尔曼福特算法"></a>贝尔曼福特算法</h2><h3 id="松弛算法"><a href="#松弛算法" class="headerlink" title="松弛算法"></a>松弛算法</h3><p>想像一下图论中的graph 是用毛线和珠子组成的网状结构，两颗珠子之间毛线的长度即edge上的权值，一开始十分松乱的放在桌上。现在你要求SSSP(单源最短路)，当发现从源点s到当前点u有两条路径，relax操作可以想象成用力把s和u两点往外撑开。这时候依照生活经验，我们可以很自然的看到s点和u点之间较短的那条边处于紧绷状态，而较长的那条边处于松弛状态。因此非常形象的把这个操作称为松弛操作。</p><h3 id="负环路"><a href="#负环路" class="headerlink" title="负环路"></a>负环路</h3><p>负环路（环路权重之和为负数）     </p><p>Bellman Ford算法每次对所有的边进行松弛，每次松弛都会得到一条最短路径，所以总共需要要做的松弛操作是V - 1次。在完成这么多次松弛后如果还是可以松弛的话，那么就意味着，其中包含负环。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><p>初始化时将起点s到各个顶点v的距离dist(s-&gt;v)赋值为∞，dist(s-&gt;s)赋值为0</p></li><li><p>后续进行最多n-1次遍历操作(n为顶点个数,上标的v输入法打不出来…),对所有的边进行松弛操作,假设:</p><p>所谓的松弛，以边ab为例，若dist(a)代表起点s到达a点所需要花费的总数， dist(b)代表起点s到达b点所需要花费的总数,weight(ab)代表边ab的权重， 若存在:</p><p>(dist(a) +weight(ab)) &lt; dist(b)</p><p>则说明存在到b的更短的路径,s-&gt;…-&gt;a-&gt;b,更新b点的总花费为(dist(a) +weight(ab))，父节点为a</p></li><li><p>遍历都结束后，若再进行一次遍历，还能得到s到某些节点更短的路径的话，则说明存在负环路</p></li></ol><p>思路上与狄克斯特拉算法(Dijkstra algorithm)最大的不同是每次都是从源点s重新出发进行”松弛”更新操作，而Dijkstra则是从源点出发向外扩逐个处理相邻的节点，不会去重复处理节点，这边也可以看出Dijkstra效率相对更高点。</p><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><p>如下图，求出A到各节点的最短路径</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/bellman-ford-algorithm/bellman-01.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BellmanFord</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现思路：</span></span><br><span class="line"><span class="comment">     * 1、初始化时将起点起点到各个顶点的距离赋值为（无穷大）∞,当前起点距离赋值为0</span></span><br><span class="line"><span class="comment">     * 2、后续进行最多n-1次遍历操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建图</span></span><br><span class="line">        <span class="type">Edge</span> <span class="variable">ab</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">Edge</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="type">Edge</span> <span class="variable">bc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="type">Edge</span> <span class="variable">be</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">Edge</span> <span class="variable">ed</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;D&quot;</span>, -<span class="number">3</span>);</span><br><span class="line">        <span class="type">Edge</span> <span class="variable">dc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">Edge</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">Edge</span> <span class="variable">db</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要按图中的步骤步数顺序建立数组，否则就是另外一幅图了，</span></span><br><span class="line">        <span class="comment">//从起点A出发，步骤少的排前面</span></span><br><span class="line">        Edge[] edges = <span class="keyword">new</span> <span class="title class_">Edge</span>[] &#123;ab,ac,bc,be,bd,ed,dc,db&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存放到各个节点所需要消耗的时间</span></span><br><span class="line">        HashMap&lt;String,Integer&gt; costMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Integer&gt;();</span><br><span class="line">        <span class="comment">//到各个节点对应的父节点</span></span><br><span class="line">        HashMap&lt;String,String&gt; parentMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化各个节点所消费的，当然也可以再遍历的时候判断下是否为Null</span></span><br><span class="line">        <span class="comment">//i=0的时候</span></span><br><span class="line">        costMap.put(<span class="string">&quot;A&quot;</span>, <span class="number">0</span>); <span class="comment">//源点</span></span><br><span class="line">        costMap.put(<span class="string">&quot;B&quot;</span>, Integer.MAX_VALUE);</span><br><span class="line">        costMap.put(<span class="string">&quot;C&quot;</span>, Integer.MAX_VALUE);</span><br><span class="line">        costMap.put(<span class="string">&quot;D&quot;</span>, Integer.MAX_VALUE);</span><br><span class="line">        costMap.put(<span class="string">&quot;E&quot;</span>, Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行节点数n-1次循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>; i&lt; costMap.size();i++) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">hasChange</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>; j&lt; edges.length;j++) &#123;</span><br><span class="line">                <span class="type">Edge</span> <span class="variable">edge</span> <span class="operator">=</span> edges[j];</span><br><span class="line">                <span class="comment">//该边起点目前总的路径大小</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">startPointCost</span> <span class="operator">=</span> costMap.get(edge.getStartPoint()) == <span class="literal">null</span> ? <span class="number">0</span>:costMap.get(edge.getStartPoint());</span><br><span class="line">                <span class="comment">//该边终点目前总的路径大小</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">endPointCost</span> <span class="operator">=</span> costMap.get(edge.getEndPoint()) == <span class="literal">null</span> ? Integer.MAX_VALUE : costMap.get(edge.getEndPoint());</span><br><span class="line">                <span class="comment">//如果该边终点目前的路径大小 &gt; 该边起点的路径大小 + 该边权重 ，说明有更短的路径了</span></span><br><span class="line">                <span class="keyword">if</span>(endPointCost &gt; (startPointCost + edge.getWeight())) &#123;</span><br><span class="line">                    costMap.put(edge.getEndPoint(), startPointCost + edge.getWeight());</span><br><span class="line">                    parentMap.put(edge.getEndPoint(), edge.getStartPoint());</span><br><span class="line">                    hasChange = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!hasChange) &#123;</span><br><span class="line">                <span class="comment">//经常还没达到最大遍历次数便已经求出解了，此时可以优化为提前退出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在进行一次判断是否存在负环路</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasRing</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>; j&lt; edges.length;j++) &#123;</span><br><span class="line">            <span class="type">Edge</span> <span class="variable">edge</span> <span class="operator">=</span> edges[j];</span><br><span class="line">            <span class="type">int</span> <span class="variable">startPointCost</span> <span class="operator">=</span> costMap.get(edge.getStartPoint()) == <span class="literal">null</span> ? <span class="number">0</span>:costMap.get(edge.getStartPoint());</span><br><span class="line">            <span class="type">int</span> <span class="variable">endPointCost</span> <span class="operator">=</span> costMap.get(edge.getEndPoint()) == <span class="literal">null</span> ? Integer.MAX_VALUE : costMap.get(edge.getEndPoint());</span><br><span class="line">            <span class="keyword">if</span>(endPointCost &gt; (startPointCost + edge.getWeight())) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;\n图中存在负环路，无法求解\n&quot;</span>);</span><br><span class="line">                hasRing = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!hasRing) &#123;</span><br><span class="line">            <span class="comment">//打印出到各个节点的最短路径</span></span><br><span class="line">            <span class="keyword">for</span>(String key : costMap.keySet()) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;\n到目标节点&quot;</span>+key+<span class="string">&quot;最低耗费:&quot;</span>+costMap.get(key));</span><br><span class="line">                <span class="keyword">if</span>(parentMap.containsKey(key)) &#123;</span><br><span class="line">                    List&lt;String&gt; pathList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">parentKey</span> <span class="operator">=</span> parentMap.get(key);</span><br><span class="line">                    <span class="keyword">while</span> (parentKey!=<span class="literal">null</span>) &#123;</span><br><span class="line">                        pathList.add(<span class="number">0</span>, parentKey);</span><br><span class="line">                        parentKey = parentMap.get(parentKey);</span><br><span class="line">                    &#125;</span><br><span class="line">                    pathList.add(key);</span><br><span class="line">                    String path=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span>(String k:pathList) &#123;</span><br><span class="line">                        path = path.equals(<span class="string">&quot;&quot;</span>) ? path : path + <span class="string">&quot; --&gt; &quot;</span>;</span><br><span class="line">                        path = path +  k ;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">&quot;，路线为&quot;</span>+path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  代表&quot;一条边&quot;的信息对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">        <span class="comment">//起点id</span></span><br><span class="line">        <span class="keyword">private</span> String startPoint;</span><br><span class="line">        <span class="comment">//结束点id</span></span><br><span class="line">        <span class="keyword">private</span> String endPoint;</span><br><span class="line">        <span class="comment">//该边的权重</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> weight;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(String startPoint,String endPoint,<span class="type">int</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.startPoint = startPoint;</span><br><span class="line">            <span class="built_in">this</span>.endPoint = endPoint;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getStartPoint</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> startPoint;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getEndPoint</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> endPoint;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="为什么循环n-1次"><a href="#为什么循环n-1次" class="headerlink" title="为什么循环n-1次"></a>为什么循环n-1次</h4><p>首先明确，不是这个算法规定了一定要n-1次循环<br>而是这个算法<code>最坏的情况</code>下需要n-1次循环。</p><p>什么情况下最好?<br>这是我们的图： 很简单的一个图，四个节点，三个边（长度分别是：3 7 12）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 --(3)---2--(7)---3--(12)--4</span><br></pre></td></tr></table></figure><p>让你求出，从1出发的最短路径</p><p><strong>1 .假如题目这样描述：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1   2   3</span><br><span class="line">2   3   7</span><br><span class="line">3   4   12</span><br></pre></td></tr></table></figure><p>能理解吧？ （起点，终点， 长度）</p><p>关键就在于<code>我们从上到下按顺序</code>，把这三个边， 依次存进了 你的 edge[] 数组里面。<br>来看看Bellman算法的代码中，我们是咋操作的</p><ol><li>先把dis 数组，起点处设置为 0 ， 其它点设置为INF， dis[1] = 0 , 其他的dis[] =INF</li><li>对于每一次循环， 算法要求我们，更新 m 条边。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">        <span class="type">int</span> u=e[j].u,v=e[j].v;</span><br><span class="line">        <span class="keyword">if</span>(d[u]!=INF&amp;&amp;d[u]+w[u][v]&lt;d[v]) &#123;</span><br><span class="line">            d[v]=d[u]+w[u][v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们来动手做一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 第一次循环。。。。。。 </span><br><span class="line"> dis[1]=0</span><br><span class="line"> dis[2] =3 ，因为  dis[1] + map[1][2] &lt; dis[2]，也就是 3 + 0 &lt;INF</span><br><span class="line"> dis[3] = 10  ,同理</span><br><span class="line"> dis[4] = 22 , 同理</span><br><span class="line">第二次循环。。。。。。。</span><br><span class="line">dis[1] =0</span><br><span class="line">dis[2] = 3</span><br><span class="line">dis[3] =10</span><br><span class="line">dis[4] = 22  ,啥都没做</span><br><span class="line">第三次循环。。。。。。</span><br><span class="line">也啥都没做</span><br></pre></td></tr></table></figure><p>发现了吗？ 我们仅仅一次循环就出结果了，谁还费那劲要做n-1 次循环？？？？<br>但是，如果是这种呢？</p><p><strong>2 .假如题目这样描述：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3   4   12</span><br><span class="line">2   3   7</span><br><span class="line">1   2   3</span><br></pre></td></tr></table></figure><p>我们再动手操作一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> 第一次循环。。。。。。 </span><br><span class="line"> dis[4]=inf</span><br><span class="line"> dis[3]=inf ，</span><br><span class="line"> dis[2] =3 ,</span><br><span class="line"> dis[1]= 0 ,</span><br><span class="line">第二次循环。。。。。。。</span><br><span class="line"> dis[4]=inf</span><br><span class="line"> dis[3]= 10 ，</span><br><span class="line"> dis[2] =3 ,</span><br><span class="line"> dis[1]= 0 ,</span><br><span class="line">第三次循环。。。。。。</span><br><span class="line"> dis[4]=22</span><br><span class="line"> dis[3]=10，</span><br><span class="line"> dis[2] =3 ,</span><br><span class="line"> dis[1]= 0 ,</span><br></pre></td></tr></table></figure><p>我们必须，做n-1次循环，才能出结果</p><p>原因就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们按顺序存入边，</span><br><span class="line">但是这个顺序有时候很好，（我们第一次循环就是从前往后循环），导致第一次循环就更新了 所有的节点</span><br><span class="line">这个顺序有时候很差（我们每次都是从路径的后面向前面更新），导致每次循环仅仅更新一个</span><br></pre></td></tr></table></figure><p>所以，我们为了应对最差情况，不得不更新n-1次。</p><p>现在你懂了为啥循环中间有个剪枝了吧，就是担心情况太好， 导致后面的循环白白浪费时间，早点剪枝跳出循环。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb笔记</title>
      <link href="/2019/09/14/javaweb-notes/"/>
      <url>/2019/09/14/javaweb-notes/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JavaWeb笔记"><a href="#JavaWeb笔记" class="headerlink" title="JavaWeb笔记"></a>JavaWeb笔记</h1><p>来源于<strong>遇见狂神说</strong>的<a href="https://www.bilibili.com/video/BV12J411M7Sj/"><strong>JavaWeb入门到实战</strong></a></p><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>web开发：</p><ul><li>web，网页的意思  ，如 www.baidu.com</li><li>静态web<ul><li>html，css</li><li>提供给所有人看的数据始终不会发生变化！</li></ul></li><li>动态web<ul><li>淘宝、爱奇艺等网站</li><li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！</li><li>技术栈：Servlet/JSP，ASP，PHP</li></ul></li></ul><p>在Java中，动态web资源开发的技术统称为JavaWeb。</p><h3 id="1-2、web应用程序"><a href="#1-2、web应用程序" class="headerlink" title="1.2、web应用程序"></a>1.2、web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序。</p><ul><li>a.html、b.html……多个web资源，这些web资源可以被外界访问，对外界提供服务。</li><li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li><li>一个web应用由多部分组成 （静态web，动态web）。<ul><li>html，css，js</li><li>jsp，servlet</li><li>Java程序</li><li>jar包</li><li>配置文件 （Properties）</li></ul></li></ul><p>web应用程序编写完毕后，若想提供给外界访问，需要一个服务器来统一管理。</p><h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul><li><em>.htm, </em>.html,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-01.png" alt=""></p><ul><li>静态web存在的缺点<ul><li>Web页面无法动态更新，所有用户看到都是同一个页面<ul><li>轮播图，点击特效：伪动态</li><li>JavaScript [实际开发中，它用的最多]</li><li>VBScript</li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul></li></ul><h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3><p>页面会动态展示，Web的页面展示的效果因人而异。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-02.png" alt=""></p><p>缺点：</p><ul><li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的后台程序，重新发布。<ul><li>停机维护</li></ul></li></ul><p>优点：</p><ul><li>Web页面可以动态更新，所有用户看到都不是同一个页面</li><li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-03.png" alt=""></p><h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><p><strong>ASP:</strong></p><ul><li>微软：国内最早流行的就是ASP。</li><li>在HTML中嵌入了VB的脚本，  ASP + COM。</li><li>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱。</li><li>维护成本高！</li></ul><p><strong>PHP：</strong></p><ul><li>PHP开发速度很快，功能很强大，跨平台，代码很简单。</li><li>无法承载大访问量的情况（局限性）。</li></ul><p><strong>JSP/Servlet : </strong> </p><p>B/S：浏览和服务器。</p><p>C/S：客户端和服务器。</p><ul><li>sun公司主推的B/S架构。</li><li>基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)。</li><li>可以承载三高问题带来的影响。</li><li>语法像ASP。</li></ul><h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息。</p><p><strong>IIS</strong></p><p>由微软公司提供的基于运行Microsoft Windows的互联网基本服务。</p><p><strong>Tomcat</strong></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-04.png" alt=""></p><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择。</p><p>Tomcat 实际上运行JSP 页面和Servlet。</p><h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><h3 id="3-1、-安装Tomcat"><a href="#3-1、-安装Tomcat" class="headerlink" title="3.1、 安装Tomcat"></a>3.1、 安装Tomcat</h3><p>tomcat官网：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-05.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-06.png" alt=""></p><h3 id="3-2、Tomcat启动和配置"><a href="#3-2、Tomcat启动和配置" class="headerlink" title="3.2、Tomcat启动和配置"></a>3.2、Tomcat启动和配置</h3><p>文件夹作用：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-07.png" alt=""></p><p><strong>启动，关闭Tomcat</strong></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-08.png" alt=""></p><p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>可能遇到的问题：</p><ol><li>Java环境变量没有配置</li><li>闪退问题：需要配置兼容性</li><li>乱码问题：配置文件中设置</li></ol><h3 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-09.png" alt=""></p><p>可以配置启动的端口号</p><ul><li>tomcat的默认端口号为：8080</li><li>mysql：3306</li><li>http：80</li><li>https：443</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8081&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>可以配置主机的名称</p><ul><li>默认的主机名为：localhost-&gt;127.0.0.1</li><li>默认网站应用存放的位置为：webapps</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;www.qinjiang.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>网站是如何进行访问的？</p><ol><li><p>输入一个域名，回车。</p></li><li><p>检查本机的 C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射。</p><ol><li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>       www.baidu.com</span><br></pre></td></tr></table></figure></li><li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到。</p></li></ol><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-10.png" alt=""></p></li><li><p>可以配置一下环境变量（可选性）</p></li></ol><h3 id="3-4、发布一个web网站"><a href="#3-4、发布一个web网站" class="headerlink" title="3.4、发布一个web网站"></a>3.4、发布一个web网站</h3><p>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了</p><p>网站应该有的结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--webapps ：Tomcat服务器的web目录</span><br><span class="line">-ROOT</span><br><span class="line">-webname ：网站的目录名</span><br><span class="line">- WEB-INF</span><br><span class="line">-classes : java程序</span><br><span class="line">-lib：web应用所依赖的jar包</span><br><span class="line">-web.xml ：网站配置文件</span><br><span class="line">- index.html 默认的首页</span><br><span class="line">- <span class="keyword">static</span> </span><br><span class="line">            -css</span><br><span class="line">            -style.css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br><span class="line">         -.....</span><br></pre></td></tr></table></figure><h2 id="4、HTTP"><a href="#4、HTTP" class="headerlink" title="4、HTTP"></a>4、HTTP</h2><h3 id="4-1、什么是HTTP"><a href="#4-1、什么是HTTP" class="headerlink" title="4.1、什么是HTTP"></a>4.1、什么是HTTP</h3><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p><ul><li>文本：html，字符串 ….</li><li>超文本：图片，音乐，视频，定位，地图…….</li></ul><p>HTTPS：在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性。</p><h3 id="4-2、HTTP请求"><a href="#4-2、HTTP请求" class="headerlink" title="4.2、HTTP请求"></a>4.2、HTTP请求</h3><ul><li>客户端—-发请求（Request）—-服务器</li></ul><p>百度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Request URL:https:<span class="comment">//www.baidu.com/   请求地址</span></span><br><span class="line">Request Method:GET    get方法/post方法</span><br><span class="line">Status Code:<span class="number">200</span> OK    状态码：<span class="number">200</span></span><br><span class="line">Remote（远程） Address:<span class="number">14.215</span><span class="number">.177</span><span class="number">.39</span>:<span class="number">443</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Accept:text/html  </span><br><span class="line">Accept-Encoding:gzip, deflate, br</span><br><span class="line">Accept-Language:zh-CN,zh;q=<span class="number">0.9</span>    语言</span><br><span class="line">Cache-Control:max-age=<span class="number">0</span></span><br><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure><h4 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h4><ul><li>请求行中的请求方式：GET</li><li>请求方式：<strong>Get，Post</strong>，HEAD,DELETE,PUT,TRACT…<ul><li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效。</li><li>post：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</li></ul></li></ul><h4 id="2、消息头"><a href="#2、消息头" class="headerlink" title="2、消息头"></a>2、消息头</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="number">8</span>   GB2312  ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br></pre></td></tr></table></figure><h3 id="4-3、HTTP响应"><a href="#4-3、HTTP响应" class="headerlink" title="4.3、HTTP响应"></a>4.3、HTTP响应</h3><ul><li>服务器—-响应——-客户端</li></ul><p>百度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control:<span class="keyword">private</span>    缓存控制</span><br><span class="line">Connection:Keep-Alive    连接</span><br><span class="line">Content-Encoding:gzip    编码</span><br><span class="line">Content-Type:text/html   类型</span><br></pre></td></tr></table></figure><h4 id="1-响应体"><a href="#1-响应体" class="headerlink" title="1.响应体"></a>1.响应体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="number">8</span>   GB2312  ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br><span class="line">Refresh：告诉客户端，多久刷新一次；</span><br><span class="line">Location：让网页重新定位；</span><br></pre></td></tr></table></figure><h4 id="2、响应状态码"><a href="#2、响应状态码" class="headerlink" title="2、响应状态码"></a>2、响应状态码</h4><p>200：请求响应成功  200</p><p>3xx：请求重定向 </p><ul><li>重定向：你重新到我给你新位置去；</li></ul><p>4xx：找不到资源   404</p><ul><li>资源不存在；</li></ul><p>5xx：服务器代码错误   500       502:网关错误</p><h2 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h2><p><strong>为什么要学习这个技术？</strong></p><ol><li><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</p></li><li><p>如何能够让一个东西自动帮我导入和配置这个jar包。</p></li></ol><h3 id="5-1-Maven项目架构管理工具"><a href="#5-1-Maven项目架构管理工具" class="headerlink" title="5.1 Maven项目架构管理工具"></a>5.1 Maven项目架构管理工具</h3><p>Maven就是用来方便导入jar包！</p><p>Maven的核心思想：<strong>约定大于配置</strong></p><h3 id="5-2-下载安装Maven"><a href="#5-2-下载安装Maven" class="headerlink" title="5.2 下载安装Maven"></a>5.2 下载安装Maven</h3><p>官网;<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-11.png" alt=""></p><p>下载完成后，解压即可。</p><h3 id="5-3-配置环境变量"><a href="#5-3-配置环境变量" class="headerlink" title="5.3 配置环境变量"></a>5.3 配置环境变量</h3><p>在系统环境变量中</p><p>配置如下配置：</p><ul><li>M2_HOME     maven目录下的bin目录</li><li>MAVEN_HOME      maven的目录</li><li>在系统的path中配置  %MAVEN_HOME%\bin</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-12.png" alt=""></p><p>测试Maven是否安装成功，保证必须配置完毕！</p><h3 id="5-4-阿里云镜像"><a href="#5-4-阿里云镜像" class="headerlink" title="5.4 阿里云镜像"></a>5.4 阿里云镜像</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-13.png" alt=""></p><ul><li>镜像：mirrors<ul><li>作用：加速下载</li></ul></li><li>国内建议使用阿里云的镜像</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-5-本地仓库"><a href="#5-5-本地仓库" class="headerlink" title="5.5 本地仓库"></a>5.5 本地仓库</h3><p><strong>建立一个本地仓库：</strong>localRepository</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Environment\apache-maven-3.6.2\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-6、在IDEA中使用Maven"><a href="#5-6、在IDEA中使用Maven" class="headerlink" title="5.6、在IDEA中使用Maven"></a>5.6、在IDEA中使用Maven</h3><ol><li><p>启动IDEA</p></li><li><p>创建一个MavenWeb项目</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-14.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-15.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-16.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-17.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-18.png" alt=""></p></li><li><p>等待项目初始化完毕</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-19.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-20.png" alt=""></p></li><li><p>观察maven仓库中多了什么东西？</p></li><li><p>IDEA中的Maven设置</p><p>注意：IDEA项目创建成功后，看一眼Maven的配置</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-21.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-22.png" alt=""></p></li><li><p>到这里，Maven在IDEA中的配置和使用就OK了!</p></li></ol><h3 id="5-7、创建一个普通的Maven项目"><a href="#5-7、创建一个普通的Maven项目" class="headerlink" title="5.7、创建一个普通的Maven项目"></a>5.7、创建一个普通的Maven项目</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-23.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-24.png" alt=""></p><p>这个只有在Web应用下才会有！</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-25.png" alt=""></p><h3 id="5-8-标记文件夹功能"><a href="#5-8-标记文件夹功能" class="headerlink" title="5.8 标记文件夹功能"></a>5.8 标记文件夹功能</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-26.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-27.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-28.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-29.png" alt=""></p><h3 id="5-9-在-IDEA中配置Tomcat"><a href="#5-9-在-IDEA中配置Tomcat" class="headerlink" title="5.9 在 IDEA中配置Tomcat"></a>5.9 在 IDEA中配置Tomcat</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-30.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-31.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-32.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-33.png" alt=""></p><p>解决警告问题</p><p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-34.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-35.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-36.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-37.png" alt=""></p><h3 id="5-10-pom文件"><a href="#5-10-pom文件" class="headerlink" title="5.10 pom文件"></a>5.10 pom文件</h3><p>pom.xml 是Maven的核心配置文件</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-38.png" alt=""></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这里就是我们刚才配置的GAV--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Package：项目的打包方式</span></span><br><span class="line"><span class="comment">  jar：java应用</span></span><br><span class="line"><span class="comment">  war：JavaWeb应用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的默认构建编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编码版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--具体依赖的jar包配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目构建用的东西--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-39.png" alt=""></p><p>maven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-12-IDEA操作"><a href="#5-12-IDEA操作" class="headerlink" title="5.12 IDEA操作"></a>5.12 IDEA操作</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-40.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-41.png" alt=""></p><h3 id="5-13-解决遇到的问题"><a href="#5-13-解决遇到的问题" class="headerlink" title="5.13 解决遇到的问题"></a>5.13 解决遇到的问题</h3><ol><li><p>IDEA中每次都要重复配置Maven<br>在IDEA中的全局默认配置中去配置</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-44.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-46.png" alt=""></p></li><li><p>maven默认web项目中的web.xml版本问题</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-47.png" alt=""></p></li><li><p>替换为webapp4.0版本和tomcat一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Maven仓库的使用</p><p>地址：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-48.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-49.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-50.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-51.png" alt=""></p></li></ol><h2 id="6、Servlet"><a href="#6、Servlet" class="headerlink" title="6、Servlet"></a>6、Servlet</h2><h3 id="6-1、Servlet简介"><a href="#6-1、Servlet简介" class="headerlink" title="6.1、Servlet简介"></a>6.1、Servlet简介</h3><ul><li>Servlet就是sun公司开发动态web的一门技术</li><li>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：<ul><li>编写一个类，实现Servlet接口</li><li>把开发好的Java类部署到web服务器中。</li></ul></li></ul><p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p><h3 id="6-2、HelloServlet"><a href="#6-2、HelloServlet" class="headerlink" title="6.2、HelloServlet"></a>6.2、HelloServlet</h3><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p><ol><li><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程。</p></li><li><p>关于Maven父子工程的理解。</p><p>父项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子项目会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父项目中的java子项目可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son <span class="keyword">extends</span> <span class="title class_">father</span></span><br></pre></td></tr></table></figure></li><li><p>Maven环境优化</p><ol><li>修改web.xml为最新的</li><li>将maven的结构搭建完整</li></ol></li><li><p>编写一个Servlet程序</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-52.png" alt=""></p><ol><li><p>编写一个普通类</p></li><li><p>实现Servlet接口，这里我们直接继承HttpServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter(); <span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">&quot;Hello,Serlvet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>编写Servlet的映射</p><p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="comment">&lt;!--注册Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><ol><li><p>配置Tomcat</p><p>注意：配置项目发布的路径就可以了</p></li><li><p>启动测试，OK！</p></li></ol><h3 id="6-3、Servlet原理"><a href="#6-3、Servlet原理" class="headerlink" title="6.3、Servlet原理"></a>6.3、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-53.png" alt=""></p><h3 id="6-4、Mapping问题"><a href="#6-4、Mapping问题" class="headerlink" title="6.4、Mapping问题"></a>6.4、Mapping问题</h3><ol><li><p>一个Servlet可以指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定多个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello4<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello5<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定通用映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>默认请求路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>指定一些后缀或者前缀等等….</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--可以自定义后缀实现请求映射</span></span><br><span class="line"><span class="comment">    注意点，*前面不能加项目映射的路径</span></span><br><span class="line"><span class="comment">    hello/sajdlkajda.qinjiang</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.qinjiang<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--404--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-5、ServletContext"><a href="#6-5、ServletContext" class="headerlink" title="6.5、ServletContext"></a>6.5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p><h4 id="1、共享数据"><a href="#1、共享数据" class="headerlink" title="1、共享数据"></a>1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//this.getInitParameter()   初始化参数</span></span><br><span class="line">        <span class="comment">//this.getServletConfig()   Servlet配置</span></span><br><span class="line">        <span class="comment">//this.getServletContext()  Servlet上下文</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;秦疆&quot;</span>; <span class="comment">//数据</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>,username); <span class="comment">//将一个数据保存在了ServletContext中，名字为：username 。值 username</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;名字&quot;</span>+username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、获取初始化参数"><a href="#2、获取初始化参数" class="headerlink" title="2、获取初始化参数"></a>2、获取初始化参数</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一些web应用初始化参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    resp.getWriter().print(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、请求转发"><a href="#3、请求转发" class="headerlink" title="3、请求转发"></a>3、请求转发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">    System.out.println(<span class="string">&quot;进入了ServletDemo04&quot;</span>);</span><br><span class="line">    <span class="comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;); //转发的请求路径</span></span><br><span class="line">    <span class="comment">//requestDispatcher.forward(req,resp); //调用forward实现请求转发；</span></span><br><span class="line">    context.getRequestDispatcher(<span class="string">&quot;/gp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-54.png" alt=""></p><h4 id="4、读取资源文件"><a href="#4、读取资源文件" class="headerlink" title="4、读取资源文件"></a>4、读取资源文件</h4><p>Properties</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p><p>思路：需要一个文件流；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root12312</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">zxczxczxc</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo05</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/com/kuang/servlet/aa.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(user+<span class="string">&quot;:&quot;</span>+pwd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问测试即可ok；</p><h3 id="6-6、HttpServletResponse"><a href="#6-6、HttpServletResponse" class="headerlink" title="6.6、HttpServletResponse"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p><ul><li>如果要获取客户端请求过来的参数：找HttpServletRequest</li><li>如果要给客户端响应一些信息：找HttpServletResponse</li></ul><h4 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h4><p>负责向浏览器发送数据的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ServletOutputStream <span class="title function_">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">PrintWriter <span class="title function_">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure><p>负责向浏览器发送响应头的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setCharacterEncoding</span><span class="params">(String var1)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentLength</span><span class="params">(<span class="type">int</span> var1)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentLengthLong</span><span class="params">(<span class="type">long</span> var1)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentType</span><span class="params">(String var1)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDateHeader</span><span class="params">(String var1, <span class="type">long</span> var2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addDateHeader</span><span class="params">(String var1, <span class="type">long</span> var2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setHeader</span><span class="params">(String var1, String var2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addHeader</span><span class="params">(String var1, String var2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setIntHeader</span><span class="params">(String var1, <span class="type">int</span> var2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addIntHeader</span><span class="params">(String var1, <span class="type">int</span> var2)</span>;</span><br></pre></td></tr></table></figure><p>响应的状态码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">SC_CONTINUE</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_SWITCHING_PROTOCOLS</span> <span class="operator">=</span> <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_OK</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_CREATED</span> <span class="operator">=</span> <span class="number">201</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_ACCEPTED</span> <span class="operator">=</span> <span class="number">202</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NON_AUTHORITATIVE_INFORMATION</span> <span class="operator">=</span> <span class="number">203</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NO_CONTENT</span> <span class="operator">=</span> <span class="number">204</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_RESET_CONTENT</span> <span class="operator">=</span> <span class="number">205</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_PARTIAL_CONTENT</span> <span class="operator">=</span> <span class="number">206</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_MULTIPLE_CHOICES</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_MOVED_PERMANENTLY</span> <span class="operator">=</span> <span class="number">301</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_MOVED_TEMPORARILY</span> <span class="operator">=</span> <span class="number">302</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_FOUND</span> <span class="operator">=</span> <span class="number">302</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_SEE_OTHER</span> <span class="operator">=</span> <span class="number">303</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NOT_MODIFIED</span> <span class="operator">=</span> <span class="number">304</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_USE_PROXY</span> <span class="operator">=</span> <span class="number">305</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_TEMPORARY_REDIRECT</span> <span class="operator">=</span> <span class="number">307</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_BAD_REQUEST</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_UNAUTHORIZED</span> <span class="operator">=</span> <span class="number">401</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_PAYMENT_REQUIRED</span> <span class="operator">=</span> <span class="number">402</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_FORBIDDEN</span> <span class="operator">=</span> <span class="number">403</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NOT_FOUND</span> <span class="operator">=</span> <span class="number">404</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_METHOD_NOT_ALLOWED</span> <span class="operator">=</span> <span class="number">405</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NOT_ACCEPTABLE</span> <span class="operator">=</span> <span class="number">406</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_PROXY_AUTHENTICATION_REQUIRED</span> <span class="operator">=</span> <span class="number">407</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_REQUEST_TIMEOUT</span> <span class="operator">=</span> <span class="number">408</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_CONFLICT</span> <span class="operator">=</span> <span class="number">409</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_GONE</span> <span class="operator">=</span> <span class="number">410</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_LENGTH_REQUIRED</span> <span class="operator">=</span> <span class="number">411</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_PRECONDITION_FAILED</span> <span class="operator">=</span> <span class="number">412</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_REQUEST_ENTITY_TOO_LARGE</span> <span class="operator">=</span> <span class="number">413</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_REQUEST_URI_TOO_LONG</span> <span class="operator">=</span> <span class="number">414</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_UNSUPPORTED_MEDIA_TYPE</span> <span class="operator">=</span> <span class="number">415</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_REQUESTED_RANGE_NOT_SATISFIABLE</span> <span class="operator">=</span> <span class="number">416</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_EXPECTATION_FAILED</span> <span class="operator">=</span> <span class="number">417</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_INTERNAL_SERVER_ERROR</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NOT_IMPLEMENTED</span> <span class="operator">=</span> <span class="number">501</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_BAD_GATEWAY</span> <span class="operator">=</span> <span class="number">502</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_SERVICE_UNAVAILABLE</span> <span class="operator">=</span> <span class="number">503</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_GATEWAY_TIMEOUT</span> <span class="operator">=</span> <span class="number">504</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_HTTP_VERSION_NOT_SUPPORTED</span> <span class="operator">=</span> <span class="number">505</span>;</span><br></pre></td></tr></table></figure><h4 id="2、下载文件"><a href="#2、下载文件" class="headerlink" title="2、下载文件"></a>2、下载文件</h4><ol><li>向浏览器输出消息 </li><li>下载文件<ol><li>要获取下载文件的路径</li><li>下载的文件名是啥？</li><li>设置想办法让浏览器能够支持下载我们需要的东西</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutputStream对象</li><li>将FileOutputStream流写入到buffer缓冲区</li><li>使用OutputStream将缓冲区中的数据输出到客户端！</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 要获取下载文件的路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="string">&quot;F:\\班级管理\\西开【19525】\\2、代码\\JavaWeb\\javaweb-02-servlet\\response\\target\\classes\\秦疆.png&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;下载文件的路径：&quot;</span>+realPath);</span><br><span class="line">    <span class="comment">// 2. 下载的文件名是啥？</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    <span class="comment">// 4. 获取下载文件的输入流</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">// 5. 创建缓冲区</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// 6. 获取OutputStream对象</span></span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">    <span class="comment">// 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class="line">    <span class="keyword">while</span> ((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、验证码功能"><a href="#3、验证码功能" class="headerlink" title="3、验证码功能"></a>3、验证码功能</h4><p>验证怎么来的？</p><ul><li>前端实现</li><li>后端实现，需要用到 Java 的图片类，生产一个图片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何让浏览器3秒自动刷新一次;</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(<span class="number">80</span>,<span class="number">20</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">g</span> <span class="operator">=</span> (Graphics2D) image.getGraphics(); <span class="comment">//笔</span></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="literal">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        g.drawString(makeNum(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器，这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">//网站存在缓存，不让浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把图片写给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>, resp.getOutputStream());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成随机数</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">makeNum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> random.nextInt(<span class="number">9999999</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>-num.length() ; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = sb.toString() + num;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4、实现重定向"><a href="#4、实现重定向" class="headerlink" title="4、实现重定向"></a>4、实现重定向</h4><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-55.png" alt=""></p><p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向</p><p>常见场景：</p><ul><li>用户登录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        resp.setHeader(&quot;Location&quot;,&quot;/r/img&quot;);</span></span><br><span class="line"><span class="comment">        resp.setStatus(302);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/r/img&quot;</span>);<span class="comment">//重定向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重定向和转发的区别？</p><p>相同点</p><ul><li>页面都会实现跳转</li></ul><p>不同点</p><ul><li>请求转发的时候，url不会产生变化</li><li>重定向时候，url地址栏会发生变化；</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-56.png" alt=""></p><h4 id="5、简单实现登录重定向"><a href="#5、简单实现登录重定向" class="headerlink" title="5、简单实现登录重定向"></a>5、简单实现登录重定向</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//处理请求</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(username+<span class="string">&quot;:&quot;</span>+password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向时候一定要注意，路径问题，否则404；</span></span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/r/success.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.RequestTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Success&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-7、HttpServletRequest"><a href="#6-7、HttpServletRequest" class="headerlink" title="6.7、HttpServletRequest"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息。</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-57.png" alt=""></p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-58.png" alt=""></p><h4 id="获取参数，请求转发"><a href="#获取参数，请求转发" class="headerlink" title="获取参数，请求转发"></a>获取参数，请求转发</h4><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-59.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String[] hobbys = req.getParameterValues(<span class="string">&quot;hobbys&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line">    <span class="comment">//后台接收中文乱码问题</span></span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    System.out.println(Arrays.toString(hobbys));</span><br><span class="line">    System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(req.getContextPath());</span><br><span class="line">    <span class="comment">//通过请求转发</span></span><br><span class="line">    <span class="comment">//这里的 / 代表当前的web应用</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重定向和转发的区别？</p><p>相同点</p><ul><li>页面都会实现跳转</li></ul><p>不同点</p><ul><li>请求转发的时候，url不会产生变化   307</li><li>重定向时候，url地址栏会发生变化； 302</li></ul><h2 id="7、Cookie、Session"><a href="#7、Cookie、Session" class="headerlink" title="7、Cookie、Session"></a>7、Cookie、Session</h2><h3 id="7-1、会话"><a href="#7-1、会话" class="headerlink" title="7.1、会话"></a>7.1、会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p><p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p><p><strong>一个网站，怎么证明你来过？</strong></p><p>客户端              服务端</p><ol><li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li><li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li></ol><h3 id="7-2、保存会话的两种技术"><a href="#7-2、保存会话的两种技术" class="headerlink" title="7.2、保存会话的两种技术"></a>7.2、保存会话的两种技术</h3><p><strong>cookie</strong></p><ul><li>客户端技术   （响应，请求）</li></ul><p><strong>session</strong></p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！</li></ul><p>常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p><h3 id="7-3、Cookie"><a href="#7-3、Cookie" class="headerlink" title="7.3、Cookie"></a>7.3、Cookie</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-61.png" alt=""></p><ol><li>从请求中拿到cookie信息</li><li>服务器响应给客户端cookie</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies(); <span class="comment">//获得Cookie</span></span><br><span class="line">cookie.getName(); <span class="comment">//获得cookie中的key</span></span><br><span class="line">cookie.getValue(); <span class="comment">//获得cookie中的vlaue</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="string">&quot;&quot;</span>); <span class="comment">//新建一个cookie</span></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>); <span class="comment">//设置cookie的有效期</span></span><br><span class="line">resp.addCookie(cookie); <span class="comment">//响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure><p><strong>cookie：一般会保存在本地的 用户目录下 appdata；</strong></p><p>一个网站cookie是否存在上限！</p><ul><li>一个Cookie只能保存一个信息；</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li><li>Cookie大小有限制4kb；</li><li>300个cookie浏览器上限；</li></ul><p><strong>删除Cookie；</strong></p><ul><li>不设置有效期，关闭浏览器，自动失效；</li><li>设置有效期时间为 0 ；</li></ul><h3 id="7-4、Session"><a href="#7-4、Session" class="headerlink" title="7.4、Session"></a>7.4、Session</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-62.png" alt=""></p><p>什么是Session：</p><ul><li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li><li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li><li>用户登录之后，整个网站它都可以访问！—&gt; 保存用户的信息、保存购物车的信息…..</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-60.png" alt=""></p><p>Session和cookie的区别：</p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li><li>Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）</li><li>Session对象由服务创建；</li></ul><p>使用场景：</p><ul><li>保存一个登录用户的信息；</li><li>购物车信息；</li><li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li></ul><p>使用Session：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.pojo.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionDemo01</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//得到Session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">//给Session中存东西</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//获取Session的ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sessionId</span> <span class="operator">=</span> session.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断Session是不是新创建</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session创建成功,ID:&quot;</span>+sessionId);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session以及在服务器中存在了,ID:&quot;</span>+sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Session创建的时候做了什么事情；</span></span><br><span class="line"><span class="comment">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span></span><br><span class="line"><span class="comment">//        resp.addCookie(cookie);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到Session</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(person.toString());</span><br><span class="line"></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//手动注销Session</span></span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure><p><strong>会话自动过期：web.xml配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置Session默认的失效时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-63.png" alt=""></p><h2 id="8、JSP"><a href="#8、JSP" class="headerlink" title="8、JSP"></a>8、JSP</h2><h3 id="8-1、什么是JSP"><a href="#8-1、什么是JSP" class="headerlink" title="8.1、什么是JSP"></a>8.1、什么是JSP</h3><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p><p>最大的特点：</p><ul><li>写JSP就像在写HTML；</li><li>区别：<ul><li>HTML只给用户提供静态的数据；</li><li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li></ul></li></ul><h3 id="8-2、JSP原理"><a href="#8-2、JSP原理" class="headerlink" title="8.2、JSP原理"></a>8.2、JSP原理</h3><p>思路：JSP到底怎么执行的！</p><ul><li><p>代码层面没有任何问题</p></li><li><p>服务器内部工作</p><p>tomcat中有一个work目录；</p><p>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-64.png" alt=""></p><p>我电脑的地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\.IntelliJIdea2018<span class="number">.1</span>\system\tomcat\Unnamed_javaweb-session-cookie\work\Catalina\localhost\ROOT\org\apache\jsp</span><br></pre></td></tr></table></figure><p>发现页面转变成了Java程序！</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-65.png" alt=""></p></li></ul><p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p><p>JSP最终也会被转换成为一个Java类！</p><p><strong>JSP 本质上就是一个Servlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspInit</span><span class="params">()</span> &#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//JSPService</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspService</span><span class="params">(.HttpServletRequest request,HttpServletResponse response)</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure><ol><li><p>判断请求</p></li><li><p>内置一些对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;  <span class="comment">//页面上下文</span></span><br><span class="line">javax.servlet.http.<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;    <span class="comment">//session</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;   <span class="comment">//applicationContext</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;         <span class="comment">//config</span></span><br><span class="line">javax.servlet.jsp.<span class="type">JspWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;           <span class="comment">//out</span></span><br><span class="line"><span class="keyword">final</span> java.lang.<span class="type">Object</span> <span class="variable">page</span> <span class="operator">=</span> <span class="built_in">this</span>;               <span class="comment">//page：当前</span></span><br><span class="line">HttpServletRequest request                        <span class="comment">//请求</span></span><br><span class="line">HttpServletResponse response                      <span class="comment">//响应</span></span><br></pre></td></tr></table></figure></li><li><p>输出页面前增加的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html&quot;</span>);       <span class="comment">//设置响应的页面类型</span></span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="built_in">this</span>, request, response,</span><br><span class="line">                                          <span class="literal">null</span>, <span class="literal">true</span>, <span class="number">8192</span>, <span class="literal">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure></li><li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p></li></ol><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-66.png" alt=""></p><p>在JSP页面中；</p><p>只要是 JAVA代码就会原封不动的输出；</p><p>如果是HTML代码，就会被转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\r\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>这样的格式，输出到前端！</p><h3 id="8-3、JSP基础语法"><a href="#8-3、JSP基础语法" class="headerlink" title="8.3、JSP基础语法"></a>8.3、JSP基础语法</h3><p>任何语言都有自己的语法，JSP 作为java技术的一种应用，它拥有一些自己扩充的语法，Java所有语法都支持！</p><h4 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a><strong>JSP表达式</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line">作用：用来将程序的输出，输出到客户端</span><br><span class="line">&lt;%= 变量或者表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> <span class="title class_">java</span>.util.Date()%&gt;</span><br></pre></td></tr></table></figure><h4 id="jsp脚本片段"><a href="#jsp脚本片段" class="headerlink" title="jsp脚本片段"></a><strong>jsp脚本片段</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%--jsp脚本片段--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">100</span> ; i++) &#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">  &#125;</span><br><span class="line">  out.println(<span class="string">&quot;&lt;h1&gt;Sum=&quot;</span>+sum+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>脚本片段的再实现</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  out.println(x);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt;这是一个JSP文档&lt;/p&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">  out.println(y);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--在代码嵌入HTML元素--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">  &lt;h1&gt;Hello,World  &lt;%=i%&gt; &lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Loading Servlet!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">globalVar</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kuang</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;进入了方法Kuang！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到jspService方法中！</p><p>在JSP，嵌入Java代码即可！</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%%&gt;</span><br><span class="line">&lt;%=%&gt;</span><br><span class="line">&lt;%!%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--注释--%&gt;</span><br></pre></td></tr></table></figure><p>JSP的注释，不会在客户端显示，HTML就会！</p><h3 id="8-4、JSP指令"><a href="#8-4、JSP指令" class="headerlink" title="8.4、JSP指令"></a>8.4、JSP指令</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> args.... %&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="meta">@include</span>会将两个页面合二为一--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/header.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/footer.jsp&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--jSP标签</span><br><span class="line">    jsp:include：拼接页面，本质还是三个</span><br><span class="line">    --%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;/common/header.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;/common/footer.jsp&quot;</span>/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-5、9大内置对象"><a href="#8-5、9大内置对象" class="headerlink" title="8.5、9大内置对象"></a>8.5、9大内置对象</h3><ul><li>PageContext </li><li>Request</li><li>Response</li><li>Session</li><li>Application   【SerlvetContext】  </li><li>config    【SerlvetConfig】</li><li>out</li><li>page </li><li>exception</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;秦疆1号&quot;</span>); <span class="comment">//保存的数据只在一个页面中有效</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;秦疆2号&quot;</span>); <span class="comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;name3&quot;</span>,<span class="string">&quot;秦疆3号&quot;</span>); <span class="comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span></span><br><span class="line">application.setAttribute(<span class="string">&quot;name4&quot;</span>,<span class="string">&quot;秦疆4号&quot;</span>);  <span class="comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure><p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p><p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p><p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p><h3 id="8-6、JSP标签、JSTL标签、EL表达式"><a href="#8-6、JSP标签、JSTL标签、EL表达式" class="headerlink" title="8.6、JSP标签、JSTL标签、EL表达式"></a>8.6、JSP标签、JSTL标签、EL表达式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSTL表达式的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- standard标签库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>EL表达式：  ${ }</p><ul><li><strong>获取数据</strong></li><li><strong>执行运算</strong></li><li><strong>获取web开发的常用对象</strong></li></ul><p><strong>JSP标签</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--jsp:include--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">http:<span class="comment">//localhost:8080/jsptag.jsp?name=kuangshen&amp;age=12</span></span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;/jsptag2.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;kuangshen&quot;</span>&gt;&lt;/jsp:param&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;12&quot;</span>&gt;&lt;/jsp:param&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><p><strong>JSTL表达式</strong></p><p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p><p><strong>格式化标签</strong></p><p><strong>SQL标签</strong></p><p><strong>XML 标签</strong></p><p><strong>核心标签</strong> </p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-67.png" alt=""></p><p><strong>JSTL标签库使用步骤</strong></p><ul><li>引入对应的 taglib</li><li>使用其中的方法</li><li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li></ul><p><strong>c:if</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h4&gt;<span class="keyword">if</span>测试&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;coreif.jsp&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    EL表达式获取表单中的数据</span><br><span class="line">    $&#123;param.参数名&#125;</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;isAdmin&quot;</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;管理员欢迎您！&quot;</span>/&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--自闭合标签--%&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>c:choose   c:when</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--定义一个变量score，值为<span class="number">85</span>--%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;score&quot;</span> value=<span class="string">&quot;55&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为优秀</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为一般</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为良好</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为不及格</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>c:forEach</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; people = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    people.add(<span class="number">0</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    people.add(<span class="number">1</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    people.add(<span class="number">2</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    people.add(<span class="number">3</span>,<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">    people.add(<span class="number">4</span>,<span class="string">&quot;田六&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;list&quot;</span>,people);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line"><span class="keyword">var</span> , 每一次遍历出来的变量</span><br><span class="line">items, 要遍历的对象</span><br><span class="line">begin,   哪里开始</span><br><span class="line">end,     到哪里</span><br><span class="line">step,   步长</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;3&quot;</span> step=<span class="string">&quot;1&quot;</span> &gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9、JavaBean"><a href="#9、JavaBean" class="headerlink" title="9、JavaBean"></a>9、JavaBean</h2><p>实体类</p><p>JavaBean有特定的写法：</p><ul><li>必须要有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get/set方法；</li></ul><p>一般用来和数据库的字段做映射  ORM；</p><p>ORM ：对象关系映射</p><ul><li>表—-&gt;类</li><li>字段—&gt;属性</li><li>行记录——&gt;对象</li></ul><p><strong>people表</strong></p><div class="table-container"><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>1号</td><td>3</td><td>西安</td></tr><tr><td>2</td><td>2号</td><td>18</td><td>西安</td></tr><tr><td>3</td><td>3号</td><td>100</td><td>西安</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">1</span>,<span class="string">&quot;1号&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">2</span>,<span class="string">&quot;2号&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">3</span>,<span class="string">&quot;3号&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>过滤器</li><li>文件上传</li><li>邮件发送</li><li>JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务</li></ul><h2 id="10、MVC三层架构"><a href="#10、MVC三层架构" class="headerlink" title="10、MVC三层架构"></a>10、MVC三层架构</h2><p>什么是MVC：  Model     view     Controller  模型、视图、控制器</p><h3 id="10-1、早些年"><a href="#10-1、早些年" class="headerlink" title="10.1、早些年"></a>10.1、早些年</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-68.png" alt=""></p><p>用户直接访问控制层，控制层就可以直接操作数据库；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">servlet--CRUD--&gt;数据库</span><br><span class="line">弊端：程序十分臃肿，不利于维护  </span><br><span class="line">servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码</span><br><span class="line"></span><br><span class="line">架构：没有什么是加一层解决不了的！</span><br><span class="line">程序猿调用</span><br><span class="line">|</span><br><span class="line">JDBC</span><br><span class="line">|</span><br><span class="line">Mysql Oracle SqlServer ....</span><br></pre></td></tr></table></figure><h3 id="10-2、MVC三层架构"><a href="#10-2、MVC三层架构" class="headerlink" title="10.2、MVC三层架构"></a>10.2、MVC三层架构</h3><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-69.png" alt=""></p><p>Model</p><ul><li>业务处理 ：业务逻辑（Service）</li><li>数据持久层：CRUD   （Dao）</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求 （a，form，img…）</li></ul><p>Controller  （Servlet）</p><ul><li><p>接收用户的请求 ：（req：请求参数、Session信息….）</p></li><li><p>交给业务层处理对应的代码 </p></li><li><p>控制视图的跳转  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure></li></ul><h2 id="11、Filter"><a href="#11、Filter" class="headerlink" title="11、Filter"></a>11、Filter</h2><p>Filter：过滤器 ，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登录验证….</li></ul><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-70.png" alt="1568424858708"></p><p>Filter开发步骤：</p><ol><li><p>导包</p></li><li><p>编写过滤器</p><ol><li><p>导包不要错</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-71.png" alt="1568425162525"></p><p>实现Filter接口，重写对应的方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Chain : 链</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span></span><br><span class="line"><span class="comment">    2. 必须要让过滤器继续同行</span></span><br><span class="line"><span class="comment">        chain.doFilter(request,response);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter执行前....&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response); <span class="comment">//让我们的请求继续走，如果不写，程序到这里就被拦截停止！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter执行后....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁：web服务器关闭的时候，过滤会销毁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>在web.xml中配置 Filter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.kuang.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="12、监听器"><a href="#12、监听器" class="headerlink" title="12、监听器"></a>12、监听器</h2><p>实现一个监听器的接口；（有N种）</p><ol><li><p>编写一个监听器</p><p>实现监听器的接口…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统计网站在线人数 ： 统计session</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建session监听： 看你的一举一动</span></span><br><span class="line">    <span class="comment">//一旦创建Session就会触发一次这个事件！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> se.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">        System.out.println(se.getSession().getId());</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">onlineCount</span> <span class="operator">=</span> (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onlineCount==<span class="literal">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁session监听</span></span><br><span class="line">    <span class="comment">//一旦销毁Session就会触发一次这个事件！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> se.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">onlineCount</span> <span class="operator">=</span> (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onlineCount==<span class="literal">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Session销毁：</span></span><br><span class="line"><span class="comment">    1. 手动销毁  getSession().invalidate();</span></span><br><span class="line"><span class="comment">    2. 自动销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>web.xml中注册监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.kuang.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>看情况是否使用！</p></li></ol><h2 id="13、过滤器、监听器常见应用"><a href="#13、过滤器、监听器常见应用" class="headerlink" title="13、过滤器、监听器常见应用"></a>13、过滤器、监听器常见应用</h2><p><strong>监听器：GUI编程中经常使用；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPanel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;中秋节快乐&quot;</span>);  <span class="comment">//新建一个窗体</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="literal">null</span>); <span class="comment">//面板</span></span><br><span class="line">        frame.setLayout(<span class="literal">null</span>); <span class="comment">//设置窗体的布局</span></span><br><span class="line"></span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line"></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line"></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听事件，监听关闭事件</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>.windowClosing(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p><ol><li><p>用户登录之后，向Sesison中放入用户的数据</p></li><li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class="literal">null</span>)&#123;</span><br><span class="line">    response.sendRedirect(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chain.doFilter(request,response);</span><br></pre></td></tr></table></figure></li></ol><h2 id="14、JDBC"><a href="#14、JDBC" class="headerlink" title="14、JDBC"></a>14、JDBC</h2><p>什么是JDBC ： Java连接数据库！</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-72.png" alt=""></p><p>需要jar包的支持：</p><ul><li>java.sql</li><li>javax.sql</li><li>mysql-conneter-java…  连接驱动（必须要导入）</li></ul><p><strong>实验环境搭建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">    `password` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">    birthday <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id,`name`,`password`,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;zs@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id,`name`,`password`,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;ls@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id,`name`,`password`,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;ww@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span><span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>导入数据库依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql的驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>IDEA中连接数据库：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-73.png" alt=""></p><p><strong>JDBC 固定步骤：</strong></p><ol><li>加载驱动</li><li>连接数据库,代表数据库</li><li>向数据库发送SQL的对象Statement : CRUD</li><li>编写SQL （根据业务，不同的SQL）</li><li>执行SQL</li><li>关闭连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJdbc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.编写SQL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行查询SQL，返回一个 ResultSet  ： 结果集</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;password=&quot;</span>+rs.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+rs.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birthday=&quot;</span>+rs.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">        rs.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>预编译SQL</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.编写SQL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.预编译</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//给第一个占位符？ 的值赋值为1；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;狂神说Java&quot;</span>);<span class="comment">//给第二个占位符？ 的值赋值为狂神说Java；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);<span class="comment">//给第三个占位符？ 的值赋值为123456；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">4</span>,<span class="string">&quot;24736743@qq.com&quot;</span>);<span class="comment">//给第四个占位符？ 的值赋值为1；</span></span><br><span class="line">        preparedStatement.setDate(<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">java</span>.util.Date().getTime()));<span class="comment">//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行SQL</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功@&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>事务</strong></p><p>要么都成功，要么都失败！</p><p>ACID原则：保证数据的安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">开启事务</span><br><span class="line">事务提交  commit()</span><br><span class="line">事务回滚  rollback()</span><br><span class="line">关闭事务</span><br><span class="line"></span><br><span class="line">转账：</span><br><span class="line">A:<span class="number">1000</span></span><br><span class="line">B:<span class="number">1000</span></span><br><span class="line">    </span><br><span class="line">A(<span class="number">900</span>)   --<span class="number">100</span>--&gt;   B(<span class="number">1100</span>) </span><br></pre></td></tr></table></figure><p><strong>Junit单元测试</strong></p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单使用</p><p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-74.png" alt=""></p><p>失败的时候是红色：</p><p><img src="https://moonglowshadow.oss-cn-qingdao.aliyuncs.com/planz/source/posts/javaweb-notes/javaweb-75.png" alt=""></p><p><strong>搭建一个环境</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   `name` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   money <span class="type">FLOAT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;B&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;C&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//配置信息</span></span><br><span class="line">    <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">    String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.加载驱动</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">         connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.通知数据库开启事务,false 开启</span></span><br><span class="line">        connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money-100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class="line">        connection.prepareStatement(sql).executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//制造错误</span></span><br><span class="line">        <span class="comment">//int i = 1/0;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class="line">        connection.prepareStatement(sql2).executeUpdate();</span><br><span class="line"></span><br><span class="line">        connection.commit();<span class="comment">//以上两条SQL都执行成功了，就提交事务！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//如果出现异常，就通知数据库回滚事务</span></span><br><span class="line">            connection.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
